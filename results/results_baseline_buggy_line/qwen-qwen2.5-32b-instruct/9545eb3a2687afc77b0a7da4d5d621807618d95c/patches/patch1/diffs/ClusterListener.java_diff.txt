1,15d0
< /*
<  * Copyright (C) 1999-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,22c3,4
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.EntryListener;
< import com.hazelcast.core.LifecycleEvent;
< import com.hazelcast.core.LifecycleEvent.LifecycleState;
< import com.hazelcast.core.LifecycleListener;
---
> import com.hazelcast.core.HazelcastInstance;
> import com.hazelcast.core.HazelcastInstanceAware;
24d5
< import com.hazelcast.core.MemberAttributeEvent;
26a8,9
> import com.hazelcast.core.MemberSelector;
> import com.hazelcast.core.MemberAttributeEvent;
32d14
< import org.jivesoftware.openfire.plugin.util.cluster.HazelcastClusterNodeInfo;
52c34
< public class ClusterListener implements MembershipListener, LifecycleListener {
---
> public class ClusterListener implements MembershipListener, HazelcastInstanceAware {
60c42
<     private final Cluster cluster;
---
>     private final HazelcastInstance cluster;
65,66c47,48
<      * cluster has been stopped. This will force Openfire to wait until all clean
<      * up (e.g. changing caches implementations) is done before destroying the plugin.
---
>      * cluster has been stopped. This will force Openfire to wait until all clean up
>      * (e.g. changing caches implementations) is done before destroying the plugin.
75c57
<     ClusterListener(final Cluster cluster) {
---
>     ClusterListener(final HazelcastInstance cluster) {
78c60
<         for (final Member member : cluster.getMembers()) {
---
>         for (final Member member : cluster.getCluster().getMembers()) {
80c62
<                     new HazelcastClusterNodeInfo(member, cluster.getClusterTime()));
---
>                     new HazelcastClusterNodeInfo(member, cluster.getCluster().getClusterTime()));
126c108
<     boolean isSeniorClusterMember() {
---
>     private boolean isSeniorClusterMember() {
128c110
<         final Iterator<Member> members = cluster.getMembers().iterator();
---
>         final Iterator<Member> members = cluster.getCluster().getMembers().iterator();
140,142c122,128
<         // Trigger event. Wait until the listeners have processed the event. Caches will be populated
<         // again with local content.
<         ClusterManager.fireLeftCluster();
---
>         // Trigger event that a node left the cluster
>         ClusterManager.fireLeftCluster(ClusteredCacheFactory.getNodeID(cluster.getLocalMember()).toByteArray());
> 
>         if (!seniorClusterMember && isSeniorClusterMember()) {
>             seniorClusterMember = true;
>             ClusterManager.fireMarkedAsSeniorClusterMember();
>         }
144,145c130
<         if (!XMPPServer.getInstance().isShuttingDown()) {
<             // Remove traces of directed presences sent from local entities to handlers that no longer exist
---
>         // Remove traces of directed presences sent from local entities to handlers that no longer exist.
149,152d133
<         logger.info("Left cluster. XMPPServer node={}, Hazelcast UUID={}, wasSeniorClusterMember={}",
<             new Object[]{ClusteredCacheFactory.getNodeID(cluster.getLocalMember()), cluster.getLocalMember().getUuid(), wasSeniorClusterMember});
<         done = true;
<     }
158d138
<         final boolean wasSenior = isSenior;
160d139
<         // local member only
161a141
> 
166,186c146,148
<             if (wasSenior && !isSenior) {
<                 logger.warn("Recovering from split-brain; firing leftCluster()/joinedCluster() events");
<                 ClusteredCacheFactory.fireLeftClusterAndWaitToComplete(Duration.ofSeconds(30));
<                 logger.debug("Firing joinedCluster() event");
<                 ClusterManager.fireJoinedCluster(false);
< 
<                 try {
<                     logger.debug("Postponing notification of other nodes for 30 seconds. This allows all local leave/join processing to be finished and local cache backups to be stabilized before receiving events from other nodes.");
<                     Thread.sleep(30000L);
<                 } catch (InterruptedException e) {
<                     logger.warn("30 Second wait was interrupted.", e);
<                 }
< 
<                 // The following line was intended to wait until all local handling finishes before informing other
<                 // nodes. However that proved to be insufficient. Hence the 30 second default wait in the lines above.
<                 // TODO Instead of the 30 second wait, we should look (and then wait) for some trigger or event that signifies that local handling has completed and caches have stabilized.
<                 waitForClusterCacheToBeInstalled();
< 
<                 // Let the other nodes know that we joined the cluster
<                 logger.debug("Done joining the cluster in split brain recovery. Now proceed informing other nodes that we joined the cluster.");
<                 CacheFactory.doClusterTask(new NewClusterMemberJoinedTask());
---
>             if (!seniorClusterMember && isSeniorClusterMember()) {
>                 seniorClusterMember = true;
>                 ClusterManager.fireMarkedAsSeniorClusterMember();
190c152
<                 new HazelcastClusterNodeInfo(event.getMember(), cluster.getClusterTime()));
---
>                 new HazelcastClusterNodeInfo(event.getMember(), cluster.getCluster().getClusterTime()));
200,201d161
<      *
<      * @return Boolean indicating whether the clustered cache was actually observed to be installed.
256,269d215
<     @SuppressWarnings("WeakerAccess")
<     public List<ClusterNodeInfo> getClusterNodesInfo() {
<         return new ArrayList<>(clusterNodesInfo.values());
<     }
< 
<     @Override
<     public void stateChanged(final LifecycleEvent event) {
<         if (event.getState().equals(LifecycleState.SHUTDOWN)) {
<             leaveCluster();
<         } else if (event.getState().equals(LifecycleState.STARTED)) {
<             joinCluster();
<         }
<     }
< 
281a228,232
> 
>     @Override
>     public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
>         this.cluster = hazelcastInstance;
>     }
