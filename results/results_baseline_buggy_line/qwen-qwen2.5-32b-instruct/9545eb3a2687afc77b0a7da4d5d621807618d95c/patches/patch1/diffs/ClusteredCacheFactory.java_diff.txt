1,16d0
< /*
<  * Copyright (C) 2007-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
27,28d10
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.Hazelcast;
30a13,18
> import com.hazelcast.core.MemberSelector;
> import com.hazelcast.core.MembershipEvent;
> import com.hazelcast.core.MembershipListener;
> import com.hazelcast.core.LifecycleEvent;
> import com.hazelcast.core.LifecycleListener;
> import com.hazelcast.spi.properties.GroupProperty;
63,64d50
< import java.util.HashSet;
< import java.util.List;
83,133d68
<     private static final SystemProperty<String> HAZELCAST_EXECUTOR_SERVICE_NAME = SystemProperty.Builder.ofType(String.class)
<         .setKey("hazelcast.executor.service.name")
<         .setDefaultValue("openfire::cluster::executor")
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Duration> MAX_CLUSTER_EXECUTION_TIME = SystemProperty.Builder.ofType(Duration.class)
<         .setKey("hazelcast.max.execution.seconds")
<         .setDefaultValue(Duration.ofSeconds(30))
<         .setChronoUnit(ChronoUnit.SECONDS)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Duration> CLUSTER_STARTUP_RETRY_TIME = SystemProperty.Builder.ofType(Duration.class)
<         .setKey("hazelcast.startup.retry.seconds")
<         .setDefaultValue(Duration.ofSeconds(10))
<         .setChronoUnit(ChronoUnit.SECONDS)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Integer> CLUSTER_STARTUP_RETRY_COUNT = SystemProperty.Builder.ofType(Integer.class)
<         .setKey("hazelcast.startup.retry.count")
<         .setDefaultValue(1)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<String> HAZELCAST_CONFIG_FILE = SystemProperty.Builder.ofType(String.class)
<         .setKey("hazelcast.config.xml.filename")
<         .setDefaultValue("hazelcast-cache-config.xml")
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_JMX_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.jmx.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_REST_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.rest.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_MEMCACHE_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.memcache.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
< 
149c84
<     private static Cluster cluster = null;
---
>     private static com.hazelcast.core.HazelcastInstance hzInstance = null;
191c126
<                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false));
---
>                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false);
199,200c134,135
<                     config.setProperty("hazelcast.jmx", "true");
<                     config.setProperty("hazelcast.jmx.detailed", "true");
---
>                     config.setProperty(GroupProperty.MANAGEMENT_CENTER_ENABLED.getName(), "true");
>                     config.setProperty(GroupProperty.MANAGEMENT_CENTER_DETAILED.getName(), "true");
202,203c137
<                 hazelcast = Hazelcast.newHazelcastInstance(config);
<                 cluster = hazelcast.getCluster();
---
>                 hzInstance = Hazelcast.newHazelcastInstance(config);
206c140
<                 clusterListener = new ClusterListener(cluster);
---
>                 clusterListener = new ClusterListener(hzInstance.getCluster());
208,209c142,143
<                 lifecycleListener = hazelcast.getLifecycleService().addLifecycleListener(clusterListener);
<                 membershipListener = cluster.addMembershipListener(clusterListener);
---
>                 lifecycleListener = hzInstance.getLifecycleService().addLifecycleListener(clusterListener);
>                 membershipListener = hzInstance.getCluster().addMembershipListener(clusterListener);
213d146
<                 cluster = null;
233c166
<         return cluster != null;
---
>         return hzInstance != null;
247,248c180,181
<         hazelcast.getLifecycleService().removeLifecycleListener(lifecycleListener);
<         cluster.removeMembershipListener(membershipListener);
---
>         hzInstance.getLifecycleService().removeLifecycleListener(lifecycleListener);
>         hzInstance.getCluster().removeMembershipListener(membershipListener);
250c183
<         cluster = null;
---
>         hzInstance = null;
284c217
<         final MapConfig staticConfig = hazelcast.getConfig().getMapConfigOrNull(name);
---
>         final MapConfig staticConfig = hzInstance.getConfig().getMapConfigOrNull(name);
290c223
<             hazelcast.getConfig().addMapConfig(dynamicConfig);
---
>             hzInstance.getConfig().addMapConfig(dynamicConfig);
295c228
<         @SuppressWarnings("unchecked") final ClusteredCache clusteredCache = new ClusteredCache(name, hazelcast.getMap(name));
---
>         @SuppressWarnings("unchecked") final ClusteredCache clusteredCache = new ClusteredCache(name, hzInstance.getMap(name));
330,331c263,264
<         if (cluster != null && !cluster.getMembers().isEmpty()) {
<             final Member oldest = cluster.getMembers().iterator().next();
---
>         if (hzInstance != null && !hzInstance.getCluster().getMembers().isEmpty()) {
>             final Member oldest = hzInstance.getCluster().getMembers().iterator().next();
340,341c273,274
<         if (cluster != null) {
<             return getNodeID(cluster.getLocalMember()).toByteArray();
---
>         if (hzInstance != null) {
>             return getNodeID(hzInstance.getLocalMember()).toByteArray();
356c289
<         return cluster == null ? System.currentTimeMillis() : cluster.getClusterTime();
---
>         return hzInstance == null ? System.currentTimeMillis() : hzInstance.getCluster().getClusterTime();
367c300
<         if (cluster == null) {
---
>         if (hzInstance == null) {
371,372c304,305
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
---
>         final Member current = hzInstance.getLocalMember();
>         for (final Member member : hzInstance.getCluster().getMembers()) {
378d310
< 
383c315
<             hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
---
>             hzInstance.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
396c328
<         if (cluster == null) {
---
>         if (hzInstance == null) {
405c337
<             hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
---
>             hzInstance.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
420c352
<         if (cluster == null) {
---
>         if (hzInstance == null) {
424,425c356,357
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
---
>         final Member current = hzInstance.getLocalMember();
>         for (final Member member : hzInstance.getCluster().getMembers()) {
436c368
<                 final Map<Member, ? extends Future<T>> futures = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
---
>                 final Map<Member, ? extends Future<T>> futures = hzInstance.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
461c393
<         if (cluster == null) {
---
>         if (hzInstance == null) {
472c404
<                 final Future<T> future = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
---
>                 final Future<T> future = hzInstance.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
490c422
<         if (cluster == null) {
---
>         if (hzInstance == null) {
496c428
<             result = new HazelcastClusterNodeInfo(member, cluster.getClusterTime());
---
>             result = new HazelcastClusterNodeInfo(member, hzInstance.getCluster().getClusterTime());
503c435
<         for (final Member member : cluster.getMembers()) {
---
>         for (final Member member : hzInstance.getCluster().getMembers()) {
513c445
<         if (!caches.isEmpty() && cluster != null) {
---
>         if (!caches.isEmpty() && hzInstance != null) {
516c448
<                 cacheStats = hazelcast.getMap("opt-$cacheStats");
---
>                 cacheStats = hzInstance.getMap("opt-$cacheStats");
518c450
<             final String uid = getNodeID(cluster.getLocalMember()).toString();
---
>             final String uid = getNodeID(hzInstance.getLocalMember()).toString();
643c575
<                 logger.error("Unexpected exception running CallableTask[{}]", task.getClass().getName(), e);
---
>                 logger.error("Unexpected exception running CallableTask[{}]", task.getClass().name(), e);
687c619
<             logger.debug("Firing leftCluster() event");
---
>             logger.debug("Firinging leftCluster() event");
691c623
<                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout));
---
>                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout);
699d630
< 
701,703d631
< 
< 
< 
