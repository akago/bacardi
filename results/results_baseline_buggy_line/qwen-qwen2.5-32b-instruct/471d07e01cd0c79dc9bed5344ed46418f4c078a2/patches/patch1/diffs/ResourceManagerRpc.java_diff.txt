1,16d0
< /*
<  * Copyright 2015 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
19,22c3,6
< import com.google.api.services.cloudresourcemanager.model.Constraint;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
---
> import com.google.cloud.resourcemanager.v1beta1.Constraint;
> import com.google.cloud.resourcemanager.v1beta1.OrgPolicy;
> import com.google.cloud.resourcemanager.v1beta1.Policy;
> import com.google.cloud.resourcemanager.v1beta1.Project;
51,55d34
<     @SuppressWarnings("unchecked")
<     <T> T get(Map<Option, ?> options) {
<       return (T) options.get(this);
<     }
< 
57c36
<       return get(options);
---
>       return (String) options.get(this);
61c40
<       return get(options);
---
>       return (Integer) options.get(this);
110,125d88
<    * Lists the projects visible to the current user.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   Tuple<String, Iterable<Project>> list(Map<Option, ?> options);
< 
<   /**
<    * Restores the project identified by the specified project ID. Undelete will only succeed if the
<    * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify
<    * permissions for this project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   void undelete(String projectId);
< 
<   /**
164,165d126
<   // TODO(ajaykannan): implement "Organization" functionality when available (issue #319)
< 
173,174c134
<    * not have an etag set because it is a computed Policy across multiple resources. Subtrees of
<    * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
---
>    * not have an etag set because it is a computed Policy across multiple resources.
214a175,181
> 
>   /**
>    * Lists the projects visible to the current user.
>    *
>    * @throws ResourceManagerException upon failure
>    */
>   Tuple<String, Iterable<Project>> list(Map<Option, ?> options);
