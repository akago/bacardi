1,15d0
< /*
<  * Copyright 2020 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,21c3,6
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.cloud.resourcemanager.v3.BooleanPolicy;
> import com.google.cloud.resourcemanager.v3.ListPolicy;
> import com.google.cloud.resourcemanager.v3.OrgPolicy;
> import com.google.cloud.resourcemanager.v3.RestoreDefault;
53c38
<   private BoolPolicy boolPolicy;
---
>   private BooleanPolicy boolPolicy;
61,219c46
<   /** Used For boolean Constraints, whether to enforce the Constraint or not. */
<   static class BoolPolicy {
< 
<     private final Boolean enforce;
< 
<     BoolPolicy(Boolean enforce) {
<       this.enforce = enforce;
<     }
< 
<     public boolean getEnforce() {
<       return enforce;
<     }
< 
<     @Override
<     public String toString() {
<       return MoreObjects.toStringHelper(this).add("enforce", getEnforce()).toString();
<     }
< 
<     @Override
<     public boolean equals(Object o) {
<       if (this == o) {
<         return true;
<       }
<       if (o == null || getClass() != o.getClass()) {
<         return false;
<       }
<       BoolPolicy that = (BoolPolicy) o;
<       return Objects.equals(enforce, that.enforce);
<     }
< 
<     @Override
<     public int hashCode() {
<       return Objects.hash(enforce);
<     }
< 
<     BooleanPolicy toProtobuf() {
<       return new BooleanPolicy().setEnforced(enforce);
<     }
< 
<     static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {
<       return new BoolPolicy(booleanPolicy.getEnforced());
<     }
<   }
< 
<   /**
<    * The organization ListPolicy object.
<    *
<    * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource
<    * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the
<    * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:
<    * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote
<    * specific values, and is required only if the value contains a ":". Values prefixed with "is:"
<    * are treated the same as values with no prefix. Ancestry subtrees must be in one of the
<    * following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g.
<    * "folders/1234" - "organizations/", e.g. "organizations/1234" The supportsUnder field of the
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
<    */
<   static class Policies {
< 
<     private final String allValues;
<     private final List<String> allowedValues;
<     private final List<java.lang.String> deniedValues;
<     private final Boolean inheritFromParent;
<     private final String suggestedValue;
< 
<     Policies(
<         String allValues,
<         List<String> allowedValues,
<         List<String> deniedValues,
<         Boolean inheritFromParent,
<         String suggestedValue) {
<       this.allValues = allValues;
<       this.allowedValues = allowedValues;
<       this.deniedValues = deniedValues;
<       this.inheritFromParent = inheritFromParent;
<       this.suggestedValue = suggestedValue;
<     }
< 
<     /** Returns all the Values state of this policy. */
<     String getAllValues() {
<       return allValues;
<     }
< 
<     /** Returns the list of allowed values of this resource */
<     List<String> getAllowedValues() {
<       return allowedValues;
<     }
< 
<     /** Returns the list of denied values of this resource. */
<     List<String> getDeniedValues() {
<       return deniedValues;
<     }
< 
<     /** Returns the inheritance behavior for this Policy */
<     Boolean getInheritFromParent() {
<       return inheritFromParent;
<     }
< 
<     /** Returns the suggested value of this policy. */
<     String getSuggestedValue() {
<       return suggestedValue;
<     }
< 
<     @Override
<     public String toString() {
<       return MoreObjects.toStringHelper(this)
<           .add("allValues", getAllValues())
<           .add("allowedValues", getAllowedValues())
<           .add("deniedValues", getDeniedValues())
<           .add("inheritFromParent", getInheritFromParent())
<           .add("suggestedValue", getSuggestedValue())
<           .toString();
<     }
< 
<     @Override
<     public boolean equals(Object o) {
<       if (this == o) {
<         return true;
<       }
<       if (o == null || getClass() != o.getClass()) {
<         return false;
<       }
<       Policies policies = (Policies) o;
<       return Objects.equals(allValues, policies.allValues)
<           && Objects.equals(allowedValues, policies.allowedValues)
<           && Objects.equals(deniedValues, policies.deniedValues)
<           && Objects.equals(inheritFromParent, policies.inheritFromParent)
<           && Objects.equals(suggestedValue, policies.suggestedValue);
<     }
< 
<     @Override
<     public int hashCode() {
<       return Objects.hash(
<           allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
<     }
< 
<     ListPolicy toProtobuf() {
<       return new ListPolicy()
<           .setAllValues(allValues)
<           .setAllowedValues(allowedValues)
<           .setDeniedValues(deniedValues)
<           .setInheritFromParent(inheritFromParent)
<           .setSuggestedValue(suggestedValue);
<     }
< 
<     static Policies fromProtobuf(ListPolicy listPolicy) {
<       return new Policies(
<           listPolicy.getAllValues(),
<           listPolicy.getAllowedValues(),
<           listPolicy.getDeniedValues(),
<           listPolicy.getInheritFromParent(),
<           listPolicy.getSuggestedValue());
<     }
<   }
< 
<   /** Builder for {@code OrganizationPolicyInfo}. */
---
>   /** Builder for the {@link OrgPolicyInfo} object. */
221c48
<     private BoolPolicy boolPolicy;
---
>     private BooleanPolicy boolPolicy;
241c68
<     Builder setBoolPolicy(BoolPolicy boolPolicy) {
---
>     Builder setBoolPolicy(BooleanPolicy boolPolicy) {
292c119
<   public BoolPolicy getBoolPolicy() {
---
>   public BooleanPolicy getBoolPolicy() {
326,350d152
<   @Override
<   public boolean equals(Object o) {
<     if (this == o) {
<       return true;
<     }
<     if (o == null || getClass() != o.getClass()) {
<       return false;
<     }
<     OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;
<     return Objects.equals(boolPolicy, policyInfo.boolPolicy)
<         && Objects.equals(constraint, policyInfo.constraint)
<         && Objects.equals(etag, policyInfo.etag)
<         && Objects.equals(policies, policyInfo.policies)
<         && Objects.equals(restoreDefault, policyInfo.restoreDefault)
<         && Objects.equals(updateTime, policyInfo.updateTime)
<         && Objects.equals(version, policyInfo.version);
<   }
< 
<   @Override
<   public int hashCode() {
<     return Objects.hash(
<         boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
<   }
< 
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
355d156
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
390a192,326
> 
>   static class BoolPolicy {
> 
>     private final Boolean enforce;
> 
>     BoolPolicy(Boolean enforce) {
>       this.enforce = enforce;
>     }
> 
>     public boolean getEnforce() {
>       return enforce;
>     }
> 
>     @Override
>     public String toString() {
>       return MoreObjects.toStringHelper(this).add("enforce", getEnforce()).toString();
>     }
> 
>     @Override
>     public boolean equals(Object o) {
>       if (this == o) {
>         return true;
>       }
>       if (o == null || getClass() != o.getClass()) {
>         return false;
>       }
>       BoolPolicy that = (BoolPolicy) o;
>       return Objects.equals(enforce, that.enforce);
>     }
> 
>     @Override
>     public int hashCode() {
>       return Objects.hash(enforce);
>     }
> 
>     BooleanPolicy toProtobuf() {
>       return new BooleanPolicy().setEnforced(enforce);
>     }
> 
>     static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {
>       return new BoolPolicy(booleanPolicy.getEnforced());
>     }
>   }
> 
>   static class Policies {
> 
>     private final String allValues;
>     private final List<String> allowedValues;
>     private final List<String> deniedValues;
>     private final Boolean inheritFromParent;
>     private final String suggestedValue;
> 
>     Policies(
>         String allValues,
>         List<String> allowedValues,
>         List<String> deniedValues,
>         Boolean inheritFromParent,
>         String suggestedValue) {
>       this.allValues = allValues;
>       this.allowedValues = allowedValues;
>       this.deniedValues = deniedValues;
>       this.inheritFromParent = inheritFromParent;
>       this.suggestedValue = suggestedValue;
>     }
> 
>     String getAllValues() {
>       return allValues;
>     }
> 
>     List<String> getAllowedValues() {
>       return allowedValues;
>     }
> 
>     List<String> getDeniedValues() {
>       return deniedValues;
>     }
> 
>     Boolean getInheritFromParent() {
>       return inheritFromParent;
>     }
> 
>     String getSuggestedValue() {
>       return suggestedValue;
>     }
> 
>     @Override
>     public String toString() {
>       return MoreObjects.toStringHelper(this)
>           .add("allValues", getAllValues())
>           .add("allowedValues", getAllowedValues())
>           .add("deniedValues", getDeniedValues())
>           .add("inheritFromParent", getInheritFromParent())
>           .add("suggestedValue", getSuggestedValue())
>           .toString();
>     }
> 
>     @Override
>     public boolean equals(Object o) {
>       if (this == o) {
>         return true;
>       }
>       if (o == null || getClass() != o.getClass()) {
>         return false;
>       }
>       Policies policies = (Policies) o;
>       return Objects.equals(allValues, policies.allValues)
>           && Objects.equals(allowedValues, policies.allowedValues)
>           && Objects.equals(deniedValues, policies.deniedValues)
>           && Objects.equals(inheritFromParent, policies.inheritFromParent)
>           && Objects.equals(suggestedValue, policies.suggestedValue);
>     }
> 
>     @Override
>     public int hashCode() {
>       return Objects.hash(allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
>     }
> 
>     ListPolicy toProtobuf() {
>       return new ListPolicy()
>           .setAllValues(allValues)
>           .setAllowedValues(allowedValues)
>           .setDeniedValues(deniedValues)
>           .setInheritFromParent(inheritFromParent)
>           .setSuggestedValue(suggestedValue);
>     }
> 
>     static Policies fromProtobuf(ListPolicy listPolicy) {
>       return new Policies(
>           listPolicy.getAllValues(),
>           listPolicy.getAllowedValues(),
>           listPolicy.getDeniedValues(),
>           listPolicy.getInheritFromParent(),
>           listPolicy.getSuggestedValue());
>     }
>   }
