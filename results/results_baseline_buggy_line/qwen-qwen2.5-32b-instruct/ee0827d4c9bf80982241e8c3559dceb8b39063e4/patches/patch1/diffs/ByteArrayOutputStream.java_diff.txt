1,16d0
< /*
<  * Licensed to the Apache Software Foundation (ASF) under one or more
<  * contributor license agreements.  See the NOTICE file distributed with
<  * this work for additional information regarding copyright ownership.
<  * The ASF licenses this file to You under the Apache License, Version 2.0
<  * (the "License"); you may not use this file except in compliance with
<  * the License.  You may obtain a copy of the License at
<  *
<  *      http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
29d12
< import org.apache.commons.io.input.ClosedInputStream;
33,50c16
<  * written into a byte array. The buffer automatically grows as data
<  * is written to it.
<  * <p>
<  * The data can be retrieved using <code>toByteArray()</code> and
<  * <code>toString()</code>.
<  * <p>
<  * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<  * this class can be called after the stream has been closed without
<  * generating an {@code IOException}.
<  * <p>
<  * This is an alternative implementation of the {@link java.io.ByteArrayOutputStream}
<  * class. The original implementation only allocates 32 bytes at the beginning.
<  * As this class is designed for heavy duty it starts at 1024 bytes. In contrast
<  * to the original it doesn't reallocate the whole memory block but allocates
<  * additional buffers. This way no buffers need to be garbage collected and
<  * the contents don't have to be copied to the new buffer. This class is
<  * designed to behave exactly like the original. The only exception is the
<  * deprecated toString(int) method that has been ignored.
---
>  * written into a byte array. The buffer capacity is initially 1024 bytes, though its size increases if necessary.
166c132
<     public void write( final byte[] b, final int off, final int len )
---
>     public synchronized void write( final byte[] b, final int off, final int len )
176c142
<         else if ( len == 0 )
---
>         if ( len == 0 )
219,221c185,186
<      * Writes the entire contents of the specified input stream to this
<      * byte stream. Bytes from the input stream are read directly into the
<      * internal buffers of this streams.
---
>      * Writes the entire contents of an <code>InputStream</code> to the
>      * specified output stream.
223c188
<      * @param in the input stream to read from
---
>      * @param in the input stream to write from
228,229c193
<      * @throws java.io.IOException if an I/O error occurs while reading the input stream
<      * @since 1.4
---
>      * @throws java.io.IOException if an I/O error occurs, such as if the stream is closed
252,386c216
<      * Return the current size of the byte array.
<      *
<      * @return the current size of the byte array
<      */
<     public synchronized int size()
<     {
<         return count;
<     }
< 
<     /**
<      * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<      * this class can be called after the stream has been closed without
<      * generating an {@code IOException}.
<      *
<      * @throws java.io.IOException never (this method should not declare this exception
<      * but it has to now due to backwards compatibility)
<      */
<     @Override
<     public void close() throws IOException
<     {
<         //nop
<     }
< 
<     /**
<      * @see java.io.ByteArrayOutputStream#reset()
<      */
<     public synchronized void reset()
<     {
<         count = 0;
<         filledBufferSum = 0;
<         currentBufferIndex = 0;
<         if ( reuseBuffers )
<         {
<             currentBuffer = buffers.get( currentBufferIndex );
<         }
<         else
<         {
<             //Throw away old buffers
<             currentBuffer = null;
<             int size = buffers.get( 0 ).length;
<             buffers.clear();
<             needNewBuffer( size );
<             reuseBuffers = true;
<         }
<     }
< 
<     /**
<      * Writes the entire contents of this byte stream to the
<      * specified output stream.
<      *
<      * @param out the output stream to write to
<      *
<      * @throws java.io.IOException if an I/O error occurs, such as if the stream is closed
<      * @see java.io.ByteArrayOutputStream#writeTo(java.io.OutputStream)
<      */
<     public synchronized void writeTo( final OutputStream out ) throws IOException
<     {
<         int remaining = count;
<         for ( final byte[] buf : buffers )
<         {
<             final int c = Math.min( buf.length, remaining );
<             out.write( buf, 0, c );
<             remaining -= c;
<             if ( remaining == 0 )
<             {
<                 break;
<             }
<         }
<     }
< 
<     /**
<      * Fetches entire contents of an <code>InputStream</code> and represent
<      * same data as result InputStream.
<      * <p>
<      * This method is useful where,
<      * <ul>
<      * <li>Source InputStream is slow.</li>
<      * <li>It has network resources associated, so we cannot keep it open for
<      * long time.</li>
<      * <li>It has network timeout associated.</li>
<      * </ul>
<      * It can be used in favor of {@link #toByteArray()}, since it
<      * avoids unnecessary allocation and copy of byte[].<br>
<      * This method buffers the input internally, so there is no need to use a
<      * <code>BufferedInputStream</code>.
<      *
<      * @param input Stream to be fully buffered.
<      *
<      * @return A fully buffered stream.
<      *
<      * @throws java.io.IOException if an I/O error occurs
<      * @since 2.0
<      */
<     public static InputStream toBufferedInputStream( final InputStream input )
<         throws IOException
<     {
<         return toBufferedInputStream( input, 1024 );
<     }
< 
<     /**
<      * Fetches entire contents of an <code>InputStream</code> and represent
<      * same data as result InputStream.
<      * <p>
<      * This method is useful where,
<      * <ul>
<      * <li>Source InputStream is slow.</li>
<      * <li>It has network resources associated, so we cannot keep it open for
<      * long time.</li>
<      * <li>It has network timeout associated.</li>
<      * </ul>
<      * It can be used in favor of {@link #toByteArray()}, since it
<      * avoids unnecessary allocation and copy of byte[].<br>
<      * This method buffers the input internally, so there is no need to use a
<      * <code>BufferedInputStream</code>.
<      *
<      * @param input Stream to be fully buffered.
<      * @param size the initial buffer size
<      *
<      * @return A fully buffered stream.
<      *
<      * @throws java.io.IOException if an I/O error occurs
<      * @since 2.5
<      */
<     public static InputStream toBufferedInputStream( final InputStream input, int size )
<         throws IOException
<     {
<         // It does not matter if a ByteArrayOutputStream is not closed as close() is a no-op
<         @SuppressWarnings( "resource" )
<         final ByteArrayOutputStream output = new ByteArrayOutputStream( size );
<         output.write( input );
<         return output.toInputStream();
<     }
< 
<     /**
<      * Gets the current contents of this byte stream as a Input Stream. The
---
>      * Return the current contents of this byte stream as a Input Stream. The
388c218
<      * avoiding memory allocation and copy, thus saving space and time.<br>
---
>      * avoiding memory allocation and copy, thus saving space and time.
391,394d220
<      *
<      * @see java.io.ByteArrayOutputStream#toByteArray()
<      * @see #reset()
<      * @since 2.5
401c227,234
<             return new ClosedInputStream();
---
>             return new InputStream()
>             {
>                 @Override
>                 public int read() throws IOException
>                 {
>                     return -1;
>                 }
>             };
419c252
<      * Gets the curent contents of this byte stream as a byte array.
---
>      * Gets the current contents of this byte stream as a byte array.
423,424d255
<      *
<      * @see java.io.ByteArrayOutputStream#toByteArray()
450c281
<      * Gets the curent contents of this byte stream as a string
---
>      * Gets the current contents of this byte stream as a string
454,456d284
<      *
<      * @see java.io.ByteArrayOutputStream#toString()
<      * @deprecated 2.5 use {@link #toString(String)} instead
467c295
<      * Gets the curent contents of this byte stream as a string
---
>      * Gets the current contents of this byte stream as a string
475d302
<      * @see java.io.ByteArrayOutputStream#toString(String)
483c310
<      * Gets the curent contents of this byte stream as a string
---
>      * Gets the current contents of this byte stream as a string
489,491d315
<      *
<      * @see java.io.ByteArrayOutputStream#toString(String)
<      * @since 2.5
497a322,357
>     /**
>      * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
>      * this class can be called after the stream has been closed without
>      * generating an {@code IOException}.
>      *
>      * @throws java.io.IOException never (this method should not declare this exception)
>      */
>     @Override
>     public void close() throws IOException
>     {
>         //nop
>     }
> 
>     /**
>      * Resets the stream to its initial state.
>      */
>     public synchronized void reset()
>     {
>         count = 0;
>         filledBufferSum = 0;
>         currentBufferIndex = 0;
>         if ( reuseBuffers )
>         {
>             currentBuffer = buffers.get( currentBufferIndex );
>         }
>         else
>         {
>             //Throw away old buffers
>             currentBuffer = null;
>             int size = buffers.get( 0 ).length;
>             buffers.clear();
>             needNewBuffer( size );
>             reuseBuffers = true;
>         }
>     }
> 
