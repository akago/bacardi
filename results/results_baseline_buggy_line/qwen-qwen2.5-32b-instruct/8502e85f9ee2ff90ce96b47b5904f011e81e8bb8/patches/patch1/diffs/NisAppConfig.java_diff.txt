16d15
< import org.nem.nis.dao.*;
25,31d23
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
< import org.nem.peer.connect.CommunicationMode;
< import org.nem.peer.node.*;
< import org.nem.peer.services.ChainServices;
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
65d56
<         @SuppressWarnings("unused")
103c94
<         @Bean(initMethod = "migrate")
---
>         @Bean
105,110c96
<                 final Properties prop = new Properties();
<                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
---
>                 final Flyway flyway = Flyway.configure().dataSource(this.dataSource()).load();
117d102
<         @DependsOn("flyway")
129,130c114,116
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(),
>                                 this.lastBlockHeight(), this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear(),
>                                 this.nisConfiguration().getForkConfiguration());
169c155,186
<         // region observers + validators
---
>         @Bean
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
>         }
> 
>         @Bean
>         public NisMain nisMain() {
>                 final NisConfiguration configuration = this.nisConfiguration();
> 
>                 // initialize network info
>                 NetworkInfos.setDefault(configuration.getNetworkInfo());
> 
>                 // initialize other globals
>                 NemGlobals.setBlockChainConfiguration(configuration.getBlockChainConfiguration());
>                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
> 
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), configuration,
>                                 this.blockAnalyzer(), System::exit);
>         }
> 
>         @SuppressWarnings("serial")
>         private Supplier<WeightedBalances> weighedBalancesSupplier() {
>                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
>                         {
>                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
>                         }
>                 };
> 
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
>                                 "weighted balance scheme", featureSupplierMap);
>         }
172c189,265
<         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
---
>         public BlockAnalyzer blockAnalyzer() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
>                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
>                                 estimatedBlocksPerYear, forkConfiguration);
>         }
> 
>         @Bean
>         public HttpConnectorPool httpConnectorPool() {
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
>                                 ? CommunicationMode.BINARY
>                                 : CommunicationMode.JSON;
>                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
>         }
> 
>         @Bean
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
> 
>                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
> 
>                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
> 
>                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
>                                 this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
>         }
> 
>         @Bean
>         public NetworkHostBootstrapper networkHostBootstrapper() {
>                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
>         }
> 
>         @Bean
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
>         }
> 
>         @Bean
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
>         }
> 
>         @Bean
>         public NemConfigurationPolicy configurationPolicy() {
>                 return new NisConfigurationPolicy();
>         }
> 
>         @Bean
>         public ChainServices chainServices() {
>                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
>         }
> 
>         @Bean
>         public CommonStarter commonStarter() {
>                 return CommonStarter.INSTANCE;
>         }
> 
>         @Bean
>         public LocalHostDetector localHostDetector() {
>                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
>         }
> 
>         @Bean
>         public NodeCompatibilityChecker nodeCompatibilityChecker() {
>                 return new DefaultNodeCompatibilityChecker();
>         }
> 
>         @Bean
>         public EnumSet<ObserverOption> observerOptions() {
196,197d288
<         // endregion
< 
245c336
<         @SuppressWarnings("serial")
---
>         @DependsOn("flyway")
249,250c340
<                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
<                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
---
>                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE, () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
298,447d387
< 
<         @Bean
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
<         public NisMain nisMain() {
<                 final NisConfiguration nisConfiguration = this.nisConfiguration();
< 
<                 // initialize network info
<                 NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());
< 
<                 // initialize other globals
<                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
<                 if (nisConfiguration.ignoreFees()) {
<                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
<                 } else {
<                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
<                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
<                                                         nisConfiguration.getForkConfiguration().getFeeFork().getFirstHeight(),
<                                                         nisConfiguration.getForkConfiguration().getFeeFork().getSecondHeight()
<                                         }));
<                 }
< 
<                 NemGlobals.setBlockChainConfiguration(nisConfiguration.getBlockChainConfiguration());
<                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
< 
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
<                                 this.blockAnalyzer(), System::exit);
<         }
< 
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
<                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
<                         {
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
<         }
< 
<         @Bean
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
<         public NisConfiguration nisConfiguration() {
<                 return new NisConfiguration();
<         }
< 
<         @Bean
<         public TimeProvider timeProvider() {
<                 return CommonStarter.TIME_PROVIDER;
<         }
< 
<         @Bean
<         public TrustProvider trustProvider() {
<                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
<                 final int TRUST_CACHE_TIME = 15 * 60;
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
<                                 this.timeProvider());
<         }
< 
<         @Bean
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
< 
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
< 
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
<         }
< 
<         @Bean
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
<         }
< 
<         @Bean
<         public Function<Address, Collection<Address>> cosignatoryLookup() {
<                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
<         }
< 
<         @Bean
<         public MosaicIdCache mosaicIdCache() {
<                 return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());
<         }
