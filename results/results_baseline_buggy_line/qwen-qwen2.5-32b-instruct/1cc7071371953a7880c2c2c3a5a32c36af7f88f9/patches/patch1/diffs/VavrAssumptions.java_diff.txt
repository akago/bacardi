1,12d0
< /*
<  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
<  * the License. You may obtain a copy of the License at
<  *
<  * http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
<  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
<  * specific language governing permissions and limitations under the License.
<  *
<  * Copyright 2017-2022 the original author or authors.
<  */
24,33c12,19
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.matcher.ElementMatchers;
> import net.bytebuddy.pool.TypePool;
38,42c24
< import java.util.concurrent.Callable;
< 
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
< import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
---
> import java.util.Arrays;
46,49d27
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
51c29
<             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
---
>             .with(new net.bytebuddy.dynamic.scaffold.subclass.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
53c31
<     private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
---
>     private static final MethodDelegation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
55c33
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
---
>     private static final net.bytebuddy.pool.TypeCache<net.bytebuddy.pool.TypeCache.SimpleKey> CACHE = new net.bytebuddy.pool.TypeCache.Simple<>(net.bytebuddy.pool.TypeCache.Sort.SOFT);
74,81d51
<     /**
<      * Creates a new instance of <code>{@link EitherAssert}</code> assumption.
<      *
<      * @param <LEFT>  type of the left value contained in the {@link Either}.
<      * @param <RIGHT> type of the right value contained in the {@link Either}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
83d52
<     @SuppressWarnings("unchecked")
88,94d56
<     /**
<      * Creates a new instance of <code>{@link LazyAssert}</code> assumption.
<      *
<      * @param <VALUE>    type of the value contained in the {@link Lazy}.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
96d57
<     @SuppressWarnings("unchecked")
101,108d61
<     /**
<      * Creates a new instance of <code>{@link MapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the map.
<      * @param <V>    the type of values in the map.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
110d62
<     @SuppressWarnings("unchecked")
115,122d66
<     /**
<      * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the multimap.
<      * @param <V>    the type of values in the multimap.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
124d67
<     @SuppressWarnings("unchecked")
129,135d71
<     /**
<      * Creates a new instance of <code>{@link OptionAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link Option}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
137d72
<     @SuppressWarnings("unchecked")
142,161d76
<     /**
<      * Creates a new instance of <code>{@link SetAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Set}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {
<         return asAssumption(SetAssert.class, Set.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link SeqAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Seq}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
163d77
<     @SuppressWarnings("unchecked")
168,174d81
<     /**
<      * Creates a new instance of <code>{@link TryAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.
<      * @param actual    the actual value.
<      * @return the created assumption for assertion object.
<      */
176,190d82
<     @SuppressWarnings("unchecked")
<     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {
<         return asAssumption(TryAssert.class, Try.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.
<      *
<      * @param <INVALID> type of the value in the case of the invalid {@link Validation}.
<      * @param <VALID>   type of the value in the case of the valid {@link Validation}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
198c90
<         return asAssumption(assertionType, array(actualType), array(actual));
---
>         return asAssumption(assertionType, new Class<?>[]{actualType}, new Object[]{actual});
201,203c93
<     private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType,
<                                                       Class<?>[] constructorTypes,
<                                                       Object... constructorParams) {
---
>     private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertClass, Class<?>[] constructorTypes, Object... constructorParams) {
205c95
<             Class<? extends ASSERTION> type = createAssumptionClass(assertionType);
---
>             Class<? extends ASSERTION> type = createAssumptionClass(assertClass);
213,215c103,104
<     @SuppressWarnings("unchecked")
<     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {
<         SimpleKey cacheKey = new SimpleKey(assertClass);
---
>     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertionType) {
>         net.bytebuddy.pool.TypeCache.SimpleKey cacheKey = new net.bytebuddy.pool.TypeCache.SimpleKey(assertionType);
218c107
<                 () -> generateAssumptionClass(assertClass));
---
>                 () -> generateAssumptionClass(assertionType));
223c112
<                 .method(any())
---
>                 .method(ElementMatchers.any())
226c115
<                 .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))
---
>                 .load(VavrAssumptions.class.getClassLoader())
251,252c140
<     private static RuntimeException assumptionNotMet(Class<?> exceptionClass,
<                                                      AssertionError e) throws ReflectiveOperationException {
---
>     private static RuntimeException assumptionNotMet(Class<?> exceptionClass, AssertionError e) throws ReflectiveOperationException {
257d144
<     // for method that change the object under test (e.g. extracting)
259d145
<         // @format:off
268,269d153
<         // @format:on
<         // should not arrive here
272d155
< 
