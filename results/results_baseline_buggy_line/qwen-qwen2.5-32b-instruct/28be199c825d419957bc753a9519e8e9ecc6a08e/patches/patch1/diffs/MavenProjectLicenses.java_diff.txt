1,15d0
< /*
<  * Copyright (C) 2008-2021 Mycila (mathieu.carbou@gmail.com)
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *         http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
44,49d28
< /**
<  * Helper class for building Artifact/License mappings from a maven project
<  * (multi module or single).
<  *
<  * @author Royce Remer
<  */
60,66d38
<   /**
<    * @param projects       the Set of {@link MavenProject} to scan
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    * @param filters        the list of {@link ArtifactFilter} to scope analysis to
<    * @param log            the log to sync to
<    */
80,88d51
<   /**
<    * @param session        the current {@link MavenSession}
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    * @param scope          String to filter artifacts to,
<    *                       {@link org.apache.maven.artifact.ArtifactScopeEnum}
<    * @param exclusions     List<String> of exclusion expressions,
<    *                       {@link org.apache.maven.shared.artifact.filter.AbstractStrictPatternArtifactFilter}
<    */
105,107d67
<   /**
<    * Return a set of licenses attributed to a single artifact.
<    */
120,126d79
<   /**
<    * Get mapping of Licenses to a set of artifacts presenting that license.
<    *
<    * @param dependencies Set<Artifact> to collate License entries from
<    * @return Map<License, Set < Artifact>> the same artifacts passed in, keyed by
<    * License.
<    */
130,132d82
<     // license:artifact is a many-to-many relationship.
<     // Each artifact may have several licenses.
<     // Each artifact may appear multiple times in the map.
143d92
<   @Override
148,150d96
<   /**
<    * Return the Set of all direct and transitive Artifact dependencies.
<    */
155,156d100
<     // build the set of maven dependencies for each module in the reactor (might
<     // only be the single one) and all its transitives
160c104
<         dependencies.addAll(getGraph().buildDependencyGraph(project, getFilter()).getChildren());
---
>         dependencies.addAll(getGraph().buildDependencyGraph(project, getBuildingRequest(), getFilter()).getChildren());
162,163c106
<         getLog().warn(
<             String.format("Could not get children from project %s, it's dependencies will not be checked!",
---
>         getLog().warn(String.format("Could not get children from project %s, it's dependencies will not be checked!",
168,169d110
<     // build the complete set of direct+transitive dependent artifacts in all
<     // modules in the reactor
174,177d114
< 
<     // tempting, but does not resolve dependencies after the scope in which this
<     // plugin is invoked
<     // return project.getArtifacts();
