54d53
< import java.util.concurrent.TimeUnit;
69,70c68
<             EventHandlingStrategy eventHandlingStrategy,
<             IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig,
---
>             EventHandlingStrategy eventHandlingStrategy, IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig,
72c70
<             String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {
---
>             String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError, GeneralSecurityException {
74,85c72,90
<         final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];
<         for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {
<             reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;
<         }
<         try {
<             reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress,
<                     userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis,
<                     sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig,
<                     proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);
<         } catch (GeneralSecurityException e) {
<             throw new ConfigError(e);
<         }
---
>         this.socketAddresses = socketAddresses;
>         this.localAddress = localAddress;
>         this.userIoFilterChainBuilder = userIoFilterChainBuilder;
>         this.fixSession = fixSession;
>         this.reconnectIntervalInMillis = reconnectIntervalInSeconds;
>         this.sessionSettings = sessionSettings;
>         this.networkingOptions = networkingOptions;
>         this.eventHandlingStrategy = eventHandlingStrategy;
>         this.sslConfig = sslConfig;
>         this.log = log;
> 
>         this.proxyType = proxyType;
>         this.proxyVersion = proxyVersion;
>         this.proxyHost = proxyHost;
>         this.proxyPort = proxyPort;
>         this.proxyUser = proxyUser;
>         this.proxyPassword = proxyPassword;
>         this.proxyDomain = proxyDomain;
>         this.proxyWorkstation = proxyWorkstation;
87c92
<         fixSession.getLog().onEvent("Configured socket addresses for session: " + Arrays.asList(socketAddresses));
---
>         setupIoConnector();
108d112
<         private int connectionFailureCount;
160a165
>             ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);
195d199
<             sslFilter.setUseClientMode(true);
201d204
<             ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);
217c220,221
<                 LogUtil.logThrowable(fixSession.getLog(), "Exception during ConnectTask run", e);
---
>                 LogUtil.logThrowable(fixSession.getLog, "Exception during ConnectTask run", e);
>                 fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));
265c269
<                 fixSession.getLog().onErrorEvent(e.getClass().getName() + " during connection to " + socketAddress + ": " + e + nextRetryMsg);
---
>                 fixSession.getLog.onErrorEvent(e.getClass().getName + " during connection to " + socketAddress + ": " + e + nextRetryMsg);
268c272
<                 LogUtil.logThrowable(fixSession.getLog(), "Exception during connection to " + socketAddress + nextRetryMsg, e);
---
>                 LogUtil.logThrowable(fixSession.log, "Exception during connection to " + socketAddress + nextRetryMsg, e);
300,306c304
<             long millis;
<             if (index >= reconnectIntervalInMillis.length) {
<                 millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];
<             } else {
<                 millis = reconnectIntervalInMillis[index];
<             }
<             return millis;
---
>             return reconnectIntervalInMillis[index];
313,333d310
<         // TODO JMX Expose reconnect property
< 
<         @SuppressWarnings("unused") // exposed via JMX
<         public synchronized int getConnectionFailureCount() {
<             return connectionFailureCount;
<         }
< 
<         @SuppressWarnings("unused") // exposed via JMX
<         public synchronized long getLastReconnectAttemptTime() {
<             return lastReconnectAttemptTime;
<         }
< 
<         @SuppressWarnings("unused") // exposed via JMX
<         public synchronized long getLastConnectTime() {
<             return lastConnectTime;
<         }
< 
<         public Session getFixSession() {
<             return fixSession;
<         }
< 
347c324
<                     LogUtil.logThrowable(fixSession.getLog(), "Exception during resetIoConnector call", e);
---
>                     LogUtil.logThrowable(fixSession.log, "Exception during resetIoConnector call", e);
