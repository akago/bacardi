16,18d15
< import org.nem.nis.dao.*;
< import org.nem.nis.harvesting.*;
< import org.nem.nis.mappers.*;
23d19
< import org.nem.nis.service.BlockChainLastBlockLayer;
84a81,95
>         public Flyway flyway() throws IOException {
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 final Flyway flyway = Flyway.configure()
>                                 .dataSource(this.dataSource())
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .classLoader(NisAppConfig.class.getClassLoader())
>                                 .validateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")))
>                                 .load();
> 
>                 return flyway;
>         }
> 
>         @Bean
91,94d101
<                 // replace url parameters with values from configuration
<                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
<                                 configuration.getNetworkName());
< 
97c104,105
<                 dataSource.setUrl(jdbcUrl);
---
>                 dataSource.setUrl(prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
>                                 configuration.getNetworkInfo().getName()));
103,115d110
<         @Bean(initMethod = "migrate")
<         public Flyway flyway() throws IOException {
<                 final Properties prop = new Properties();
<                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
<         }
< 
129,130c124,200
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
>                                 this.nisConfiguration().getBlockChainConfiguration().getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
>         }
> 
>         @Bean
>         public NisMain nisMain() {
>                 // initialize network info
>                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
> 
>                 // initialize other globals
>                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
>                 if (this.nisConfiguration().ignoreFees()) {
>                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
>                 } else {
>                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
>                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
>                                                         new BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),
>                                                         new BlockHeight(
>                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
>                                         }));
>                 }
> 
>                 NemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());
>                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
> 
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
>                                 this.nisConfiguration(), this.blockAnalyzer(), System::exit);
>         }
> 
>         @SuppressWarnings("serial")
>         private Supplier<WeightedBalances> weighedBalancesSupplier() {
>                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
>                         {
>                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
>                         }
>                 };
> 
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
>                                 "weighted balance scheme", featureSupplierMap);
>         }
> 
>         @Bean
>         public BlockAnalyzer blockAnalyzer() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
>                                 estimatedBlocksPerYear);
>         }
> 
>         @Bean
>         public HttpConnectorPool httpConnectorPool() {
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
>                                 ? CommunicationMode.BINARY
>                                 : CommunicationMode.JSON;
>                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
>         }
> 
>         @Bean
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
> 
>                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
> 
>                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
> 
>                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
>                                 this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
>         }
> 
>         @Bean
>         public NetworkHostBootstrapper networkHostBootstrapper() {
>                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
134,136c204,205
<         public BlockChainUpdater blockChainUpdater() {
<                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
<                                 this.unconfirmedTransactions(), this.nisConfiguration());
---
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
140,142c209,210
<         public BlockChainContextFactory blockChainContextFactory() {
<                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
<                                 this.unconfirmedTransactions());
---
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
145c213,239
<         // region mappers
---
>         @Bean
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
>         }
> 
>         @Bean
>         public EnumSet<ObserverOption> observerOptions() {
>                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
>                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
>                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
>                 }
> 
>                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
>                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
>                         observerOptions.add(ObserverOption.NoOutlinkObserver);
>                 }
> 
>                 return observerOptions;
>         }
> 
>         @Bean
>         public Function<Address, Collection<Address>> cosignatoryLookup() {
>                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
>         }
167,170d260
<         // endregion
< 
<         // region observers + validators
< 
195,196d284
<         // endregion
< 
296,300d383
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
325,335c408,410
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
<                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
<                         {
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
---
>         @Bean
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
339,342c414,415
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear);
---
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
346,350c419,423
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
---
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
362c435
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
---
>                                 this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
389,418d461
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
< 
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
< 
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
<         }
< 
<         @Bean
