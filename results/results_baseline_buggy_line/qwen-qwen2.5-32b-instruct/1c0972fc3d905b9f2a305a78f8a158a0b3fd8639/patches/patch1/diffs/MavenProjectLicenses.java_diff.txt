1,15d0
< /*
<  * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *         http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
29d13
< import org.apache.maven.project.ProjectBuildingRequest;
33c17,18
< import org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;
---
> import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeListGenerator;
> import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeListGeneratorException;
44,49d28
< /**
<  * Helper class for building Artifact/License mappings from a maven project
<  * (multi module or single).
<  *
<  * @author Royce Remer
<  */
59,64d37
<   /**
<    * @param projects       the Set of {@link MavenProject} to scan
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    * @param log            the log to sync to
<    */
78,82d50
<   /**
<    * @param session        the current {@link MavenSession}
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    */
99,101d66
<   /**
<    * Return a set of licenses attributed to a single artifact.
<    */
114,119d78
<   /**
<    * Get mapping of Licenses to a set of artifacts presenting that license.
<    *
<    * @param dependencies Set to collate License entries from
<    * @return the same artifacts passed in, keyed by license
<    */
123,125d81
<     // license:artifact is a many-to-many relationship.
<     // Each artifact may have several licenses.
<     // Each artifact may appear multiple times in the map.
141,143d96
<   /**
<    * Return the Set of all direct and transitive Artifact dependencies.
<    */
148,149d100
<     // build the set of maven dependencies for each module in the reactor (might
<     // only be the single one) and all its transitives
153,156c104,107
<         dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());
<       } catch (DependencyGraphBuilderException ex) {
<         getLog().warn(
<             String.format("Could not get children from project %s, it's dependencies will not be checked!",
---
>         DependencyNodeListGenerator generator = new DependencyNodeListGenerator();
>         dependencies.addAll(generator.generateDependencyNodeList(getGraph().buildDependencyGraph(buildingRequest, getFilter())));
>       } catch (DependencyGraphBuilderException | DependencyNodeListGeneratorException ex) {
>         getLog().warn(String.format("Could not get children from project %s, it's dependencies will not be checked!",
161,162d111
<     // build the complete set of direct+transitive dependent artifacts in all
<     // modules in the reactor
167,170d115
< 
<     // tempting, but does not resolve dependencies after the scope in which this
<     // plugin is invoked
<     // return project.getArtifacts();
177c122
<   protected void setProjects(final Set<MavenProject> projects) {
---
>   private void setProjects(final Set<MavenProject> projects) {
186c131,137
<     this.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());
---
>     this.graph = Optional.ofNullable(graph).orElse(new DependencyGraphBuilder() {
>       @Override
>       public DependencyNode buildDependencyGraph(ProjectBuildingRequest request, ArtifactFilter filter) throws DependencyGraphBuilderException {
>         // Dummy implementation to avoid compilation error
>         return null;
>       }
>     });
