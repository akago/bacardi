25,31d24
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
< import org.nem.peer.connect.CommunicationMode;
< import org.nem.peer.node.*;
< import org.nem.peer.services.ChainServices;
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
65d57
<         @SuppressWarnings("unused")
85,87c77
<         public DataSource dataSource() throws IOException {
<                 final NisConfiguration configuration = this.nisConfiguration();
<                 final String nemFolder = configuration.getNemFolder();
---
>         public Flyway flyway() throws IOException {
91,93c81,85
<                 // replace url parameters with values from configuration
<                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
<                                 configuration.getNetworkName());
---
>                 final Flyway flyway = Flyway.configure()
>                                 .dataSource(this.dataSource())
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .validateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")))
>                                 .load();
95,100c87
<                 final DriverManagerDataSource dataSource = new DriverManagerDataSource();
<                 dataSource.setDriverClassName(prop.getProperty("jdbc.driverClassName"));
<                 dataSource.setUrl(jdbcUrl);
<                 dataSource.setUsername(prop.getProperty("jdbc.username"));
<                 dataSource.setPassword(prop.getProperty("jdbc.password"));
<                 return dataSource;
---
>                 return flyway;
103,104c90,91
<         @Bean(initMethod = "migrate")
<         public Flyway flyway() throws IOException {
---
>         @Bean
>         public DataSource dataSource() throws IOException {
108,113c95,100
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final DriverManagerDataSource dataSource = new DriverManagerDataSource();
>                 dataSource.setDriverClassName(prop.getProperty("jdbc.driverClassName"));
>                 dataSource.setUrl(prop.getProperty("jdbc.url"));
>                 dataSource.setUsername(prop.getProperty("jdbc.username"));
>                 dataSource.setPassword(prop.getProperty("jdbc.password"));
>                 return dataSource;
117d103
<         @DependsOn("flyway")
129,130c115,117
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(),
>                                 this.lastBlockHeight(), this.nisConfiguration().getBlockChainConfiguration().getMaxTransactionsPerBlock(),
>                                 this.nisConfiguration().getForkConfiguration());
169,170d155
<         // region observers + validators
< 
172,227c157,158
<         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear, forkConfiguration);
<         }
< 
<         @Bean
<         public BlockValidatorFactory blockValidatorFactory() {
<                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
<         }
< 
<         @Bean
<         public TransactionValidatorFactory transactionValidatorFactory() {
<                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
<                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
<         }
< 
<         @Bean
<         public SingleTransactionValidator transactionValidator() {
<                 // this is only consumed by the TransactionController and used in transaction/prepare,
<                 // which should propagate incomplete transactions
<                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
<         }
< 
<         // endregion
< 
<         @Bean
<         public Harvester harvester() {
<                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),
<                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
<                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
< 
<                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
<                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
<                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
<                                 generator);
<         }
< 
<         @Bean
<         public SynchronizedAccountCache accountCache() {
<                 return new SynchronizedAccountCache(new DefaultAccountCache());
<         }
< 
<         @Bean
<         public SynchronizedAccountStateCache accountStateCache() {
<                 return new SynchronizedAccountStateCache(new DefaultAccountStateCache());
<         }
< 
<         @Bean
<         public SynchronizedHashCache transactionHashCache() {
<                 return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));
<         }
< 
<         @Bean
<         public SynchronizedPoxFacade poxFacade() {
<                 return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));
---
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
231,236c162,163
<         public SynchronizedNamespaceCache namespaceCache() {
<                 final BlockHeight mosaicRedefinitionForkHeight = this.nisConfiguration().getForkConfiguration().getMosaicRedefinitionForkHeight();
< 
<                 NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);
<                 return new SynchronizedNamespaceCache(new DefaultNamespaceCache(mosaicRedefinitionForkHeight));
<         }
---
>         public NisMain nisMain() {
>                 final NisConfiguration nisConfiguration = this.nisConfiguration();
238,242c165,166
<         @Bean
<         public ReadOnlyNisCache nisCache() {
<                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),
<                                 this.namespaceCache());
<         }
---
>                 // initialize network info
>                 NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());
244,253c168,170
<         @Bean
<         @SuppressWarnings("serial")
<         public ImportanceCalculator importanceCalculator() {
<                 final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {
<                         {
<                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
<                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
<                                 this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);
<                         }
<                 };
---
>                 // initialize other globals
>                 NemGlobals.setBlockChainConfiguration(nisConfiguration.getBlockChainConfiguration());
>                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
255,256c172,173
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
<                                 featureSupplierMap);
---
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
>                                 this.blockAnalyzer(), System::exit);
286,287c203
<                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
<                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
---
>                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.blockChainLastBlockLayer, this.timeProvider(),
289,290c205
<                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
<                                 this.nisCache());
---
>                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory, this.nisCache());
295,376d209
<         public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {
<                 return this.unconfirmedTransactions().asFilter();
<         }
< 
<         @Bean
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
<         public NisMain nisMain() {
<                 final NisConfiguration nisConfiguration = this.nisConfiguration();
< 
<                 // initialize network info
<                 NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());
< 
<                 // initialize other globals
<                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
<                 if (nisConfiguration.ignoreFees()) {
<                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
<                 } else {
<                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
<                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
<                                                         nisConfiguration.getForkConfiguration().getFeeFork().getFirstHeight(),
<                                                         nisConfiguration.getForkConfiguration().getFeeFork().getSecondHeight()
<                                         }));
<                 }
< 
<                 NemGlobals.setBlockChainConfiguration(nisConfiguration.getBlockChainConfiguration());
<                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
< 
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
<                                 this.blockAnalyzer(), System::exit);
<         }
< 
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
<                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
<                         {
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
<         }
< 
<         @Bean
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
395,407c228,229
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
---
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
409,412c231
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
---
>                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
414,417c233
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
---
>                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
419,421c235,236
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
---
>                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
>                                 this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
425,436c240,241
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
---
>         public NetworkHostBootstrapper networkHostBootstrapper() {
>                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
