1,17d0
< /*
<  * Copyright 2014-2022 Grzegorz Slowikowski (gslowikowski at gmail dot com)
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *   http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing,
<  * software distributed under the License is distributed on an
<  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
<  * KIND, either express or implied.  See the License for the
<  * specific language governing permissions and limitations
<  * under the License.
<  */
< 
32d14
< import org.apache.maven.doxia.module.xhtml.decoration.render.RenderingContext;
34,35d15
< import org.apache.maven.doxia.siterenderer.sink.SiteRendererSink;
< 
37d16
< import org.apache.maven.plugin.MojoExecutionException;
43,44d21
< import org.apache.maven.reporting.MavenReport;
< import org.apache.maven.reporting.MavenReportException;
178d154
<     @Override
190d165
<     @Override
202,203d176
<     @Override
<     @SuppressWarnings( "deprecation" )
213c186,201
<             return; // aggregated report for top level project is generated by last reactor project
---
>             return; // aggregated report for top-level project is generated by last reactor project
>         }
> 
>         if ( getLog().isDebugEnabled() && canGenerateNonAggregatedReport )
>         {
>             getLog().debug( "Generating non-aggregated report." );
>         }
> 
>         if ( getLog().isDebugEnabled() && canGenerateAggregatedReport )
>         {
>             getLog().debug( "Generating aggregated report." );
>         }
> 
>         if ( getLog().isDebugEnabled() && canAttachAggregatedReportToSite )
>         {
>             getLog().debug( "Attaching aggregated report to site." );
220d207
<             // If top-level project is last reactor project it should generate ONLY aggregated report here
226,230d212
<             // Aggregated report must be generated in last reactor project. It may be top-level
<             // project (this is very rare case) or any other project.
<             // Whatever project it is, it must generate report in top-level project's site directory.
<             // WARNING: Last reactor project cannot have scoverage generation skipped
<             // ('skip' configuration parameter set)!
258d239
<     @Override
265d245
<     @Override
272d251
<     @Override
335d313
<     @Override
342d319
<     @Override
349d325
<     @Override
357,375c333
<         if ( reportOutputDirectory != null && destDir != null
<              && !reportOutputDirectory.getAbsolutePath().endsWith( destDir ) )
<         {
<             this.outputDirectory = new File( reportOutputDirectory, destDir );
<         }
<         else
<         {
<             this.outputDirectory = reportOutputDirectory;
<         }
<     }
< 
<     /**
<      * Generates SCoverage report.
<      * 
<      * @throws MojoExecutionException if unexpected problem occurs
<      */
<     @Override
<     public void execute()
<         throws MojoExecutionException
---
>         if ( !reportOutputDirectory.exists() && !reportOutputDirectory.mkdirs() )
377,380c335
<         if ( !canGenerateReport() )
<         {
<             getLog().info( "Skipping SCoverage report generation" );
<             return;
---
>             throw new MavenReportException( String.format( "Cannot create \"%s\" directory ", reportOutputDirectory.getAbsolutePath() ) );
382,390c337
< 
<         try
<         {
<             RenderingContext context = new RenderingContext( outputDirectory, getOutputName() + ".html" );
<             SiteRendererSink sink = new SiteRendererSink( context );
<             Locale locale = Locale.getDefault();
<             generate( sink, locale );
<         }
<         catch ( MavenReportException e )
---
>         else if ( reportOutputDirectory.exists() && !reportOutputDirectory.isDirectory() )
392,393c339
<             String prefix = "An error has occurred in " + getName( Locale.ENGLISH ) + " report generation";
<             throw new MojoExecutionException( prefix + ": " + e.getMessage(), e );
---
>             throw new MavenReportException( String.format( "Directory \"%s\" exists but is not a directory ", reportOutputDirectory.getAbsolutePath() ) );
397,407d342
<     /**
<      * Gets the resource bundle for the specified locale.
<      *
<      * @param locale The locale of the currently generated report.
<      * @return The resource bundle for the requested locale.
<      */
<     private ResourceBundle getBundle( Locale locale )
<     {
<         return ResourceBundle.getBundle( "scoverage-report", locale, getClass().getClassLoader() );
<     }
< 
409c344
<         throws MavenReportException /*, RuntimeException*/
---
>         throws MavenReportException
426,432d360
<         getLog().info( String.format( "Reading scoverage measurements [%s*]...",
<                                       new File( dataDirectory, Constants.MeasurementsPrefix() ).getAbsolutePath() ) );
<         List<File> measurementFiles = Arrays.asList( IOUtils.findMeasurementFiles( dataDirectory ) );
<         scala.collection.Set<Tuple2<Object, String>> measurements =
<                 IOUtils.invoked( CollectionConverters.asScala( measurementFiles ).toSeq(), encoding );
<         coverage.apply( measurements );
< 
459c387,388
<                     if (coverageFile.exists()) {
---
>                     if ( coverageFile.exists() )
>                     {
468,480c397
<                                     statement.location(),
<                                     statementId,
<                                     statement.start(),
<                                     statement.end(),
<                                     statement.line(),
<                                     statement.desc(),
<                                     statement.symbolName(),
<                                     statement.treeName(),
<                                     statement.branch(),
<                                     statement.count(),
<                                     statement.ignored(),
<                                     statement.tests()
<                             );
---
>                                     (statement.location(), statementId, statement.start(), statement.end(), statement.line(), statement.desc(), statement.symbolName(), statement.treeName(), statement.branch(), statement.count(), statement.ignored(), statement.tests());
509c426
<                             throw new MavenReportException( "...", e );
---
>                             throw new MavenReportException( "Error reading source roots file", e );
516d432
<         /* Empty report must be generated or top-level site will contain invalid link to non-existent Scoverage report
519,527c435,437
<             getLog().info( "No subproject data to aggregate, skipping SCoverage report generation" );
<             return;
<         }*/
< 
<         if ( getLog().isDebugEnabled() && scoverageDataDirs.size() > 0 )
<         {
<             getLog().debug( String.format( "Found %d subproject subproject scoverage data directories:",
<                     scoverageDataDirs.size() ) );
<             for ( File dataDir: scoverageDataDirs )
---
>             // last project, but not top-level one
>             // generate here, because 'false' must be returned to Maven in order to avoid adding to this module's site
>             try
529,530c439
<                 getLog().debug( String.format( "- %s", dataDir.getAbsolutePath() ) );
<             }
---
>                 generateAggregatedReports();
532c441
<         else
---
>             catch ( MavenReportException e )
534,535c443,444
<             getLog().info( String.format( "Found %d subproject scoverage data directories.",
<                     scoverageDataDirs.size() ) );
---
>                 throw new RuntimeException( e );
>             }
537,547d445
< 
<         File topLevelModuleOutputDirectory = rebase( outputDirectory, topLevelModule );
<         File topLevelModuleXmlOutputDirectory = rebase( xmlOutputDirectory, topLevelModule );
< 
<         mkdirs( topLevelModuleOutputDirectory );
<         mkdirs( topLevelModuleXmlOutputDirectory );
< 
<         getLog().info( "Generating coverage aggregated reports..." );
<         writeReports( coverage, sourceRoots, topLevelModuleXmlOutputDirectory, topLevelModuleXmlOutputDirectory,
<                       topLevelModuleOutputDirectory );
<         getLog().info( "Coverage aggregated reports completed." );
553c451,460
<         Seq<File> sourceRootsAsScalaSeq = CollectionConverters.asScala( sourceRoots ).toSeq();
---
>         @SuppressWarnings("unchecked")
>         List<String> sourceDirs = project.getExecutionProject().getCompileSourceRoots();
>         List<File> sourceRoots = new ArrayList<File>( sourceDirs.size() );
>         for ( String dir: sourceDirs )
>         {
>             sourceRoots.add( new File( dir ) );
>         }
> 
>         mkdirs( scoverageHtmlOutputDirectory );
>         mkdirs( scoverageXmlOutputDirectory );
555,565c462,464
<         new CoberturaXmlWriter( sourceRootsAsScalaSeq, coberturaXmlOutputDirectory, Option.<String>apply( encoding ) ).write( coverage );
<         getLog().info( String.format( "Written Cobertura XML report [%s]",
<                                       new File( coberturaXmlOutputDirectory, "cobertura.xml" ).getAbsolutePath() ) );
< 
<         new ScoverageXmlWriter( sourceRootsAsScalaSeq, scoverageXmlOutputDirectory, false, Option.<String>apply( encoding ) ).write( coverage );
<         getLog().info( String.format( "Written XML coverage report [%s]",
<                                       new File( scoverageXmlOutputDirectory, "scoverage.xml" ).getAbsolutePath() ) );
< 
<         new ScoverageHtmlWriter( sourceRootsAsScalaSeq, scoverageHtmlOutputDirectory, Option.<String>apply( encoding ) ).write( coverage );
<         getLog().info( String.format( "Written HTML coverage report [%s]",
<                                       new File( scoverageHtmlOutputDirectory, "index.html" ).getAbsolutePath() ) );
---
>         File coverageFile = Serializer.coverageFile( dataDirectory );
>         getLog().info( String.format( "Reading scoverage instrumentation [%s]...", coverageFile.getAbsolutePath() ) );
>         Coverage coverage = Serializer.deserialize( coverageFile, project.getBasedir() );
567,568c466,468
<         getLog().info( String.format( "Statement coverage.: %s%%", coverage.statementCoverageFormatted() ) );
<         getLog().info( String.format( "Branch coverage....: %s%%", coverage.branchCoverageFormatted() ) );
---
>         getLog().info( "Generating coverage reports..." );
>         writeReports( coverage, sourceRoots, coberturaXmlOutputDirectory, scoverageXmlOutputDirectory, scoverageHtmlOutputDirectory );
>         getLog().info( "Coverage reports completed." );
576,577c476
<             throw new MavenReportException( String.format( "Cannot create \"%s\" directory ",
<                                                            directory.getAbsolutePath() ) );
---
>             throw new MavenReportException( String.format( "Cannot create \"%s\" directory ", directory.getAbsolutePath() ) );
581,582c480
<             throw new MavenReportException( String.format( "Directory \"%s\" exists but is not a directory ",
<                                                            directory.getAbsolutePath() ) );
---
>             throw new MavenReportException( String.format( "Directory \"%s\" exists but is not a directory ", directory.getAbsolutePath() ) );
588,589c486
<         return new File( file.getAbsolutePath().replace( project.getBasedir().getAbsolutePath(),
<                                                          otherModule.getBasedir().getAbsolutePath() ) );
---
>         return new File( file.getAbsolutePath().replace( project.getBasedir().getAbsolutePath(), otherModule.getBasedir().getAbsolutePath() ) );
591d487
< 
