1,18d0
< //
< // Wire
< // Copyright (C) 2016 Wire Swiss GmbH
< //
< // This program is free software: you can redistribute it and/or modify
< // it under the terms of the GNU General Public License as published by
< // the Free Software Foundation, either version 3 of the License, or
< // (at your option) any later version.
< //
< // This program is distributed in the hope that it will be useful,
< // but WITHOUT ANY WARRANTY; without even the implied warranty of
< // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
< // GNU General Public License for more details.
< //
< // You should have received a copy of the GNU General Public License
< // along with this program. If not, see http://www.gnu.org/licenses/.
< //
< 
43c25
< import com.wire.xenon.factories.StorageFactory;
---
> import com.wire.xenion.factories.StorageFactory;
51d32
< import io.dropwizard.servlets.tasks.Task;
159c140
<     private Client createHttpClient(Config config, Environment env) {
---
>     protected Client createHttpClient(Config config, Environment env) {
169a151
> 
194,210c176
<     public StorageFactory getStorageFactory() {
<         if (config.database.getDriverClass().equalsIgnoreCase("fs")) {
<             return botId -> new FileState(config.database.getUrl(), botId);
<         }
< 
<         return botId -> new JdbiState(botId, getJdbi());
<     }
< 
<     public CryptoFactory getCryptoFactory() {
<         if (config.database.getDriverClass().equalsIgnoreCase("fs")) {
<             return (botId) -> new CryptoFile(config.database.getUrl(), botId);
<         }
< 
<         return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));
<     }
< 
<     private void addResources() {
---
>     public void addResources() {
235c201
<     protected void addTask(Task task) {
---
>     protected void addTask(io.dropwizard.servlets.tasks.Task task) {
254,256c220,222
<         environment.healthChecks().register("Crypto", new CryptoHealthCheck(cryptoFactory));
<         environment.healthChecks().register("Alice2Bob", new Alice2Bob(cryptoFactory));
<         environment.healthChecks().register("Outbound", new Outbound(getClient()));
---
>         environment.healthChecks().register("Crypto", new CryptoHealthCheck(cryptoFactory);
>         environment.healthChecks().register("Alice2Bob", new Alice2Bob(cryptoFactory);
>         environment.healthChecks().register("Outbound", new Outbound(getClient());
