You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
package com.example.web;

import java.util.Locale;
import java.util.logging.Logger;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.mvc.Controller;
import javax.mvc.Models;
import javax.mvc.MvcContext;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

/**
 *
 * @author hantsy
 */
@Path("locale")
@Controller
@RequestScoped
public class LocaleController {

    @Inject
    MvcContext mvc;

    @Inject
    Models models;

    @Inject
    Logger log;

    @GET
    public String get() {
        Locale locale = mvc.getLocale();
        models.put("locale", locale);
        return "locale.xhtml";
    }

}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
@Controller
```
```java
Models models;
```
```java
MvcContext mvc;
```
```java
import javax.mvc.MvcContext;
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Interface jakarta.mvc.Controller has been added in the new version of the dependency.
     Class javax.mvc.Controller has been removed in the new version of the dependency.
     Interface jakarta.mvc.Models has been added in the new version of the dependency.
     Class javax.mvc.Models has been removed in the new version of the dependency.
     Class javax.mvc.MvcContext has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /jakartaee-mvc-sample/src/main/java/com/example/web/LocaleController.java:[18,2] cannot find symbol
  symbol: class Controller

[ERROR] /jakartaee-mvc-sample/src/main/java/com/example/web/LocaleController.java:[26,5] cannot find symbol
  symbol:   class Models
  location: class com.example.web.LocaleController

[ERROR] /jakartaee-mvc-sample/src/main/java/com/example/web/LocaleController.java:[23,5] cannot find symbol
  symbol:   class MvcContext
  location: class com.example.web.LocaleController

[ERROR] /jakartaee-mvc-sample/src/main/java/com/example/web/LocaleController.java:[9,17] package javax.mvc does not exist
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
