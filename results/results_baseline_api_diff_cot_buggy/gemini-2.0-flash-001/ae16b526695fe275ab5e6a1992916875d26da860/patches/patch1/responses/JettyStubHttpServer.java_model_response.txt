<fix_planning>
a. Code and API changes:
- The code uses `org.eclipse.jetty.server.nio.SelectChannelConnector`, which has been removed.
- The code uses `org.eclipse.jetty.server.Connector`, which has been removed.
- The code uses `httpConnector.setPort(port)`, but `Connector.setPort(int)` has been removed. `AbstractNetworkConnector.setPort(int)` has been added.
- The code uses `httpConnector.getLocalPort()`, but `SelectChannelConnector.getLocalPort()` and `Connector.getLocalPort()` have been removed. `NetworkConnector.getLocalPort()` and `AbstractNetworkConnector.getLocalPort()` and `ServerConnector.getLocalPort()` have been added.
- The code uses `server.setSendServerVersion(false)` and `server.setSendDateHeader(true)`, but `Server.setSendServerVersion(boolean)` and `Server.setSendDateHeader(boolean)` have been removed. `HttpConfiguration.setSendServerVersion(boolean)` and `HttpConfiguration.setSendDateHeader(boolean)` have been added.

b. Specific API changes causing the issue:
- Removal of `org.eclipse.jetty.server.nio.SelectChannelConnector` and `org.eclipse.jetty.server.Connector`.
- Removal of `Connector.setPort(int)` and `Connector.getLocalPort()`.
- Removal of `Server.setSendServerVersion(boolean)` and `Server.setSendDateHeader(true)`.

c. Affected lines of code:
- `import org.eclipse.jetty.server.nio.SelectChannelConnector;`
- `this.httpConnector = new SelectChannelConnector();`
- `this.httpConnector.setPort(port);`
- `return httpConnector.getLocalPort();`
- `this.server.setSendServerVersion(false);`
- `this.server.setSendDateHeader(true);`

d. Proposed fixes:
- Replace `SelectChannelConnector` with `ServerConnector`.
- Replace `Connector` with `ServerConnector`.
- Use `ServerConnector.setPort(port)` instead of `Connector.setPort(port)`.
- Use `ServerConnector.getLocalPort()` instead of `Connector.getLocalPort()`.
- Use `HttpConfiguration` to set `sendServerVersion` and `sendDateHeader`.

e. Potential side effects:
- The change to `ServerConnector` might have subtle differences in behavior compared to `SelectChannelConnector`. However, since this is a stub server, the impact should be minimal.
- Using `HttpConfiguration` requires creating an instance and associating it with the connector.

f. Adherence to constraints:
- The function signatures are not changed.
- Variables can be created.
- `@Override` annotations might need to be removed if the method no longer overrides a method in the updated dependency version.
- Missing imports will be addressed.
- No existing code will be removed unless it causes a compilation error.

g. Final summary:
The best solution is to replace `SelectChannelConnector` with `ServerConnector`, use `ServerConnector.setPort()` and `ServerConnector.getLocalPort()`, and use `HttpConfiguration` to set `sendServerVersion` and `sendDateHeader`. This addresses all compilation errors and adheres to the given constraints.

</fix_planning>

```java
/*
 * Copyright (c) 2012 - 2016 Jadler contributors
 * This program is made available under the terms of the MIT License.
 */
package net.jadler.stubbing.server.jetty;

import net.jadler.RequestManager;
import net.jadler.stubbing.server.StubHttpServer;
import org.eclipse.jetty.server.Server;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang.Validate;
import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.server.HttpConfiguration;


/**
 * Default stub http server implementation using Jetty as an http server.
 */
public class JettyStubHttpServer implements StubHttpServer {

    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);
    private final Server server;
    private final ServerConnector httpConnector;

    public JettyStubHttpServer() {
        this(0);
    }
    

    public JettyStubHttpServer(final int port) {
        this.server = new Server();

        HttpConfiguration httpConfig = new HttpConfiguration();
        httpConfig.setSendServerVersion(false);
        httpConfig.setSendDateHeader(true);

        this.httpConnector = new ServerConnector(server);
        this.httpConnector.setPort(port);
        server.addConnector(this.httpConnector);
    }
    

    /**
     * {@inheritDoc}
     */
    @Override
    public void registerRequestManager(final RequestManager ruleProvider) {
        Validate.notNull(ruleProvider, "ruleProvider cannot be null");

        server.setHandler(new JadlerHandler(ruleProvider));
    }
    

    /**
     * {@inheritDoc}
     */
    @Override
    public void start() throws Exception {
        logger.debug("starting jetty");
        server.start();
        logger.debug("jetty started");
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public void stop() throws Exception {
        logger.debug("stopping jetty");
        server.stop();
        logger.debug("jetty stopped");
    }
    

    /**
     * {@inheritDoc}
     */
    @Override
    public int getPort() {
        return httpConnector.getLocalPort();
    }
}
```
