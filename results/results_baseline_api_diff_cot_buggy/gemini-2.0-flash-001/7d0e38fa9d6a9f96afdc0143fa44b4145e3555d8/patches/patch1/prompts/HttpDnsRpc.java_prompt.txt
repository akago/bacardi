You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/*
 * Copyright 2016 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dns.spi.v1;

import static java.net.HttpURLConnection.HTTP_NOT_FOUND;

import com.google.api.client.googleapis.batch.BatchRequest;
import com.google.api.client.googleapis.batch.json.JsonBatchCallback;
import com.google.api.client.googleapis.json.GoogleJsonError;
import com.google.api.client.http.HttpHeaders;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Change;
import com.google.api.services.dns.model.ChangesListResponse;
import com.google.api.services.dns.model.ManagedZone;
import com.google.api.services.dns.model.ManagedZonesListResponse;
import com.google.api.services.dns.model.Project;
import com.google.api.services.dns.model.ResourceRecordSet;
import com.google.api.services.dns.model.ResourceRecordSetsListResponse;
import com.google.cloud.dns.DnsException;
import com.google.cloud.dns.DnsOptions;
import com.google.cloud.http.HttpTransportOptions;
import java.io.IOException;
import java.util.Map;

/** A default implementation of the DnsRpc interface. */
public class HttpDnsRpc implements DnsRpc {

  private static final String SORT_BY = "changeSequence";
  private final Dns dns;
  private final DnsOptions options;

  private class DefaultRpcBatch implements RpcBatch {

    private final BatchRequest batch;

    private DefaultRpcBatch(BatchRequest batch) {
      this.batch = batch;
    }

    @Override
    public void addListZones(
        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {
      try {
        listZonesCall(options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addCreateZone(
        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {
      try {
        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addGetZone(
        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {
      try {
        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {
      try {
        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {
      try {
        getProjectCall(options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addListRecordSets(
        String zoneName,
        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,
        Map<DnsRpc.Option, ?> options) {
      try {
        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addListChangeRequests(
        String zoneName,
        RpcBatch.Callback<ChangesListResponse> callback,
        Map<DnsRpc.Option, ?> options) {
      try {
        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addGetChangeRequest(
        String zoneName,
        String changeRequestId,
        RpcBatch.Callback<Change> callback,
        Map<DnsRpc.Option, ?> options) {
      try {
        getChangeRequestCall(zoneName, changeRequestId, options)
            .queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void addApplyChangeRequest(
        String zoneName,
        Change change,
        RpcBatch.Callback<Change> callback,
        Map<DnsRpc.Option, ?> options) {
      try {
        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }

    @Override
    public void submit() {
      try {
        batch.execute();
      } catch (IOException ex) {
        throw translate(ex, false);
      }
    }
  }

  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {
    return new JsonBatchCallback<T>() {
      @Override
      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {
        callback.onSuccess(response);
      }

      @Override
      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)
          throws IOException {
        callback.onFailure(googleJsonError);
      }
    };
  }

  private static DnsException translate(IOException exception, boolean idempotent) {
    return new DnsException(exception, idempotent);
  }

  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */
  public HttpDnsRpc(DnsOptions options) {
    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();
    HttpTransport transport = transportOptions.getHttpTransportFactory().create();
    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);
    this.dns =
        new Dns.Builder(transport, new JacksonFactory(), initializer)
            .setRootUrl(options.getHost())
            .setApplicationName(options.getApplicationName())
            .build();
    this.options = options;
  }

  @Override
  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {
    try {
      return createZoneCall(zone, options).execute();
    } catch (IOException ex) {
      // todo this can cause misleading report of a failure, intended to be fixed within #924
      throw translate(ex, true);
    }
  }

  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)
      throws IOException {
    return dns.managedZones()
        .create(this.options.getProjectId(), zone)
        .setFields(Option.FIELDS.getString(options));
  }

  @Override
  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {
    // just fields option
    try {
      return getZoneCall(zoneName, options).execute();
    } catch (IOException ex) {
      DnsException serviceException = translate(ex, true);
      if (serviceException.getCode() == HTTP_NOT_FOUND) {
        return null;
      }
      throw serviceException;
    }
  }

  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    return dns.managedZones()
        .get(this.options.getProjectId(), zoneName)
        .setFields(Option.FIELDS.getString(options));
  }

  @Override
  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {
    // fields, page token, page size
    try {
      ManagedZonesListResponse zoneList = listZonesCall(options).execute();
      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());
    } catch (IOException ex) {
      throw translate(ex, true);
    }
  }

  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {
    return dns.managedZones()
        .list(this.options.getProjectId())
        .setFields(Option.FIELDS.getString(options))
        .setMaxResults(Option.PAGE_SIZE.getInt(options))
        .setDnsName(Option.DNS_NAME.getString(options))
        .setPageToken(Option.PAGE_TOKEN.getString(options));
  }

  @Override
  public boolean deleteZone(String zoneName) throws DnsException {
    try {
      deleteZoneCall(zoneName).execute();
      return true;
    } catch (IOException ex) {
      DnsException serviceException = translate(ex, false);
      if (serviceException.getCode() == HTTP_NOT_FOUND) {
        return false;
      }
      throw serviceException;
    }
  }

  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {
    return dns.managedZones().delete(this.options.getProjectId(), zoneName);
  }

  @Override
  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)
      throws DnsException {
    try {
      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();
      return ListResult.of(response.getNextPageToken(), response.getRrsets());
    } catch (IOException ex) {
      throw translate(ex, true);
    }
  }

  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    // options are fields, page token, dns name, type
    return dns.resourceRecordSets()
        .list(this.options.getProjectId(), zoneName)
        .setFields(Option.FIELDS.getString(options))
        .setPageToken(Option.PAGE_TOKEN.getString(options))
        .setMaxResults(Option.PAGE_SIZE.getInt(options))
        .setName(Option.NAME.getString(options))
        .setType(Option.DNS_TYPE.getString(options));
  }

  @Override
  public Project getProject(Map<Option, ?> options) throws DnsException {
    try {
      return getProjectCall(options).execute();
    } catch (IOException ex) {
      throw translate(ex, true);
    }
  }

  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {
    return dns.projects()
        .get(this.options.getProjectId())
        .setFields(Option.FIELDS.getString(options));
  }

  @Override
  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)
      throws DnsException {
    try {
      return applyChangeRequestCall(zoneName, changeRequest, options).execute();
    } catch (IOException ex) {
      throw translate(ex, false);
    }
  }

  private Dns.Changes.Create applyChangeRequestCall(
      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {
    return dns.changes()
        .create(this.options.getProjectId(), zoneName, changeRequest)
        .setFields(Option.FIELDS.getString(options));
  }

  @Override
  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)
      throws DnsException {
    try {
      return getChangeRequestCall(zoneName, changeRequestId, options).execute();
    } catch (IOException ex) {
      DnsException serviceException = translate(ex, true);
      if (serviceException.getCode() == HTTP_NOT_FOUND) {
        if ("entity.parameters.changeId".equals(serviceException.getLocation())
            || (serviceException.getMessage() != null
                && serviceException.getMessage().contains("parameters.changeId"))) {
          // the change id was not found, but the zone exists
          return null;
        }
        // the zone does not exist, so throw an exception
      }
      throw serviceException;
    }
  }

  private Dns.Changes.Get getChangeRequestCall(
      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {
    return dns.changes()
        .get(this.options.getProjectId(), zoneName, changeRequestId)
        .setFields(Option.FIELDS.getString(options));
  }

  @Override
  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)
      throws DnsException {
    try {
      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();
      return ListResult.of(response.getNextPageToken(), response.getChanges());
    } catch (IOException ex) {
      throw translate(ex, true);
    }
  }

  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    // options are fields, page token, page size, sort order
    Dns.Changes.List request =
        dns.changes()
            .list(this.options.getProjectId(), zoneName)
            .setFields(Option.FIELDS.getString(options))
            .setMaxResults(Option.PAGE_SIZE.getInt(options))
            .setPageToken(Option.PAGE_TOKEN.getString(options));
    if (Option.SORTING_ORDER.getString(options) != null) {
      // todo check and change if more sorting options are implemented, issue #604
      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));
    }
    return request;
  }

  @Override
  public RpcBatch createBatch() {
    return new DefaultRpcBatch(dns.batch());
  }
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
.get(this.options.getProjectId())
```
```java
.list(this.options.getProjectId(), zoneName)
```
```java
.get(this.options.getProjectId(), zoneName)
```
```java
.list(this.options.getProjectId())
```
```java
.list(this.options.getProjectId(), zoneName)
```
```java
.create(this.options.getProjectId(), zoneName, changeRequest)
```
```java
.create(this.options.getProjectId(), zone)
```
```java
.get(this.options.getProjectId(), zoneName, changeRequestId)
```
```java
return dns.managedZones().delete(this.options.getProjectId(), zoneName);
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Method com.google.api.services.dns.Dns$ResponsePolicies.get(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZoneOperations.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.get(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.get(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.get(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZoneOperations.get(java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.get(java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$DnsKeys.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.get(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Projects.get(java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Projects.get(java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.get(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.get(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$DnsKeys.get(java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.get(java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.list(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.list(java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.list(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$DnsKeys.list(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.list(java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.list(java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.list(java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.list(java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZoneOperations.list(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.list(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$DnsKeys.list(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZoneOperations.list(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.list(java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.list(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.list(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.list(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.create(java.lang.String,java.lang.String,java.lang.String,com.google.api.services.dns.model.Change) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.create(java.lang.String,com.google.api.services.dns.model.Policy) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Changes.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.Change) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.ManagedZone) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.create(java.lang.String,com.google.api.services.dns.model.ResponsePolicy) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.Policy) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.ResponsePolicy) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.create(java.lang.String,java.lang.String,java.lang.String,com.google.api.services.dns.model.ResourceRecordSet) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.create(java.lang.String,com.google.api.services.dns.model.ManagedZone) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.create(java.lang.String,java.lang.String,java.lang.String,com.google.api.services.dns.model.ResponsePolicyRule) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.ResourceRecordSet) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.create(java.lang.String,java.lang.String,com.google.api.services.dns.model.ResponsePolicyRule) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.delete(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.delete(java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicyRules.delete(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.delete(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.delete(java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResourceRecordSets.delete(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.delete(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ResponsePolicies.delete(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$ManagedZones.delete(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Method com.google.api.services.dns.Dns$Policies.delete(java.lang.String,java.lang.String,java.lang.String) has been added in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[308,9] method get in class com.google.api.services.dns.Dns.Projects cannot be applied to given types;
  required: java.lang.String,java.lang.String
  found: java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[289,9] method list in class com.google.api.services.dns.Dns.ResourceRecordSets cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String
  found: java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[232,9] method get in class com.google.api.services.dns.Dns.ManagedZones cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String
  found: java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[249,9] method list in class com.google.api.services.dns.Dns.ManagedZones cannot be applied to given types;
  required: java.lang.String,java.lang.String
  found: java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[372,13] method list in class com.google.api.services.dns.Dns.Changes cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String
  found: java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[325,9] method create in class com.google.api.services.dns.Dns.Changes cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String,com.google.api.services.dns.model.Change
  found: java.lang.String,java.lang.String,com.google.api.services.dns.model.Change
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[211,9] method create in class com.google.api.services.dns.Dns.ManagedZones cannot be applied to given types;
  required: java.lang.String,java.lang.String,com.google.api.services.dns.model.ManagedZone
  found: java.lang.String,com.google.api.services.dns.model.ManagedZone
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[352,9] method get in class com.google.api.services.dns.Dns.Changes cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String,java.lang.String
  found: java.lang.String,java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /google-cloud-java/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java:[271,30] method delete in class com.google.api.services.dns.Dns.ManagedZones cannot be applied to given types;
  required: java.lang.String,java.lang.String,java.lang.String
  found: java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length
</error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
