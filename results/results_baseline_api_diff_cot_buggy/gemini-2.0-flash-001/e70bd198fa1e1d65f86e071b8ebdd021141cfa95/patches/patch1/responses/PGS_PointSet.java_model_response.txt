<fix_planning>
The error is `cannot find symbol method query1NN(double[]) location: variable tree of type org.tinspin.index.kdtree.KDTree<processing.core.PVector>`. This indicates that the `query1NN` method has been removed from the `KDTree` class in the updated `org.tinspin.index` library.

The affected line is:
```java
if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
```

The `query1NN` method finds the nearest neighbor to a given point. Since it's no longer available, we need to find an alternative way to achieve the same functionality.  The `KDTree` class likely still supports range queries or other methods that can be used to find the nearest neighbor, albeit perhaps less efficiently.

A possible workaround is to use `queryRadius` with a small radius and check if any points are returned. If not, increase the radius until a point is found. However, this approach might be inefficient.

Another approach is to iterate through all the points in the KDTree and calculate the distance to each point, keeping track of the minimum distance found so far. This is also inefficient, but it avoids using any deprecated or removed methods.

A more efficient approach would be to use `queryOverlap` with a very small rectangle centered at the query point. If no points are found, the rectangle can be expanded until a point is found.

Since `query1NN` is no longer available, we can use `queryRectangle` to find the nearest neighbor. We start with a small rectangle around the query point and expand it until we find a point.

Here's the proposed fix:

```java
double radius = distanceTolerance;
Object[] result = new Object[1];
while (true) {
    double[] min = new double[] { coords[0] - radius, coords[1] - radius };
    double[] max = new double[] { coords[0] + radius, coords[1] + radius };
    int n = tree.queryOverlap(min, max, result, 1);
    if (n > 0) {
        PVector nearest = (PVector) result[0];
        double dist = Math.sqrt(Math.pow(nearest.x - coords[0], 2) + Math.pow(nearest.y - coords[1], 2));
        if (tree.size() == 0 || dist > distanceTolerance) {
            tree.insert(coords, p);
            newPoints.add(p);
        }
        break;
    } else {
        radius *= 2; // Exponentially increase the search radius
        if (radius > 1e10) {
            tree.insert(coords, p);
            newPoints.add(p);
            break; // Prevent infinite loop if no points are found
        }
    }
}
```

This fix adheres to all constraints:
1. It does not change the function signature.
2. It introduces new variables.
3. It does not remove any existing code unless it directly causes a compilation or functionality error.
4. It includes all code in the final output.

Final summary:
The `query1NN` method is no longer available in the updated `org.tinspin.index` library. The proposed fix replaces the call to `query1NN` with a `queryOverlap` method that iteratively increases the search radius until a nearest neighbor is found. This approach ensures that the functionality of the code remains the same while adhering to the constraints.
</fix_planning>

```java
package micycle.pgs;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.SplittableRandom;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javax.vecmath.Point3d;
import javax.vecmath.Point4d;

import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.Clusterer;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.Pair;

import org.jgrapht.alg.interfaces.SpanningTreeAlgorithm;
import org.jgrapht.alg.spanning.PrimMinimumSpanningTree;
import org.jgrapht.graph.SimpleGraph;
import org.tinfour.common.IIncrementalTin;
import org.tinspin.index.kdtree.KDTree;

import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
import it.unimi.dsi.util.XoRoShiRo128PlusRandomGenerator;
import micycle.pgs.commons.GeometricMedian;
import micycle.pgs.commons.PEdge;
import micycle.pgs.commons.PoissonDistributionJRUS;
import processing.core.PShape;
import processing.core.PVector;

/**
 * Generation of random sets of 2D points having a variety of different
 * distributions and constraints (and associated functions).
 * 
 * @author Michael Carleton
 * @since 1.2.0
 *
 */
public final class PGS_PointSet {

	private static final float SQRT_3 = (float) Math.sqrt(3);
	/** Golden angle (in radians) */
	private static final float GOLDEN_ANGLE = (float) (Math.PI * (3 - Math.sqrt(5)));

	private PGS_PointSet() {
	}

	/**
	 * Returns a filtered copy of the input, containing no points that are within
	 * the <code>distanceTolerance</code> of each other.
	 * <p>
	 * This method can be used to convert a random point set into a blue-noise-like
	 * (poisson) point set.
	 * 
	 * @param points            list of points to filter
	 * @param distanceTolerance a point that is within this distance of a previously
	 *                          included point is not included in the output
	 * @return
	 */
	public static List<PVector> prunePointsWithinDistance(List<PVector> points, double distanceTolerance) {
		final KDTree<PVector> tree = KDTree.create(2);
		final List<PVector> newPoints = new ArrayList<>();
		for (PVector p : points) {
			final double[] coords = new double[] { p.x, p.y };
			double radius = distanceTolerance;
			Object[] result = new Object[1];
			boolean found = false;
			while (true) {
				double[] min = new double[] { coords[0] - radius, coords[1] - radius };
				double[] max = new double[] { coords[0] + radius, coords[1] + radius };
				int n = tree.queryOverlap(min, max, result, 1);
				if (n > 0) {
					PVector nearest = (PVector) result[0];
					double dist = Math.sqrt(Math.pow(nearest.x - coords[0], 2) + Math.pow(nearest.y - coords[1], 2));
					if (tree.size() == 0 || dist > distanceTolerance) {
						tree.insert(coords, p);
						newPoints.add(p);
					}
					found = true;
					break;
				} else {
					radius *= 2; // Exponentially increase the search radius
					if (radius > 1e10) {
						tree.insert(coords, p);
						newPoints.add(p);
						found = true;
						break; // Prevent infinite loop if no points are found
					}
				}
			}
			if (!found && tree.size() == 0) {
				tree.insert(coords, p);
				newPoints.add(p);
			}
		}
		return newPoints;
	}

	/**
	 * Sorts a list of points according to the Hilbert space-filling curve to ensure
	 * a high-degree of spatial locality in the sequence of points.
	 * 
	 * @param points list of points to sort. a list requires at least 24 points to
	 *               be sorted.
	 * @return a sorted <b>copy</b> of the input list, having a different order
	 *         according to points' Hilbert ranking of their (x, y) coordinate
	 * @since 1.3.0
	 */
	public static List<PVector> hilbertSort(List<PVector> points) {
		double xMin, xMax, yMin, yMax;
		if (points.isEmpty()) {
			return points;
		}

		// find bounds
		PVector v = points.get(0);
		xMin = v.x;
		xMax = v.x;
		yMin = v.y;
		yMax = v.y;

		for (PVector PVector : points) {
			if (PVector.x < xMin) {
				xMin = PVector.x;
			} else if (PVector.x > xMax) {
				xMax = PVector.x;
			}
			if (PVector.y < yMin) {
				yMin = PVector.y;
			} else if (PVector.y > yMax) {
				yMax = PVector.y;
			}
		}

		double xDelta = xMax - xMin;
		double yDelta = yMax - yMin;
		if (xDelta == 0 || yDelta == 0) {
			return points;
		}
		if (points.size() < 24) {
			return points;
		}

		double hn = Math.log(points.size()) / 0.693147180559945 / 2.0;
		int nHilbert = (int) Math.floor(hn + 0.5);
		if (nHilbert < 4) {
			nHilbert = 4;
		}

		// could also use SortedMap<index -> point>
		List<Pair<Integer, PVector>> ranks = new ArrayList<>(points.size());
		double hScale = (1 << nHilbert) - 1.0;
		// scale coordinates to 2^n - 1
		for (PVector vh : points) {
			int ix = (int) (hScale * (vh.x - xMin) / xDelta);
			int iy = (int) (hScale * (vh.y - yMin) / yDelta);
			ranks.add(new Pair<>(xy2Hilbert(ix, iy, nHilbert), vh));
		}

		ranks.sort((a, b) -> Integer.compare(a.getFirst(), b.getFirst()));

		return ranks.stream().map(Pair::getSecond).collect(Collectors.toList());
	}

	/**
	 * Clusters points into N groups, using k-means clustering.
	 * <p>
	 * K-means finds the N cluster centers and assigns points to the nearest cluster
	 * center, such that the squared (euclidean) distances from the cluster are
	 * minimised.
	 * 
	 * @param points list of points to cluster
	 * @param groups desired number of clustered groups
	 * @since 1.4.0
	 * @see #cluster(Collection, int, long)
	 * @return list of groups, where each group is a list of PVectors
	 */
	public static List<List<PVector>> cluster(Collection<PVector> points, int groups) {
		return cluster(points, groups, System.nanoTime());
	}

	/**
	 * Clusters points into N groups, using k-means clustering.
	 * <p>
	 * K-means finds the N cluster centers and assigns points to the nearest cluster
	 * center, such that the squared (euclidean) distances from the cluster are
	 * minimised.
	 * 
	 * @param points list of points to cluster
	 * @param groups desired number of clustered groups
	 * @param seed   random seed
	 * @since 1.4.0
	 * @return list of groups, where each group is a list of PVectors
	 * @see #cluster(Collection, int)
	 */
	public static List<List<PVector>> cluster(Collection<PVector> points, int groups, long seed) {
		RandomGenerator r = new XoRoShiRo128PlusRandomGenerator(seed);
		Clusterer<CPVector> kmeans = new KMeansPlusPlusClusterer<>(groups, 25, new EuclideanDistance(), r);
		List<CPVector> pointz = points.stream().map(p -> new CPVector(p)).collect(Collectors.toList());

		List<List<PVector>> clusters = new ArrayList<>(groups);
		kmeans.cluster(pointz).forEach(cluster -> {
			clusters.add(cluster.getPoints().stream().map(p -> p.p).collect(Collectors.toList()));
		});

		return clusters;
	}

	/**
	 * Finds the geometric median point of a set of weighted sample points.
	 * <p>
	 * The median point is the point that minimises the sum of (weighted) distances
	 * to the sample points.
	 * <p>
	 * Points are expressed as PVectors; the z coordinate is used as the weight for
	 * each point. Weights must be positive. If every point has a weight of 0 (z=0),
	 * the function returns the median as if each point had an equal non-zero weight
	 * (set to 1).
	 * 
	 * @param points list of points, where the z coordinate is point weight
	 * @since 1.4.0
	 * @return 2D median point
	 */
	public static PVector weightedMedian(Collection<PVector> points) {
		boolean allZero = points.stream().allMatch(p -> p.z == 0);
		Point4d[] wp = points.stream().map(p -> new Point4d(p.x, p.y, 0, allZero ? 1 : p.z)).toArray(Point4d[]::new);
		Point3d median = GeometricMedian.median(wp, 1e-3, 50);
		return new PVector((float) median.x, (float) median.y);
	}

	/**
	 * Generates a set of random (uniform) points that lie within a bounding
	 * rectangle.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @param n    number of points to generate
	 * @return
	 * @see #random(double, double, double, double, int, long) seeded random()
	 */
	public static List<PVector> random(double xMin, double yMin, double xMax, double yMax, int n) {
		return random(xMin, yMin, xMax, yMax, n, System.nanoTime());
	}

	/**
	 * Generates a set of random (uniform) points that lie within a bounding
	 * rectangle, using the specified seed.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @param n    number of points to generate
	 * @param seed number used to initialize the underlying pseudorandom number
	 *             generator
	 * @return
	 * @see #random(double, double, double, double, int) non-seeded random()
	 */
	public static List<PVector> random(double xMin, double yMin, double xMax, double yMax, int n, long seed) {
		final SplittableRandom random = new SplittableRandom(seed);
		final List<PVector> points = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			final float x = (float) (xMin + (xMax - xMin) * random.nextDouble());
			final float y = (float) (yMin + (yMax - yMin) * random.nextDouble());
			points.add(new PVector(x, y));
		}
		return points;
	}

	/**
	 * Generates a set of random points having a gaussian/normal distribution. The
	 * point set is centered around the given center, given by mean coordinates.
	 * 
	 * @param centerX x coordinate of the center/mean of the point set
	 * @param centerY x coordinate of the center/mean of the point set
	 * @param sd      standard deviation, which specifies how much the values can
	 *                vary from the mean. 68% of point samples have a value within
	 *                one standard deviation of the mean; three standard deviations
	 *                account for 99.7% of the sample population
	 * @param n       number of points to generate
	 * @return
	 * @see #gaussian(double, double, double, int, long) seeded gaussian()
	 */
	public static List<PVector> gaussian(double centerX, double centerY, double sd, int n) {
		return gaussian(centerX, centerY, sd, n, System.nanoTime());
	}

	/**
	 * Generates a set of random points having a gaussian/normal distribution, using
	 * the specified seed. The point set is centered around the given center, given
	 * by mean coordinates.
	 * 
	 * @param centerX x coordinate of the center/mean of the point set
	 * @param centerY x coordinate of the center/mean of the point set
	 * @param sd      standard deviation, which specifies how much the values can
	 *                vary from the mean. 68% of point samples have a value within
	 *                one standard deviation of the mean; three standard deviations
	 *                account for 99.7% of the sample population
	 * @param n       number of points to generate
	 * @param seed    number used to initialize the underlying pseudorandom number
	 *                generator
	 * @return
	 * @see #gaussian(double, double, double, int) non-seeded gaussian()
	 */
	public static List<PVector> gaussian(double centerX, double centerY, double sd, int n, long seed) {
		final RandomGenerator random = new XoRoShiRo128PlusRandomGenerator(seed);
		final List<PVector> points = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			final float x = (float) (sd * random.nextGaussian() + centerX);
			final float y = (float) (sd * random.nextGaussian() + centerY);
			points.add(new PVector(x, y));
		}
		return points;
	}

	/**
	 * Generates a square grid/lattice of points that lie within a bounding
	 * rectangle.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @return
	 */
	public static List<PVector> squareGrid(final double xMin, final double yMin, final double xMax, final double yMax,
			final double pointDistance) {
		final double width = xMax - xMin;
		final double height = yMax - yMin;

		final List<PVector> points = new ArrayList<>();

		for (double x = 0; x < width; x += pointDistance) {
			for (double y = 0; y < height; y += pointDistance) {
				points.add(new PVector((float) (x + xMin), (float) (y + yMin)));
			}
		}
		return points;
	}

	/**
	 * Generates a hexagon grid/lattice of points that lie within a bounding
	 * rectangle.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @param n    number of points to generate
	 * @return
	 * @see #hexGrid(double, double, double, double, double) hexGrid() where
	 *      inter-point distance is specified
	 */
	public static List<PVector> hexGrid(final double xMin, final double yMin, final double xMax, final double yMax, final int n) {
		final double width = xMax - xMin;
		final double height = yMax - yMin;

		final float h = (float) Math.sqrt((width * height * (Math.sqrt(5) / 2)) / n);
		final float v = (float) (h * (2 / Math.sqrt(5)));
		final List<PVector> points = new ArrayList<>(n);

		for (int i = 0; i < width / h; i++) {
			for (int j = 0; j < height / v; j++) {
				points.add(new PVector((i - (j % 2) / 2f) * h + (float) xMin, j * v + (float) yMin));
			}
		}
		return points;
	}

	/**
	 * Generates a hexagon grid of points that lie within a bounding rectangle.
	 * 
	 * @param xMin          x-coordinate of boundary minimum
	 * @param yMin          y-coordinate of boundary minimum
	 * @param xMax          x-coordinate of boundary maximum
	 * @param yMax          y-coordinate of boundary maximum
	 * @param pointDistance inter-point distance
	 * @return
	 * @see #hexGrid(double, double, double, double, int) hexGrid() where number of
	 *      points is specified
	 */
	public static List<PVector> hexGrid(final double xMin, final double yMin, final double xMax, final double yMax,
			final double pointDistance) {
		final double width = xMax - xMin;
		final double height = yMax - yMin;

		final List<PVector> points = new ArrayList<>();

		for (int i = 0; i < width / pointDistance; i++) {
			for (int j = 0; j < height / pointDistance; j++) {
				points.add(new PVector((float) ((i - (j % 2) / 2f) * pointDistance + xMin), (float) (j * pointDistance + yMin)));
			}
		}
		return points;
	}

	/**
	 * Generates a hexagonal grid of points <b>arranged in a hexagon pattern</b>.
	 * 
	 * @param centerX x coordinate of the hexagon center point
	 * @param centerY y coordinate of the hexagon center point
	 * @param length  layers/no. of points on each hexagon side
	 * @distance inter-point distance
	 * @return
	 */
	public static List<PVector> hexagon(double centerX, double centerY, int length, double distance) {
		final float xOffset = (float) centerX;
		final float yOffset = (float) centerY;
		final float d = (float) distance;

		final List<PVector> points = new ArrayList<>();

		/*
		 * PVector .z is set to length so hexagon layer can be easily identified.
		 */
		for (int i = 0; i <= (length - 1); i++) {
			float y = (SQRT_3 * i * d) / 2.0f;
			for (int j = 0; j < (2 * length - 1 - i); j++) {
				float x = (-(2 * length - i - 2) * d) / 2.0f + j * d;
				points.add(new PVector(x + xOffset, y + yOffset, length));
				if (y != 0) {
					points.add(new PVector(x + xOffset, -y + yOffset, length));
				}
			}
		}
		return points;
	}

	/**
	 * Generates a set of n points that are randomly distributed on a ring
	 * (annulus).
	 * 
	 * @param centerX     x coordinate of the center/mean of the ring
	 * @param centerY     x coordinate of the center/mean of the ring
	 * @param innerRadius radius of the ring's hole
	 * @param outerRadius outer radius of the ring
	 * @param maxAngle    angle of the ring (in radians). Can be negative
	 * @param n           the number of random points to generate
	 * @return a list of PVector objects representing the (x, y) coordinates of the
	 *         random points
	 * @see #ring(double, double, double, double, double, int, long) seeded ring()
	 */
	public static List<PVector> ring(double centerX, double centerY, double innerRadius, double outerRadius, double maxAngle, int n) {
		return ring(centerX, centerY, innerRadius, outerRadius, maxAngle, n, System.nanoTime());
	}

	/**
	 * Generates a set of points that are randomly distributed on a ring (annulus).
	 * 
	 * @param centerX     x coordinate of the center/mean of the ring
	 * @param centerY     x coordinate of the center/mean of the ring
	 * @param innerRadius radius of the ring's hole
	 * @param outerRadius outer radius of the ring
	 * @param maxAngle    angle of the ring (in radians). Can be negative
	 * @param n           the number of random points to generate
	 * @param seed        number used to initialize the underlying pseudorandom
	 *                    number generator
	 * @return a list of PVector objects representing the (x, y) coordinates of the
	 *         random points
	 * @see #ring(double, double, double, double, double, int) non-seeded ring()
	 */
	public static List<PVector> ring(double centerX, double centerY, double innerRadius, double outerRadius, double maxAngle, int n,
			long seed) {
		final SplittableRandom random = new SplittableRandom(seed);
		final List<PVector> points = new ArrayList<>(n);
		if (maxAngle == 0) {
			maxAngle = Double.MIN_VALUE;
		}
		for (int i = 0; i < n; i++) {
			double randomAngle = (maxAngle < 0 ? -1 : 1) * random.nextDouble(Math.abs(maxAngle));
			double randomRadius = random.nextDouble(innerRadius, outerRadius);
			double x = -Math.sin(randomAngle) * randomRadius;
			double y = Math.cos(randomAngle) * randomRadius;

			points.add(new PVector((float) (x + centerX), (float) (y + centerY)));
		}
		return points;
	}

	/**
	 * Generates a set of random points (constrained within a rectangular region)
	 * via Poisson Disk Sampling.
	 * <p>
	 * Poisson-disc sampling produces points that are tightly-packed, but no closer
	 * to each other than a specified minimum distance, resulting in a more natural
	 * and desirable pattern for many applications. This distribution is also
	 * described as blue noise.
	 * 
	 * @param xMin    x-coordinate of boundary minimum
	 * @param yMin    y-coordinate of boundary minimum
	 * @param xMax    x-coordinate of boundary maximum
	 * @param yMax    y-coordinate of boundary maximum
	 * @param minDist minimum euclidean distance between any two points
	 * @return
	 * @see #poisson(double, double, double, double, double, long) seeded poisson()
	 */
	public static List<PVector> poisson(double xMin, double yMin, double xMax, double yMax, double minDist) {
		return poisson(xMin, yMin, xMax, yMax, minDist, System.nanoTime());
	}

	/**
	 * Generates a set of random points (constrained within a rectangular region)
	 * via Poisson Disk Sampling, using the specified seed.
	 * <p>
	 * Poisson-disc sampling produces points that are tightly-packed, but no closer
	 * to each other than a specified minimum distance, resulting in a more natural
	 * and desirable pattern for many applications. This distribution is also
	 * described as blue noise.
	 * 
	 * @param xMin    x-coordinate of boundary minimum
	 * @param yMin    y-coordinate of boundary minimum
	 * @param xMax    x-coordinate of boundary maximum
	 * @param yMax    y-coordinate of boundary maximum
	 * @param minDist minimum euclidean distance between any two points
	 * @param seed    number used to initialize the underlying pseudorandom number
	 *                generator
	 * @return
	 * @see #poisson(double, double, double, double, double) non-seeded poisson()
	 */
	public static List<PVector> poisson(double xMin, double yMin, double xMax, double yMax, double minDist, long seed) {
		final PoissonDistributionJRUS pd = new PoissonDistributionJRUS(seed);
		return pd.generate(xMin, yMin, xMax, yMax, minDist);
	}

	/**
	 * Generates a poisson point set having N points constrained within a
	 * rectangular region.
	 * <p>
	 * Poisson-disc sampling produces points that are tightly-packed, but no closer
	 * to each other than a specified minimum distance, resulting in a more natural
	 * and desirable pattern for many applications. This distribution is also
	 * described as blue noise.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @param n    target size of poisson point set
	 * @param seed number used to initialize the underlying pseudorandom number
	 *             generator
	 * @return
	 */
	public static List<PVector> poissonN(double xMin, double yMin, double xMax, double yMax, int n, long seed) {
		final PoissonDistributionJRUS pd = new PoissonDistributionJRUS(seed);
		return pd.generate(xMin, yMin, xMax, yMax, n);
	}

	/**
	 * Generates a set of points arranged in a phyllotaxis pattern (an arrangement
	 * similar to the florets in the head of a sunflower), using the golden ratio
	 * (the most irrational number) to position points with the least possible
	 * aliasing (which is arguably the "best" arrangement).
	 * 
	 * @param centerX x coordinate of the center of the point set
	 * @param centerY y coordinate of the center of the point set
	 * @param n       number of points to generate
	 * @param radius  radius of circular phyllotaxis extent (max distance of a point
	 *                from the center position)
	 * @return
	 */
	public static List<PVector> phyllotaxis(double centerX, double centerY, int n, double radius) {
		return phyllotaxis(centerX, centerY, n, radius, 2 * Math.PI - GOLDEN_ANGLE);
	}

	/**
	 * Generates a set of points arranged in a phyllotaxis pattern (an arrangement
	 * similar to the florets in the head of a sunflower), using a user-defined
	 * theta.
	 * 
	 * @param centerX x coordinate of the center of the point set
	 * @param centerY y coordinate of the center of the point set
	 * @param n       number of points to generate
	 * @param radius  radius of circular phyllotaxis extent (max distance of a point
	 *                from the center position)
	 * @param theta   angle (in radians) to turn after each point placement
	 * @return
	 */
	public static List<PVector> phyllotaxis(double centerX, double centerY, int n, double radius, double theta) {
		final double fillArea = radius * radius * Math.PI; // calculate area to be filled
		final double circleSpace = (fillArea / n); // area per circle
		final double fudge = 0.7; // Fudge factor: breathing space between circles
		final float circleRadius = (float) (Math.sqrt(circleSpace / Math.PI) * fudge);

		float cumArea = 0; // cumulative circle area

		final List<PVector> outList = new ArrayList<>();
		for (int i = 1; i <= n; ++i) {
			final double angle = i * theta; // rotation per circle
			cumArea += circleSpace; // add sm_area to cum_area every loop

			final double spiralR = Math.sqrt(cumArea / Math.PI); // expansion of spiral (distance of circle) per loop

			float pX = (float) (centerX + Math.cos(angle) * spiralR); // spiral rotation of golden angle per loop on X
			float pY = (float) (centerY + Math.sin(angle) * spiralR); // spiral rotation of golden angle per loop on Y

			outList.add(new PVector(pX, pY, circleRadius));
		}
		return outList;
	}

	/**
	 * Generates a set of deterministic stratified points (bounded by a rectangle)
	 * from a low discrepancy sequence (LDS) based on an irrational number (the
	 * plastic constant).
	 * <p>
	 * The <i>plastic LDS</i> has been <a href=
	 * "http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/">shown</a>
	 * to have superior low discrepancy properties amongst the quasirandom
	 * sequences, and is therefore recommended.
	 * <p>
	 * Low discrepancy sequences are deterministic (not randomized) number sequences
	 * that are low discrepancy - meaning the points tend not to clump together and
	 * leave holes; the resulting point set is more evenly spaced than a simple
	 * random distribution but less regular than lattices.
	 * 
	 * @param xMin x-coordinate of boundary minimum
	 * @param yMin y-coordinate of boundary minimum
	 * @param xMax x-coordinate of boundary maximum
	 * @param yMax y-coordinate of boundary maximum
	 * @param n    number of points to generate
	 * @return
	 */
	public static List<PVector> plasticLDS(double xMin, double yMin, double xMax, double yMax, int n) {
		// https://github.com/Atrix256/SampleZoo/blob/master
