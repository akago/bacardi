<fix_planning>
a. Relevant parts of the code and API changes:
- Code: `import org.hamcrest.Matchers;` and `Matchers.<URI>hasProperty("rawPath", path)` and `Matchers.<URI>hasProperty("rawQuery", query)`
- API Changes: `Class org.hamcrest.Matchers has been removed in the new version of the dependency.` and `Constructor org.hamcrest.Matchers() has been removed in the new version of the dependency.`

b. Specific API changes causing the issue:
The class `org.hamcrest.Matchers` has been removed. This means we can no longer use the static methods within that class, specifically `Matchers.hasProperty`.

c. Affected lines of code:
- `import org.hamcrest.Matchers;`
- `Matchers.<URI>hasProperty("rawPath", path)`
- `Matchers.<URI>hasProperty("rawQuery", query)`

d. Proposed potential fixes for each affected line:
- `import org.hamcrest.Matchers;`: Remove this import statement.
- `Matchers.<URI>hasProperty("rawPath", path)`: Replace `Matchers.hasProperty` with a suitable alternative. Since `org.hamcrest.Matchers` is removed, we need to find another way to create a matcher that checks for a property. `org.hamcrest.beans.HasPropertyWithValue.hasProperty` seems like a suitable replacement.
- `Matchers.<URI>hasProperty("rawQuery", query)`: Replace `Matchers.hasProperty` with a suitable alternative. Use `org.hamcrest.beans.HasPropertyWithValue.hasProperty`.

e. Potential side effects of the proposed changes:
- Using `org.hamcrest.beans.HasPropertyWithValue.hasProperty` might have slightly different behavior than the original `Matchers.hasProperty`, but it should be functionally equivalent in this context. We need to import `org.hamcrest.beans.HasPropertyWithValue` to use `hasProperty`.

f. Adherence to constraints:
1. Function signatures are not changed.
2. Variables can be created if needed.
3. `@Override` annotation is not present.
4. Missing imports are addressed.
5. No existing code is removed unless it causes an error.
6. All code is included in the final output.

g. Final summary of the chosen fix:
The best solution is to remove the import for `org.hamcrest.Matchers` and replace `Matchers.hasProperty` with `org.hamcrest.beans.HasPropertyWithValue.hasProperty`. This addresses the API change by using an alternative method to achieve the same functionality. This approach adheres to all constraints.
</fix_planning>

```java
/*
 * Copyright (c) 2011-2017, jcabi.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met: 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the following
 * disclaimer. 2) Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution. 3) Neither the name of the jcabi.com nor
 * the names of its contributors may be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.jcabi.http.mock;

import java.net.URI;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasPropertyWithValue;

/**
 * Convenient set of matchers for {@link MkQuery}.
 *
 * @since 1.5
 */
@SuppressWarnings("PMD.ProhibitPublicStaticMethods")
public final class MkQueryMatchers {

    /**
     * Private ctor.
     */
    private MkQueryMatchers() {
        // Utility class - cannot instantiate
    }

    /**
     * Matches the value of the MkQuery's body against the given matcher.
     *
     * @param matcher The matcher to use.
     * @return Matcher for checking the body of MkQuery
     */
    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {
        return new MkQueryBodyMatcher(matcher);
    }

    /**
     * Matches the content of the MkQuery's header against the given matcher.
     * Note that for a valid match to occur, the header entry must exist
     * <i>and</i> its value(s) must match the given matcher.
     *
     * @param header The header to check.
     * @param matcher The matcher to use.
     * @return Matcher for checking the body of MkQuery
     */
    public static Matcher<MkQuery> hasHeader(
        final String header,
        final Matcher<Iterable<? extends String>> matcher
    ) {
        return new MkQueryHeaderMatcher(header, matcher);
    }

    /**
     * Matches the path of the MkQuery.
     *
     * @param path The path to check.
     * @return Matcher for checking the path of MkQuery
     */
    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {
        return new MkQueryUriMatcher(
            HasPropertyWithValue.<URI>hasProperty("rawPath", path)
        );
    }

    /**
     * Matches the query of the MkQuery.
     *
     * @param query The query to check.
     * @return Matcher for checking the query of MkQuery
     */
    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {
        return new MkQueryUriMatcher(
            HasPropertyWithValue.<URI>hasProperty("rawQuery", query)
        );
    }

}
```
