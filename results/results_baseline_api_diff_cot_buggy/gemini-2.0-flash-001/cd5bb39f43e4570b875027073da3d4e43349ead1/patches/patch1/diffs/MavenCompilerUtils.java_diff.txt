20a21,23
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
22a26,30
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
> import org.xml.sax.InputSource;
> 
> import java.io.StringReader;
71,72c79,85
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
<                     .flatMap(aggregate -> stream(aggregate.getChildren("path")))
---
>             try {
>                 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
>                 DocumentBuilder builder = factory.newDocumentBuilder();
>                 org.w3c.dom.Document doc = builder.parse(new InputSource(new StringReader(((Xpp3Dom) config).toString())));
> 
>                 return stream(getChildren(doc.getDocumentElement(), "annotationProcessorPaths"))
>                         .flatMap(aggregate -> stream(getChildren(aggregate, "path")))
83a97,99
>             } catch (Exception e) {
>                 throw new RuntimeException(e);
>             }
91a108,116
>     private static Element[] getChildren(Element parent, String name) {
>         NodeList nodeList = parent.getElementsByTagName(name);
>         Element[] elements = new Element[nodeList.getLength()];
>         for (int i = 0; i < nodeList.getLength(); i++) {
>             elements[i] = (Element) nodeList.item(i);
>         }
>         return elements;
>     }
> 
99,101c124,129
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
<         return child == null ? "" : child.getValue();
---
>     private static String extractChildValue(Element node, String name) {
>         NodeList nodeList = node.getElementsByTagName(name);
>         if (nodeList.getLength() > 0) {
>             return nodeList.item(0).getTextContent();
>         }
>         return "";
