17,20d16
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelBuf;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.network.RawDataListener;
26c22,28
< public class CheckPermissionListener implements RawDataListener {
---
> import org.spongepowered.api.network.channel.raw.play.RawPlayDataChannel;
> import org.spongepowered.api.event.channel.ChannelEventListener;
> import org.spongepowered.api.event.channel.ConnectionEvent;
> import org.spongepowered.api.network.channel.PacketContext;
> import org.spongepowered.api.network.channel.ChannelBuf;
> 
> public class CheckPermissionListener implements ChannelEventListener.Raw {
29c31
<     private final RawDataChannel permissionsResultChannel;
---
>     private final RawPlayDataChannel permissionsResultChannel;
32c34
<     CheckPermissionListener(ChangeSkinSponge plugin, ChannelRegistrar channelRegistrar) {
---
>     CheckPermissionListener(ChangeSkinSponge plugin, RawPlayDataChannel permissionsResultChannel) {
34,36c36
< 
<         String combinedName = new NamespaceKey(ARTIFACT_ID, PERMISSION_RESULT_CHANNEL).getCombinedName();
<         permissionsResultChannel = channelRegistrar.getOrCreateRaw(plugin, combinedName);
---
>         this.permissionsResultChannel = permissionsResultChannel;
39,42c39,40
<     @Override
<     public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
< 
<         ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
---
>     public void handle(ConnectionEvent.Receive event, PacketContext context) {
>         ByteArrayDataInput dataInput = ByteStreams.newDataInput(event.data().array());
49c47
<         checkPermissions((Player) connection, message);
---
>         checkPermissions((Player) event.connection(), message);
83c81
<         permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
---
>         permissionsResultChannel.sendTo((org.spongepowered.api.entity.living.player.server.ServerPlayer) receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
