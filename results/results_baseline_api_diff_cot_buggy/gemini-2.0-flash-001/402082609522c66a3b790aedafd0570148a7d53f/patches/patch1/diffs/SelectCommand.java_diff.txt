7a8
> import org.spongepowered.api.command.Command;
9,12c10,11
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
16,17c15,16
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import net.kyori.adventure.text.TextComponent;
> import net.kyori.adventure.text.Component;
19c18
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements org.spongepowered.api.command.CommandExecutor, ChangeSkinCommand {
29c28,29
<     public CommandResult execute(CommandSource src, CommandContext args) {
---
>     public CommandResult execute(CommandContext context) {
>         org.spongepowered.api.command.CommandSource src = context.getCause().root();
35c35
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = context.one(Parameter.string()).orElse("").toLowerCase().replace("skin-", "");
40c40
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             Task.builder().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
49,50c49,50
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         return Command.builder()
52c52
<                 .arguments(string(of("skinName")))
---
>                 .addParameter(Parameter.string().key("skinName").build())
