7a8
> import org.spongepowered.api.command.Command;
9,12c10,11
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
16,19c15
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements org.spongepowered.api.command.CommandExecutor, ChangeSkinCommand {
29c25
<     public CommandResult execute(CommandSource src, CommandContext args) {
---
>     public CommandResult execute(org.spongepowered.api.command.CommandSource src, CommandContext args) {
32c28
<             return CommandResult.empty();
---
>             return CommandResult.success();
35c31
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = args.one(Parameter.key("skinName", String.class)).orElse("").toLowerCase().replace("skin-", "");
40c36
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             Task.builder().plugin(plugin).async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
49,50c45,48
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         Parameter.Value<String> skinNameParam = Parameter.string().key("skinName").build();
> 
>         return Command.builder()
52c50
<                 .arguments(string(of("skinName")))
---
>                 .addParameter(skinNameParam)
