11a12
> import org.spongepowered.api.command.Command;
13,17c14,16
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.args.GenericArguments;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
> import org.spongepowered.api.command.CommandCause;
21,23c20,22
< import static org.spongepowered.api.command.args.GenericArguments.flags;
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import net.kyori.adventure.text.Text;
> 
> import static org.spongepowered.api.command.Command.Flags.builder;
37,39c36,38
<     public CommandResult execute(CommandSource src, CommandContext args) {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
---
>     public CommandResult execute(CommandCause cause, CommandContext args) {
>         if (!(cause.root() instanceof Player)) {
>             plugin.sendMessage(cause, "no-console");
43c42
<         UUID uniqueId = ((Player) src).getUniqueId();
---
>         UUID uniqueId = ((Player) cause.root()).getUniqueId();
45c44
<             plugin.sendMessage(src, "cooldown");
---
>             plugin.sendMessage(cause, "cooldown");
49c48
<         Player receiver = (Player) src;
---
>         Player receiver = (Player) cause.root();
60c59
<             if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(src, targetUUID, true)) {
---
>             if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(cause, targetUUID, true)) {
64,65c63,64
<             plugin.sendMessage(src, "skin-change-queue");
<             Runnable skinDownloader = new SkinDownloader(plugin, src, receiver, targetUUID, keepSkin);
---
>             plugin.sendMessage(cause, "skin-change-queue");
>             Runnable skinDownloader = new SkinDownloader(plugin, cause, receiver, targetUUID, keepSkin);
70c69
<         Runnable nameResolver = new NameResolver(plugin, src, targetSkin, receiver, keepSkin);
---
>         Runnable nameResolver = new NameResolver(plugin, cause, targetSkin, receiver, keepSkin);
76,77c75,79
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command.Builder buildSpec() {
>         Parameter.Key<String> skinKey = Parameter.key("skin", String.class);
>         Parameter skinParameter = Parameter.string().key(skinKey).build();
> 
>         return Command.builder()
79,83c81,83
<                 .arguments(
<                         string(of("skin")),
<                         flags().flag("keep").buildWith(GenericArguments.none()))
<                 .permission(PomData.ARTIFACT_ID + ".command.setskin.base")
<                 .build();
---
>                 .addParameter(skinParameter)
>                 .addFlag(builder().setAliases("keep").build())
>                 .permission(PomData.ARTIFACT_ID + ".command.setskin.base");
