11a12
> import org.spongepowered.api.command.Command;
13,17c14,15
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.args.GenericArguments;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
21,22c19,25
< import static org.spongepowered.api.command.args.GenericArguments.flags;
< import static org.spongepowered.api.command.args.GenericArguments.string;
---
> import com.google.common.collect.ImmutableList;
> import org.spongepowered.api.command.CommandCause;
> import org.spongepowered.api.command.exception.CommandException;
> import org.spongepowered.api.command.CommandExecutor;
> 
> import static org.spongepowered.api.command.parameter.CommonParameters.FLAGS;
> import static org.spongepowered.api.command.parameter.CommonParameters.STRING;
37,39c40,43
<     public CommandResult execute(CommandSource src, CommandContext args) {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
---
>     public CommandResult execute(CommandContext args) throws CommandException {
>         CommandCause cause = args.cause();
>         if (!(cause instanceof Player)) {
>             plugin.sendMessage(cause, "no-console");
43c47
<         UUID uniqueId = ((Player) src).getUniqueId();
---
>         UUID uniqueId = ((Player) cause).getUniqueId();
45c49
<             plugin.sendMessage(src, "cooldown");
---
>             plugin.sendMessage(cause, "cooldown");
49,50c53,54
<         Player receiver = (Player) src;
<         String targetSkin = args.<String>getOne("skin").get();
---
>         Player receiver = (Player) cause;
>         String targetSkin = args.<String>one(Parameter.key("skin", String.class).build()).get();
60c64
<             if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(src, targetUUID, true)) {
---
>             if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(cause, targetUUID, true)) {
64,65c68,69
<             plugin.sendMessage(src, "skin-change-queue");
<             Runnable skinDownloader = new SkinDownloader(plugin, src, receiver, targetUUID, keepSkin);
---
>             plugin.sendMessage(cause, "skin-change-queue");
>             Runnable skinDownloader = new SkinDownloader(plugin, cause, receiver, targetUUID, keepSkin);
70c74
<         Runnable nameResolver = new NameResolver(plugin, src, targetSkin, receiver, keepSkin);
---
>         Runnable nameResolver = new NameResolver(plugin, cause, targetSkin, receiver, keepSkin);
76,82c80,81
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
<                 .executor(this)
<                 .arguments(
<                         string(of("skin")),
<                         flags().flag("keep").buildWith(GenericArguments.none()))
<                 .permission(PomData.ARTIFACT_ID + ".command.setskin.base")
---
>     public Command.Builder buildSpec() {
>         Parameter skinParam = Parameter.key("skin", String.class)
83a83,88
> 
>         return Command.builder()
>                 .executor(this)
>                 .addParameter(skinParam)
>                 .addParameter(FLAGS.flag("keep"))
>                 .permission(PomData.ARTIFACT_ID + ".command.setskin.base");
