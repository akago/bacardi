15a16,17
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
19a22
> import org.apache.maven.model.PluginExecution;
27c30,32
< import org.codehaus.plexus.util.xml.Xpp3Dom;
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
162,165c167,200
<         .map(exec -> (Xpp3Dom) exec.getConfiguration())
<         .map(config -> config.getChild("processors"))
<         .map(Xpp3Dom::getChildren)
<         .map(arr -> Arrays.stream(arr).map(Xpp3Dom::getValue).collect(Collectors.toSet()))
---
>         .map(PluginExecution::getConfiguration)
>         .map(config -> {
>           if (config instanceof org.w3c.dom.Element) {
>             return (org.w3c.dom.Element) config;
>           } else {
>             try {
>               DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
>               DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
>               org.w3c.dom.Document doc = dBuilder.newDocument();
>               Element rootElement = doc.createElement("configuration");
>               doc.appendChild(rootElement);
>               return rootElement;
>             } catch (Exception e) {
>               logger.error("Error creating document builder: " + e.getMessage());
>               return null;
>             }
>           }
>         })
>         .map(config -> config.getElementsByTagName("processors").item(0))
>         .map(processorsNode -> {
>           if (processorsNode != null && processorsNode.hasChildNodes()) {
>             NodeList processorNodes = processorsNode.getChildNodes();
>             Set<String> processors = new HashSet<>();
>             for (int i = 0; i < processorNodes.getLength(); i++) {
>               Node processorNode = processorNodes.item(i);
>               if (processorNode.getNodeType() == Node.ELEMENT_NODE && "processor".equals(processorNode.getNodeName())) {
>                 processors.add(processorNode.getTextContent());
>               }
>             }
>             return processors;
>           } else {
>             return of();
>           }
>         })
