16,17d15
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector;
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy;
29,32c27,30
<     static ClassLoadingStrategy<ClassLoader> classLoadingStrategy(Class<?> assertClass) {
<         if (ClassInjector.UsingReflection.isAvailable()) {
<             return ClassLoadingStrategy.Default.INJECTION;
<         } else if (ClassInjector.UsingLookup.isAvailable() && PRIVATE_LOOKUP_IN != null) {
---
>     static Object classLoadingStrategy(Class<?> assertClass) {
>         if (isReflectionAvailable()) {
>             return new ReflectionClassLoading();
>         } else if (isLookupAvailable() && PRIVATE_LOOKUP_IN != null) {
34c32
<                 return ClassLoadingStrategy.UsingLookup.of(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP));
---
>                 return new LookupClassLoading(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP));
42a41,70
>     private static boolean isReflectionAvailable() {
>         try {
>             Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection");
>             Method isAvailableMethod = Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection").getMethod("isAvailable");
>             return (boolean) isAvailableMethod.invoke(null);
>         } catch (Exception e) {
>             return false;
>         }
>     }
> 
>     private static boolean isLookupAvailable() {
>         try {
>             Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup");
>             Method isAvailableMethod = Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup").getMethod("isAvailable");
>             return (boolean) isAvailableMethod.invoke(null);
>         } catch (Exception e) {
>             return false;
>         }
>     }
> 
>     private static class ReflectionClassLoading {
>     }
> 
>     private static class LookupClassLoading {
>         private final Object lookup;
> 
>         public LookupClassLoading(Object lookup) {
>             this.lookup = lookup;
>         }
>     }
