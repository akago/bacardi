<fix_planning>
a. Relevant parts of the code and API changes:
- Code:
```java
@RunWith(MockitoJUnitRunner.class)
import org.mockito.runners.MockitoJUnitRunner;
```
- API Changes:
  - `Class org.mockito.runners.MockitoJUnitRunner` has been removed.

b. Specific API changes causing the issue:
The `MockitoJUnitRunner` class has been removed from the `org.mockito.runners` package.

c. Affected lines of code:
- `@RunWith(MockitoJUnitRunner.class)`
- `import org.mockito.runners.MockitoJUnitRunner;`

d. Proposed potential fixes:
The `MockitoJUnitRunner` has been moved to `org.mockito.junit.MockitoJUnitRunner`.
- Replace `import org.mockito.runners.MockitoJUnitRunner;` with `import org.mockito.junit.MockitoJUnitRunner;`
- Replace `@RunWith(MockitoJUnitRunner.class)` with `@RunWith(org.mockito.junit.MockitoJUnitRunner.class)` or `@ExtendWith(MockitoExtension.class)`

e. Potential side effects of the proposed changes:
- Using `@ExtendWith(MockitoExtension.class)` might require changes in how mocks are initialized, but in this case, the `@Mock` annotation should handle it.

f. Adherence to constraints:
- The function signatures of all methods remain unchanged.
- Variables are not created.
- The `@Override` annotation is not used.
- The correct package is used for the import.
- No existing code is removed unless it directly causes a compilation error.
- All code is included in the final output.

g. Final summary of the chosen fix:
The best solution is to replace the deprecated `MockitoJUnitRunner` with `MockitoExtension`. This involves replacing the import statement and the `@RunWith` annotation with `@ExtendWith`. This approach aligns with the updated Mockito API and ensures that the tests are executed correctly with the new version of the dependency.
</fix_planning>

```java
package com.pholser.junit.quickcheck.internal.generator;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;

import com.pholser.junit.quickcheck.generator.GenerationStatus;
import com.pholser.junit.quickcheck.generator.Generator;
import com.pholser.junit.quickcheck.internal.ParameterTypeContext;
import com.pholser.junit.quickcheck.internal.generator.conventiontestclasses.Convention;
import com.pholser.junit.quickcheck.internal.generator.conventiontestclasses.GeneratesOtherTypes;
import com.pholser.junit.quickcheck.internal.generator.conventiontestclasses.NotAGenerator;
import com.pholser.junit.quickcheck.random.SourceOfRandomness;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class RegisterGeneratorsByConventionTest {
    private GeneratorRepository repo;
    @Mock private SourceOfRandomness random;
    @Mock private GenerationStatus generationStatus;

    @Before
    public void setupRepository() {
        repo = new GeneratorRepository(random);
    }

    @Test
    public void canGenerateValues() {
        Generator<?> generator =
            repo.generatorFor(ParameterTypeContext.forClass(Convention.class));

        assertNotNull(generator);
        assertThat(
            generator.generate(random, generationStatus),
            instanceOf(Convention.class));
    }

    @Test
    public void classNameFollowsConventionButNotAGenerator() {
        assertThatNoGeneratorCanBeFound(NotAGenerator.class);
    }

    @Test
    public void noValueTypeMatch() {
        assertThatNoGeneratorCanBeFound(GeneratesOtherTypes.class);
    }

    @Test
    public void notAClassFollowingNamingConvention() {
        assertThatNoGeneratorCanBeFound(this.getClass());
    }

    private void assertThatNoGeneratorCanBeFound(Class<?> valueClass) {
        IllegalArgumentException ex =
            assertThrows(
                IllegalArgumentException.class,
                () -> repo.generatorFor(
                    ParameterTypeContext.forClass(valueClass)));

        assertThat(
            ex.getMessage(),
            containsString(
                "Cannot find generator for " + valueClass.getName()));
    }
}
```
