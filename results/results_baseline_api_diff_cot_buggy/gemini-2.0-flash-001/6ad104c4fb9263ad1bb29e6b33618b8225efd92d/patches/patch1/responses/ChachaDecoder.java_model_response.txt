<fix_planning>
a. Code and API changes:
The code uses `org.bouncycastle.crypto.tls.TlsFatalAlert` and `org.bouncycastle.crypto.tls.AlertDescription`. Both classes have been removed in the new version of the dependency.

b. Specific API changes causing the issue:
The removal of `org.bouncycastle.crypto.tls.TlsFatalAlert` and `org.bouncycastle.crypto.tls.AlertDescription` causes compilation errors.

c. Affected lines of code:
- `import org.bouncycastle.crypto.tls.TlsFatalAlert;`
- `import org.bouncycastle.crypto.tls.AlertDescription;`
- `throw new TlsFatalAlert(AlertDescription.bad_record_mac);` (occurs three times)

d. Proposed fixes:
Since `org.bouncycastle.crypto.tls.TlsFatalAlert` and `org.bouncycastle.crypto.tls.AlertDescription` are removed, we need to find a replacement.  A general `IOException` can be thrown instead of `TlsFatalAlert`. The `AlertDescription.bad_record_mac` is no longer available, so we can replace it with a descriptive message string.

e. Potential side effects:
Replacing `TlsFatalAlert` with `IOException` might change the exception handling behavior in the calling code. However, since the original code throws a fatal alert, it's reasonable to assume that the calling code treats it as an unrecoverable error, so throwing a general `IOException` should be acceptable.

f. Adherence to constraints:
- We are not changing any function signatures.
- We are creating a variable to hold the error message.
- We are removing the imports that are no longer valid.
- We are not removing any existing code unless it directly causes a compilation error.
- We are including all code in the final output.

g. Final summary:
The best solution is to replace `TlsFatalAlert` with `IOException` and replace `AlertDescription.bad_record_mac` with a descriptive string. This addresses the compilation errors caused by the API changes while minimizing the impact on the existing code's functionality.
</fix_planning>

```java
package io.github.hapjava.server.impl.crypto;

import java.io.IOException;
import org.bouncycastle.crypto.engines.ChaChaEngine;
import org.bouncycastle.crypto.generators.Poly1305KeyGenerator;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.util.Arrays;

public class ChachaDecoder {

  private final ChaChaEngine decryptCipher;

  public ChachaDecoder(byte[] key, byte[] nonce) throws IOException {

    this.decryptCipher = new ChaChaEngine(20);

    this.decryptCipher.init(false, new ParametersWithIV(new KeyParameter(key), nonce));
  }

  public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext)
      throws IOException {

    KeyParameter macKey = initRecordMAC(decryptCipher);

    byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);

    if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
      String errorMessage = "Bad record MAC";
      throw new IOException(errorMessage);
    }

    byte[] output = new byte[ciphertext.length];
    decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);

    return output;
  }

  public byte[] decodeCiphertext(byte[] receivedMAC, byte[] ciphertext) throws IOException {
    return decodeCiphertext(receivedMAC, null, ciphertext);
  }

  private KeyParameter initRecordMAC(ChaChaEngine cipher) {
    byte[] firstBlock = new byte[64];
    cipher.processBytes(firstBlock, 0, firstBlock.length, firstBlock, 0);

    // NOTE: The BC implementation puts 'r' after 'k'
    System.arraycopy(firstBlock, 0, firstBlock, 32, 16);
    KeyParameter macKey = new KeyParameter(firstBlock, 16, 32);
    Poly1305KeyGenerator.clamp(macKey.getKey());
    return macKey;
  }
}
```
