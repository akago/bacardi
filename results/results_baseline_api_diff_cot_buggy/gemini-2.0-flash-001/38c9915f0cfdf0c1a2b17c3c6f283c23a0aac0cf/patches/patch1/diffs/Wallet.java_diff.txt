10c10
<  * copies of the Software, and to permit persons to whom the Software is
---
>  * copies, and to permit persons to whom the Software is
18c18
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
---
>  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
20c20
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
---
>  * LIABILITY, WHETHER IN AN ACTION, TORT OR OTHERWISE, ARISING FROM,
30c30,34
< import org.cactoos.collection.Filtered;
---
> import org.cactoos.Func;
> import org.cactoos.Scalar;
> import org.cactoos.Text;
> import org.cactoos.collection.CollectionOf;
> import org.cactoos.iterable.Filtered;
36c40
< import org.cactoos.scalar.CheckedScalar;
---
> import org.cactoos.scalar.Checked;
38d41
< import org.cactoos.scalar.UncheckedScalar;
40d42
< import org.cactoos.text.SplitText;
42a45
> import org.cactoos.text.Split;
201,202c204,205
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return new Checked<>(
>                 (Scalar<Long>) () -> Long.parseUnsignedLong(
204c207
<                         new SplitText(
---
>                         new Split(
212c215
<                 e -> new IOException(e)
---
>                 (Func<Exception, IOException>) e -> new IOException(e)
247a251
>                 other.ledger(),
249c253,256
<                     origin -> new UncheckedScalar<>(
---
>                     ledger,
>                     origin -> {
>                         try {
>                             return new org.cactoos.scalar.Unchecked<>(
258,261c265,270
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
---
>                             ).value();
>                         } catch (final Exception ex) {
>                             throw new IllegalStateException(ex);
>                         }
>                     }
>                 ).isEmpty()
274,275c283,285
<                     new ListOf<>(
<                         new SplitText(
---
>                     5,
>                     new CollectionOf<>(
>                         new Split(
279,281c289
<                     ),
<                     // @checkstyle MagicNumberCheck (1 line)
<                     5
---
>                     )
