28a29
> import java.nio.file.Files;
30c31,32
< import org.cactoos.collection.Filtered;
---
> import java.util.Arrays;
> import org.cactoos.iterable.Filtered;
36d37
< import org.cactoos.scalar.CheckedScalar;
38d38
< import org.cactoos.scalar.UncheckedScalar;
40d39
< import org.cactoos.text.SplitText;
201,208c200,202
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
---
>             try {
>                 return Long.parseUnsignedLong(
>                     Files.readAllLines(this.path).get(2),
211,213c205,208
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>                 );
>             } catch (final Exception e) {
>                 throw new IOException(e);
>             }
248,258c243,256
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
---
>                 incoming -> {
>                     return new Filtered<>(
>                         origin -> {
>                             try {
>                                 return incoming.equals(origin)
>                                     || (incoming.id() == origin.id()
>                                         && incoming.bnf().equals(origin.bnf()))
>                                     || (incoming.id() == origin.id()
>                                         && incoming.amount() < 0L)
>                                     || incoming.prefix().equals(origin.prefix());
>                             } catch (final Exception ex) {
>                                 throw new IllegalStateException(ex);
>                             }
>                         },
260c258,259
<                 ).isEmpty(),
---
>                     ).isEmpty();
>                 },
275,277c274,275
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
---
>                         Arrays.asList(
>                             new TextOf(this.path).asString().split("\\n")
