30c30,31
< import org.cactoos.collection.Filtered;
---
> import java.util.Iterator;
> import java.util.NoSuchElementException;
36d36
< import org.cactoos.scalar.CheckedScalar;
38d37
< import org.cactoos.scalar.UncheckedScalar;
40d38
< import org.cactoos.text.SplitText;
42a41
> import org.cactoos.text.Text;
201,202c200,201
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             try {
>                 return Long.parseUnsignedLong(
204,207c203
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
---
>                         new TextOf(this.path).split("\n")
211,213c207,210
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>                 );
>             } catch (final Exception e) {
>                 throw new IOException(e);
>             }
247,261c244,266
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
---
>             final Iterable<Transaction> otherLedger = other.ledger();
> 
>             final Iterable<Transaction> candidates = new org.cactoos.iterable.Filtered<>(
>                 incoming -> {
>                     final Iterator<Transaction> iterator = ledger.iterator();
>                     while (iterator.hasNext()) {
>                         final Transaction origin = iterator.next();
>                         try {
>                             if (incoming.equals(origin)
>                                 || (incoming.id() == origin.id()
>                                 && incoming.bnf().equals(origin.bnf()))
>                                 || (incoming.id() == origin.id()
>                                 && incoming.amount() < 0L)
>                                 || incoming.prefix().equals(origin.prefix())) {
>                                 return false;
>                             }
>                         } catch (IOException ex) {
>                             throw new RuntimeException(ex);
>                         }
>                     }
>                     return true;
>                 },
>                 otherLedger
262a268
> 
272c278,284
<                 txt -> new RtTransaction(txt.asString()),
---
>                 txt -> {
>                     try {
>                         return new RtTransaction(txt.asString());
>                     } catch (IOException e) {
>                         throw new RuntimeException(e);
>                     }
>                 },
275,278c287
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).split("\\n")
