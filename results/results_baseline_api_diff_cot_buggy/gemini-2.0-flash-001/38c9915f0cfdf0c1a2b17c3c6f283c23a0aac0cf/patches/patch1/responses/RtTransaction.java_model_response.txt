<fix_planning>
a. Relevant code and API changes:

*   `org.cactoos.scalar.UncheckedScalar` has been removed.
*   `org.cactoos.text.TrimmedText` has been removed.
*   `org.cactoos.scalar.StickyScalar` has been removed.
*   `org.cactoos.scalar.IoCheckedScalar` has been removed.
*   `org.cactoos.text.SplitText` has been removed.
*   `org.cactoos.iterable.LengthOf` has been removed.
*   `org.cactoos.scalar.LengthOf` has been added.

b. Specific API changes causing the issue:

The core issue is the removal of `UncheckedScalar`, `TrimmedText`, `StickyScalar`, `IoCheckedScalar`, `SplitText`, and `LengthOf` from `org.cactoos`. We need to find suitable replacements or refactor the code to avoid using these classes. The new `org.cactoos.scalar.LengthOf` can replace the old `org.cactoos.iterable.LengthOf`.

c. Affected lines of code:

*   Line 33: `new LengthOf(pieces).intValue()`
*   Line 35: `private final IoCheckedScalar<String> transaction;`
*   Line 37: `new StickyScalar<>(`
*   Line 40: `new SplitText(trnsct, ";")`
*   Line 42: `new TrimmedText(new TextOf(trnsct)).asString().isEmpty()`
*   Line 88: `new IoCheckedScalar<>(`
*   Line 90: `new ItemAt<>(0, new SplitText(this.transaction.value(), ";"))`
*   Line 108: `new IoCheckedScalar<>(`
*   Line 110: `new ItemAt<>(1, new SplitText(this.transaction.value(), ";"))`
*   Line 124: `new IoCheckedScalar<>(`
*   Line 126: `new ItemAt<>(2, new SplitText(this.transaction.value(), ";"))`
*   Line 142: `new IoCheckedScalar<>(`
*   Line 144: `new ItemAt<>(3, new SplitText(this.transaction.value(), ";"))`
*   Line 159: `new IoCheckedScalar<>(`
*   Line 161: `new ItemAt<>(4, new SplitText(this.transaction.value(), ";"))`
*   Line 176: `new IoCheckedScalar<>(`
*   Line 178: `new ItemAt<>(5, new SplitText(this.transaction.value(), ";"))`
*   Line 193: `new IoCheckedScalar<>(`
*   Line 195: `new ItemAt<>(6, new SplitText(this.transaction.value(), ";"))`
*   Line 211: `new UncheckedScalar<>(this.transaction).value()`

d. Proposed fixes:

*   Line 33: Replace `new LengthOf(pieces).intValue()` with `new org.cactoos.scalar.LengthOf(pieces).value().intValue()`.
*   Line 35: Replace `private final IoCheckedScalar<String> transaction;` with `private final String transaction;`.  We will need to handle the exception within the constructor and store the string directly.
*   Lines 37, 88, 108, 124, 142, 159, 176, 193: Remove `new IoCheckedScalar<>(new StickyScalar<>(() -> ...))` and just assign the result of the lambda to the `transaction` field after handling the potential `IOException`.
*   Line 40: Replace `new SplitText(trnsct, ";")` with `new ListOf<>(trnsct.split(";"))`.
*   Line 42: Replace `new TrimmedText(new TextOf(trnsct)).asString().isEmpty()` with `trnsct.trim().isEmpty()`.
*   Line 90, 110, 126, 144, 161, 178, 195: Replace `new SplitText(this.transaction.value(), ";")` with `java.util.Arrays.asList(this.transaction.split(";"))`. Also, replace `new IoCheckedScalar<>(new ItemAt<>(..., ...)).value()` with `java.util.Arrays.asList(this.transaction.split(";")).get(...)`.
*   Line 211: Replace `new UncheckedScalar<>(this.transaction).value()` with `this.transaction`.

e. Potential side effects:

*   Removing `IoCheckedScalar` and `StickyScalar` means we need to handle the `IOException` directly in the constructor and store the string representation of the transaction. This changes the immutability aspect slightly, but it's necessary due to the API changes.
*   Replacing `SplitText` with `String.split()` and converting to a `List` might have slight performance differences, but it should be negligible.

f. Adherence to constraints:

*   We are not changing any function signatures.
*   We are creating local variables where needed.
*   We are removing the `@Override` annotation only if the method no longer overrides a method in the updated dependency version (not applicable in this case).
*   We are adding necessary imports.
*   We are not removing any existing code unless it directly causes a compilation error.

g. Final summary:

The best solution is to remove the usage of `IoCheckedScalar`, `StickyScalar`, `UncheckedScalar`, `TrimmedText`, `SplitText`, and `LengthOf` and replace them with standard Java alternatives or the new `org.cactoos.scalar.LengthOf`. This involves handling the `IOException` directly in the constructor and storing the transaction string. This approach adheres to all the constraints and fixes the compilation errors caused by the API changes.
</fix_planning>

```java
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.zold.api;

import java.io.IOException;
import java.math.BigInteger;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import org.cactoos.Text;
import org.cactoos.list.ListOf;
import org.cactoos.scalar.ItemAt;
import org.cactoos.text.FormattedText;
import org.cactoos.text.TextOf;
import org.cactoos.text.UncheckedText;
import org.cactoos.time.ZonedDateTimeOf;
import org.cactoos.scalar.LengthOf;

/**
 * RtTransaction.
 *
 * @since 0.1
 * @checkstyle ClassDataAbstractionCoupling (3 lines)
 */
@SuppressWarnings({"PMD.AvoidCatchingGenericException",
    "PMD.AvoidFieldNameMatchingMethodName"})
final class RtTransaction implements Transaction {

    /**
     * Pattern for Prefix String.
     */
    private static final Pattern PREFIX = Pattern.compile(
        //@checkstyle LineLengthCheck (1 line)
        "^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$"
    );

    /**
     * Pattern for 16 symbol hex string.
     */
    private static final Pattern HEX = Pattern.compile("[A-Fa-f0-9]{16}");

    /**
     * Pattern for parsing Signature.
     */
    private static final Pattern SIGN = Pattern.compile("[A-Za-z0-9+/]+={0,3}");

    /**
     * Pattern for Details string.
     */
    private static final Pattern DTLS =
        Pattern.compile("[A-Za-z0-9 -.]{1,512}");

    /**
     * Pattern for ID String.
     */
    private static final Pattern IDENT = Pattern.compile("[A-Fa-f0-9]{4}");

    /**
     * String representation of transaction.
     */
    private final String transaction;

    /**
     * Ctor.
     * @param trnsct String representation of transaction
     */
    RtTransaction(final String trnsct) {
        try {
            if (trnsct.trim().isEmpty()) {
                throw new IOException(
                    "Invalid transaction string: string is empty"
                );
            }
            final List<Text> pieces =
                new ListOf<>(
                    Arrays.asList(trnsct.split(";"))
                );
            // @checkstyle MagicNumberCheck (1 line)
            if (new LengthOf(pieces).value().intValue() != 7) {
                throw new IOException(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid transaction string: expected 7 fields, but found %d",
                        pieces.size()
                    ).asString()
                );
            }
            this.transaction = trnsct;
        } catch (final IOException ex) {
            throw new IllegalArgumentException(ex);
        }
    }

    @Override
    @SuppressWarnings("PMD.ShortMethodName")
    public int id() throws IOException {
        final String ident = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(0)
            )
        ).asString();
        if (!RtTransaction.IDENT.matcher(ident).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols",
                        ident
                    )
                ).asString()
            );
        }
        // @checkstyle MagicNumber (1 line)
        return Integer.parseUnsignedInt(ident, 16);
    }

    @Override
    public ZonedDateTime time() throws IOException {
        return new ZonedDateTimeOf(
            new UncheckedText(
                new TextOf(
                    Arrays.asList(this.transaction.split(";")).get(1)
                )
            ).asString(),
            DateTimeFormatter.ISO_OFFSET_DATE_TIME
        ).value();
    }

    @Override
    public long amount() throws IOException {
        final String amnt = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(2)
            )
        ).asString();
        if (!RtTransaction.HEX.matcher(amnt).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols",
                        amnt
                    )
                ).asString()
            );
        }
        // @checkstyle MagicNumber (1 line)
        return new BigInteger(amnt, 16).longValue();
    }

    @Override
    public String prefix() throws IOException {
        final String prefix = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(3)
            )
        ).asString();
        //@checkstyle MagicNumberCheck (1 line)
        if (prefix.length() < 8 || prefix.length() > 32) {
            throw new IOException("Invalid prefix size");
        }
        if (!RtTransaction.PREFIX.matcher(prefix).matches()) {
            throw new IOException("Invalid base64 prefix");
        }
        return prefix;
    }

    @Override
    public String bnf() throws IOException {
        final String bnf = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(4)
            )
        ).asString();
        if (!RtTransaction.HEX.matcher(bnf).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid bnf string '%s', expecting hex string with 16 symbols",
                        bnf
                    )
                ).asString()
            );
        }
        return bnf;
    }

    @Override
    public String details() throws IOException {
        final String dtls = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(5)
            )
        ).asString();
        if (!RtTransaction.DTLS.matcher(dtls).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid details string '%s', does not match pattern '%s'",
                        dtls, RtTransaction.DTLS
                    )
                ).asString()
            );
        }
        return dtls;
    }

    @Override
    public String signature() throws IOException {
        final String sign = new UncheckedText(
            new TextOf(
                Arrays.asList(this.transaction.split(";")).get(6)
            )
        ).asString();
        // @checkstyle MagicNumber (1 line)
        if (sign.length() != 684
            || !RtTransaction.SIGN.matcher(sign).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid signature '%s', expecting base64 string with 684 characters",
                        sign
                    )
                ).asString()
            );
        }
        return sign;
    }

    @Override
    public String toString() {
        return this.transaction;
    }

    @Override
    @SuppressWarnings("PMD.OnlyOneReturn")
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final RtTransaction that = (RtTransaction) obj;
        return this.transaction.equals(that.transaction);
    }

    @Override
    public int hashCode() {
        return this.transaction.hashCode();
    }
}
```
