<fix_planning>
a. Code and API changes:
- Code: `import org.cactoos.iterable.LengthOf;` and `new LengthOf(other.suffixes()).intValue()` and `new LengthOf(this.sfxs).intValue()`
- API Changes: `Class org.cactoos.iterable.LengthOf has been removed in the new version of the dependency.` and `Type reference org.cactoos.scalar.LengthOf(java.lang.Iterable) has been added in the new version of the dependency.`

b. Problem:
The class `org.cactoos.iterable.LengthOf` has been removed. We need to use `org.cactoos.scalar.LengthOf` instead.

c. Affected lines:
- `import org.cactoos.iterable.LengthOf;`
- `return new LengthOf(other.suffixes()).intValue()`
- `return new LengthOf(this.sfxs).intValue();`

d. Proposed fixes:
1. Replace `import org.cactoos.iterable.LengthOf;` with `import org.cactoos.scalar.LengthOf;`
2. Replace `new LengthOf(other.suffixes()).intValue()` with `new org.cactoos.scalar.LengthOf(other.suffixes()).intValue()`
3. Replace `new LengthOf(this.sfxs).intValue()` with `new org.cactoos.scalar.LengthOf(this.sfxs).intValue()`

e. Side effects:
The code should compile and run as before, but now using the new API.

f. Constraint adherence:
1. The function signature of `compareTo` is not changed.
2. Variables are not created.
3. The `@Override` annotation is kept as the method still overrides a method in the interface.
4. The correct package `org.cactoos.scalar` is used.
5. No existing code is removed unless it directly causes a compilation error.
6. All code is included in the final output.

g. Summary:
The best solution is to replace the import statement and use the new `org.cactoos.scalar.LengthOf` class in the `compareTo` method. This fixes the compilation error and adheres to all constraints.
</fix_planning>

```java
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom it is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.zold.api;

import org.cactoos.Text;
import org.cactoos.scalar.LengthOf;

/**
 * Default implementation for {@link Score}.
 *
 * @since 1.0
 */
public final class RtScore implements Score {

    /**
     * The suffixes.
     */
    private final Iterable<Text> sfxs;

    /**
     * Ctor.
     *
     * @param sfxs The suffixes.
     */
    RtScore(final Iterable<Text> sfxs) {
        this.sfxs = sfxs;
    }

    @Override
    public int compareTo(final Score other) {
        return new LengthOf(other.suffixes()).intValue()
            - new LengthOf(this.sfxs).intValue();
    }

    @Override
    public Iterable<Text> suffixes() {
        return this.sfxs;
    }
}
```
