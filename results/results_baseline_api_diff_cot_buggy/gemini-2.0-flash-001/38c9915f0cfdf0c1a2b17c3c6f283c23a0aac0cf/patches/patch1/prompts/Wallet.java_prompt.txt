You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.zold.api;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Path;
import org.cactoos.collection.Filtered;
import org.cactoos.iterable.IterableOf;
import org.cactoos.iterable.Joined;
import org.cactoos.iterable.Mapped;
import org.cactoos.iterable.Skipped;
import org.cactoos.list.ListOf;
import org.cactoos.scalar.CheckedScalar;
import org.cactoos.scalar.Or;
import org.cactoos.scalar.UncheckedScalar;
import org.cactoos.text.FormattedText;
import org.cactoos.text.SplitText;
import org.cactoos.text.TextOf;
import org.cactoos.text.UncheckedText;

/**
 * Wallet.
 * @since 0.1
 * @todo #16:30min Merge method should update transactions
 *  in wallet's file and return concrete implementation not a fake one.
 *  Beware that tests should be refactored to take care of file cleanup
 *  after each case that merges wallets.
 */
@SuppressWarnings({"PMD.ShortMethodName", "PMD.TooManyMethods",
    "PMD.UnusedFormalParameter"})
public interface Wallet {
    /**
     * This wallet's ID: an unsigned 64-bit integer.
     * @return This wallet's id
     * @throws IOException If an IO error occurs
     * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
     * @checkstyle MethodName (2 lines)
     */
    long id() throws IOException;

    /**
     * Make a payment.
     * @param amt Amount to pay in zents
     * @param bnf Wallet ID of beneficiary
     * @throws IOException If an IO error occurs
     */
    void pay(long amt, long bnf) throws IOException;

    /**
     * Merge both {@code this} and {@code other}. Fails if they are not the
     * same wallet, as identified by their {@link #id() id}.
     * @param other Other wallet
     * @return The merged wallet
     * @throws IOException If an IO error occurs
     */
    Wallet merge(Wallet other) throws IOException;

    /**
     * This wallet's ledger.
     * @return This wallet's ledger
     */
    Iterable<Transaction> ledger();

    /**
     * This wallet's RSA key.
     * @return This wallet's RSA key.
     */
    String key();

    /**
     * A Fake {@link Wallet}.
     * @since 1.0
     * @todo #65:30min Complete Wallet implementations with id, public RSA
     *  key and network id. Wallets.create(Long, String, String) must
     *  create a Wallet with these strings set and a constructor must be
     *  added to all Walletl realizations (Wallet(final long id, final String
     *  pubkey, final String network, final Transaction... transactions). After
     *  completing these implementations fix tests that uses Wallets.create()
     *  and all Wallet realizations.
     */
    final class Fake implements Wallet {

        /**
         * The wallet id.
         */
        private final long id;

        /**
         * Transactions.
         */
        private final Iterable<Transaction> transactions;

        /**
         * Constructor.
         * @param id The wallet id.
         */
        public Fake(final long id) {
            this(id, new IterableOf<>());
        }

        /**
         * Ctor.
         * @param id The wallet id.
         * @param transactions Transactions.
         */
        public Fake(final long id, final Transaction... transactions) {
            this(id, new IterableOf<>(transactions));
        }

        /**
         * Constructor.
         * @param id The wallet id.
         * @param pubkey The public RSA key of the wallet owner.
         * @param network The network the walet belongs to.
         * @checkstyle UnusedFormalParameter (2 lines)
         */
        public Fake(final long id, final String pubkey, final String network) {
            this(id);
        }

        /**
         * Ctor.
         * @param id The wallet id.
         * @param transactions Transactions.
         */
        public Fake(final long id, final Iterable<Transaction> transactions) {
            this.id = id;
            this.transactions = transactions;
        }

        @Override
        public long id() throws IOException {
            return this.id;
        }

        @Override
        public void pay(final long amt, final long bnf) {
            // nothing
        }

        @Override
        public Wallet merge(final Wallet other) {
            return other;
        }

        @Override
        public Iterable<Transaction> ledger() {
            return this.transactions;
        }

        @Override
        public String key() {
            return Long.toString(this.id);
        }
    }

    /**
     * Default File implementation.
     * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)
     */
    final class File implements Wallet {

        /**
         * Path of this wallet.
         */
        private final Path path;

        /**
         * Ctor.
         * @param path Path of wallet
         */
        File(final Path path) {
            this.path = path;
        }

        @Override
        public long id() throws IOException {
            return new CheckedScalar<>(
                () -> Long.parseUnsignedLong(
                    new ListOf<>(
                        new SplitText(
                            new TextOf(this.path),
                            "\n"
                        )
                    ).get(2).asString(),
                    // @checkstyle MagicNumber (1 line)
                    16
                ),
                e -> new IOException(e)
            ).value();
        }

        @Override
        public void pay(final long amt, final long bnf) throws IOException {
            try (final Writer out = new FileWriter(this.path.toFile(), true)) {
                out.write('\n');
                out.write(new CpTransaction(amt, bnf).toString());
            }
        }

        // @todo #16:30min Following transactions should be ignored according
        //  to the whitepaper:
        //  a) If the transaction is negative and its signature is not valid,
        //  it is ignored;
        //  b) If the transaction makes the balance of the wallet negative,
        //  it is ignored;
        //  c) If the transaction is positive and it’s absent in the paying
        //  wallet (which exists at the node), it’s ignored; If the paying
        //  wallet doesn’t exist at the node, the transaction is ignored;
        @Override
        public Wallet merge(final Wallet other) throws IOException {
            if (other.id() != this.id()) {
                throw new IOException(
                    new UncheckedText(
                        new FormattedText(
                            "Wallet ID mismatch, ours is %d, theirs is %d",
                            other.id(),
                            this.id()
                        )
                    ).asString()
                );
            }
            final Iterable<Transaction> ledger = this.ledger();
            final Iterable<Transaction> candidates = new Filtered<>(
                incoming -> new Filtered<>(
                    origin -> new UncheckedScalar<>(
                        new Or(
                            () -> incoming.equals(origin),
                            () -> incoming.id() == origin.id()
                                && incoming.bnf().equals(origin.bnf()),
                            () -> incoming.id() == origin.id()
                                && incoming.amount() < 0L,
                            () -> incoming.prefix().equals(origin.prefix())
                        )
                    ).value(),
                    ledger
                ).isEmpty(),
                other.ledger()
            );
            return new Wallet.Fake(
                this.id(),
                new Joined<Transaction>(ledger, candidates)
            );
        }

        @Override
        public Iterable<Transaction> ledger() {
            return new Mapped<>(
                txt -> new RtTransaction(txt.asString()),
                new Skipped<>(
                    new ListOf<>(
                        new SplitText(
                            new TextOf(this.path),
                            "\\n"
                        )
                    ),
                    // @checkstyle MagicNumberCheck (1 line)
                    5
                )
            );
        }

        // @todo #54:30min Implement key method. This should return the
        //  public RSA key of the wallet owner in Base64. Also add a unit test
        //  to replace WalletTest.keyIsNotYetImplemented().
        @Override
        public String key() {
            throw new UnsupportedOperationException(
                "key() not yet supported"
            );
        }
    }
}

```

The errors are triggered in the following specific line:

<error_lines>
```java
import org.cactoos.scalar.CheckedScalar;
```
```java
import org.cactoos.text.SplitText;
```
```java
import org.cactoos.collection.Filtered;
```
```java
import org.cactoos.scalar.UncheckedScalar;
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Constructor org.cactoos.scalar.CheckedScalar(org.cactoos.Scalar,org.cactoos.Func) has been removed in the new version of the dependency.
     Class org.cactoos.scalar.CheckedScalar has been removed in the new version of the dependency.
     Class org.cactoos.text.SplitText has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.Text,java.lang.String) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.text.UncheckedText,org.cactoos.text.UncheckedText) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.Text,org.cactoos.Text) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(java.lang.String,org.cactoos.Text) has been removed in the new version of the dependency.
     Type reference org.cactoos.iterable.Filtered(java.lang.Iterable,org.cactoos.Func) has been added in the new version of the dependency.
     Constructor org.cactoos.collection.Filtered(org.cactoos.Func,java.util.Iterator) has been removed in the new version of the dependency.
     Constructor org.cactoos.collection.Filtered(org.cactoos.Func,java.lang.Object[]) has been removed in the new version of the dependency.
     Constructor org.cactoos.collection.Filtered(org.cactoos.Func,java.lang.Iterable) has been removed in the new version of the dependency.
     Class org.cactoos.collection.Filtered has been removed in the new version of the dependency.
     Type reference org.cactoos.iterator.Filtered(java.util.Iterator,org.cactoos.Func) has been added in the new version of the dependency.
     Constructor org.cactoos.iterable.Filtered(org.cactoos.Func,java.util.Iterator) has been removed in the new version of the dependency.
     Constructor org.cactoos.scalar.UncheckedScalar(org.cactoos.Scalar) has been removed in the new version of the dependency.
     Class org.cactoos.scalar.UncheckedScalar has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /java-api/src/main/java/io/zold/api/Wallet.java:[36,26] cannot find symbol
  symbol:   class CheckedScalar
  location: package org.cactoos.scalar

[ERROR] /java-api/src/main/java/io/zold/api/Wallet.java:[40,24] cannot find symbol
  symbol:   class SplitText
  location: package org.cactoos.text

[ERROR] /java-api/src/main/java/io/zold/api/Wallet.java:[30,30] cannot find symbol
  symbol:   class Filtered
  location: package org.cactoos.collection

[ERROR] /java-api/src/main/java/io/zold/api/Wallet.java:[38,26] cannot find symbol
  symbol:   class UncheckedScalar
  location: package org.cactoos.scalar
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
