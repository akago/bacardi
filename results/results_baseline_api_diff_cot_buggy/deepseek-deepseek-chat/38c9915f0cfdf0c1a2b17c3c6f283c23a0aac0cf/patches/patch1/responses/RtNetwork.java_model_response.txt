<fix_planning>
1. Analysis:
   a. The error occurs because the class `IoCheckedScalar` has been removed in the new version of the dependency.
   b. The specific API change causing the issue is the removal of the `IoCheckedScalar` class and its constructor.
   c. The affected line of code is:
      ```java
      return new IoCheckedScalar<>(
          new Reduced<>(
              Wallet::merge,
              new Mapped<>(
                  c -> c::wallet,
                  new Sorted<>(new Copies(id, this))
              )
          )
      ).value();
      ```
   d. Potential fixes:
      - Replace `IoCheckedScalar` with a similar class or mechanism that handles checked exceptions.
      - Use a try-catch block to handle the `IOException` directly.
   e. Side effects:
      - Using a try-catch block might change the flow of the code but will maintain the same functionality.
   f. The proposed changes adhere to all constraints:
      - The function signature remains unchanged.
      - No existing code is removed.
      - The fix addresses the missing import issue.
   g. Final summary:
      - The best solution is to replace `IoCheckedScalar` with a try-catch block to handle the `IOException` directly. This maintains the functionality and adheres to all constraints.
</fix_planning>

```java
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.zold.api;

import java.io.IOException;
import java.util.Iterator;
import org.cactoos.iterable.Mapped;
import org.cactoos.iterable.Sorted;
import org.cactoos.scalar.Reduced;

/**
 * Network implementation.
 *
 * @since 0.1
 * @todo #5:30min We must figure out how to 'load' some network. Loading the
 *  network will be loading a local JSON file that contains data on all
 *  remote nodes that we know about; we must have a pre configured set of
 *  remote nodes built in too. See whitepaper for details.
 */
public final class RtNetwork implements Network {

    /**
     * {@link Remote} nodes.
     */
    private final Iterable<Remote> nodes;

    /**
     * Constructor.
     * @param remotes Remotes of the network
     */
    RtNetwork(final Iterable<Remote> remotes) {
        this.nodes =  remotes;
    }

    @Override
    public void push(final Wallet wallet) {
        this.nodes.forEach(
            remote -> remote.push(wallet)
        );
    }

    @Override
    public Wallet pull(final long id) throws IOException {
        try {
            return new Reduced<>(
                Wallet::merge,
                new Mapped<>(
                    c -> c::wallet,
                    new Sorted<>(new Copies(id, this))
                )
            ).value();
        } catch (final Exception ex) {
            throw new IOException(ex);
        }
    }

    @Override
    public Iterator<Remote> iterator() {
        return this.nodes.iterator();
    }
}
```
