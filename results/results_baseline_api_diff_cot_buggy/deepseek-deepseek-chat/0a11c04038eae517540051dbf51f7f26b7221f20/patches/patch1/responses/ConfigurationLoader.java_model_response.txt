<fix_planning>
a. Relevant parts of the code and API changes:
   - The error occurs in the line: `Constructor yamlTargetClass = new Constructor(Configuration.class);`
   - API changes indicate that the `Constructor(Class)` constructor has been removed and replaced with `Constructor(Class, LoaderOptions)`.

b. Specific API changes causing the issue:
   - The `Constructor(Class)` constructor is no longer available, and the new version requires a `LoaderOptions` parameter.

c. Affected lines of code:
   - `Constructor yamlTargetClass = new Constructor(Configuration.class);`

d. Potential fixes for each affected line:
   - Create a `LoaderOptions` instance and pass it along with `Configuration.class` to the `Constructor`.

e. Potential side effects of the proposed changes:
   - The new `LoaderOptions` parameter might introduce different behavior in YAML parsing, but this is necessary to comply with the new API.

f. Adherence to constraints:
   - The function signature remains unchanged.
   - A new variable is introduced for `LoaderOptions`, which simplifies the code.
   - No existing code is removed.
   - All code, including unchanged portions, is included in the final output.

g. Final summary of the chosen fix:
   - The best solution is to create a `LoaderOptions` instance and use it in the `Constructor` initialization. This adheres to the new API requirements while maintaining the existing functionality.
</fix_planning>

```java
package io.simplelocalize.cli.configuration;

import io.simplelocalize.cli.exception.ConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.LoaderOptions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;

public final class ConfigurationLoader
{

  private static final Path DEFAULT_CONFIG_FILE_NAME = Path.of("simplelocalize.yml");

  private final Logger log = LoggerFactory.getLogger(ConfigurationLoader.class);

  public Configuration loadOrGetDefault(Path configurationFilePath)
  {
    ConfigurationLoader configurationLoader = new ConfigurationLoader();

    if (configurationFilePath == null)
    {
      configurationFilePath = DEFAULT_CONFIG_FILE_NAME;
    }

    return configurationLoader.load(configurationFilePath);
  }

  private Configuration load(Path configurationFilePath)
  {
    File file = new File(URLDecoder.decode(String.valueOf(configurationFilePath.toFile()), StandardCharsets.UTF_8));
    LoaderOptions loaderOptions = new LoaderOptions();
    Constructor yamlTargetClass = new Constructor(Configuration.class, loaderOptions);
    Yaml yaml = new Yaml(yamlTargetClass);

    log.info("Loading configuration file from: {}", configurationFilePath);
    Configuration configuration;
    try
    {
      InputStream inputStream = new FileInputStream(file);
      configuration = yaml.load(inputStream);
      log.info("Configuration file loaded successfully");
    } catch (FileNotFoundException e)
    {
      log.info("Configuration file not present");
      return new Configuration();
    } catch (Exception e)
    {
      log.error("Unable to load configuration: {}", e.getMessage());
      throw new ConfigurationException();
    }
    return configuration;

  }

}
```
