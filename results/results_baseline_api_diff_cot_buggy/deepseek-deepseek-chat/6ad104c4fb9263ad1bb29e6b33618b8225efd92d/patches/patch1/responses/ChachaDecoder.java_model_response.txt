<fix_planning>
1. **Analysis of the Problem:**
   - The code uses classes `TlsFatalAlert` and `AlertDescription` from the `org.bouncycastle.crypto.tls` package, which have been removed in the new version of the dependency.
   - The specific API changes causing the issue are:
     - Removal of `TlsFatalAlert` class.
     - Removal of `AlertDescription` class.
   - Affected lines of code:
     - `import org.bouncycastle.crypto.tls.TlsFatalAlert;`
     - `import org.bouncycastle.crypto.tls.AlertDescription;`
     - `throw new TlsFatalAlert(AlertDescription.bad_record_mac);`

2. **Proposed Fixes:**
   - Replace `TlsFatalAlert` with a custom exception or a more general exception like `IOException`.
   - Replace `AlertDescription.bad_record_mac` with a custom error code or a descriptive message.
   - Remove the imports for `TlsFatalAlert` and `AlertDescription`.

3. **Potential Side Effects:**
   - The change from `TlsFatalAlert` to `IOException` might affect error handling in the calling code, but since `TlsFatalAlert` was already extending `IOException`, this should be minimal.
   - The error message might be less specific, but it will still indicate a failure in the MAC verification.

4. **Adherence to Constraints:**
   - The function signatures remain unchanged.
   - No existing code is removed except for the problematic imports.
   - The fix addresses the missing imports by removing them and replacing the functionality with standard Java exceptions.

5. **Final Summary:**
   - The best solution is to replace `TlsFatalAlert` with `IOException` and use a descriptive error message. This adheres to all constraints and maintains the functionality of the code.
</fix_planning>

```java
package io.github.hapjava.server.impl.crypto;

import java.io.IOException;
import org.bouncycastle.crypto.engines.ChaChaEngine;
import org.bouncycastle.crypto.generators.Poly1305KeyGenerator;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.util.Arrays;

public class ChachaDecoder {

  private final ChaChaEngine decryptCipher;

  public ChachaDecoder(byte[] key, byte[] nonce) throws IOException {

    this.decryptCipher = new ChaChaEngine(20);

    this.decryptCipher.init(false, new ParametersWithIV(new KeyParameter(key), nonce));
  }

  public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext)
      throws IOException {

    KeyParameter macKey = initRecordMAC(decryptCipher);

    byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);

    if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
      throw new IOException("Bad record MAC");
    }

    byte[] output = new byte[ciphertext.length];
    decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);

    return output;
  }

  public byte[] decodeCiphertext(byte[] receivedMAC, byte[] ciphertext) throws IOException {
    return decodeCiphertext(receivedMAC, null, ciphertext);
  }

  private KeyParameter initRecordMAC(ChaChaEngine cipher) {
    byte[] firstBlock = new byte[64];
    cipher.processBytes(firstBlock, 0, firstBlock.length, firstBlock, 0);

    // NOTE: The BC implementation puts 'r' after 'k'
    System.arraycopy(firstBlock, 0, firstBlock, 32, 16);
    KeyParameter macKey = new KeyParameter(firstBlock, 16, 32);
    Poly1305KeyGenerator.clamp(macKey.getKey());
    return macKey;
  }
}
```
