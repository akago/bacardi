<fix_planning>
1. Analysis:
   a. Relevant code parts:
      - `private final RawDataChannel permissionsResultChannel;`
      - `public class CheckPermissionListener implements RawDataListener`
      - `CheckPermissionListener(ChangeSkinSponge plugin, ChannelRegistrar channelRegistrar)`
      - `public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side)`

   b. API changes causing issues:
      - `RawDataChannel`, `ChannelBuf`, `RawDataListener`, and `ChannelRegistrar` classes have been removed
      - New classes and methods have been introduced in the `org.spongepowered.api.network.channel` package

   c. Affected lines:
      - Import statements
      - Class declaration
      - Field declaration
      - Constructor
      - handlePayload method

   d. Proposed fixes:
      - Replace `RawDataChannel` with `RawPlayDataChannel`
      - Replace `ChannelBuf` with `ChannelBuf` from new package
      - Replace `RawDataListener` with `RawPlayChannelListener`
      - Replace `ChannelRegistrar` with `ChannelManager`
      - Update method implementations to use new API

   e. Potential side effects:
      - Need to verify compatibility with other parts of the code
      - Ensure message handling logic remains consistent

   f. Constraints check:
      - Function signatures remain unchanged
      - Only necessary imports are modified
      - No code is removed unless it causes errors

   g. Final summary:
      The best solution is to update the code to use the new network channel API from SpongeAPI, replacing the removed classes with their new equivalents while maintaining the same functionality.

2. Implementation plan:
   - Update import statements
   - Change class implementation
   - Modify field type
   - Update constructor
   - Adapt handlePayload method
   - Keep all other code unchanged
</fix_planning>

```java
package com.github.games647.changeskin.sponge.bungee;

import com.github.games647.changeskin.core.message.NamespaceKey;
import com.github.games647.changeskin.core.message.CheckPermMessage;
import com.github.games647.changeskin.core.message.PermResultMessage;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;
import com.google.inject.Inject;

import java.util.UUID;

import org.spongepowered.api.Platform.Type;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.network.channel.raw.play.RawPlayChannelListener;
import org.spongepowered.api.network.channel.ChannelBuf;
import org.spongepowered.api.network.channel.ChannelManager;
import org.spongepowered.api.network.channel.raw.play.RawPlayDataChannel;
import org.spongepowered.api.network.RemoteConnection;

import static com.github.games647.changeskin.core.message.PermResultMessage.PERMISSION_RESULT_CHANNEL;
import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;

public class CheckPermissionListener implements RawPlayChannelListener {

    private final ChangeSkinSponge plugin;
    private final RawPlayDataChannel permissionsResultChannel;

    @Inject
    CheckPermissionListener(ChangeSkinSponge plugin, ChannelManager channelManager) {
        this.plugin = plugin;

        String combinedName = new NamespaceKey(ARTIFACT_ID, PERMISSION_RESULT_CHANNEL).getCombinedName();
        permissionsResultChannel = channelManager.play().raw().getOrCreate(plugin, combinedName);
    }

    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
        CheckPermMessage checkMessage = new CheckPermMessage();
        checkMessage.readFrom(dataInput);

        CheckPermMessage message = new CheckPermMessage();
        message.readFrom(dataInput);

        checkPermissions((Player) connection, message);
    }

    private void checkPermissions(Player player, CheckPermMessage permMessage) {
        UUID receiverUUID = permMessage.getReceiverUUD();
        boolean op = permMessage.isOp();
        SkinModel targetSkin = permMessage.getTargetSkin();
        UUID skinProfile = targetSkin.getProfileId();

        boolean success = op || checkBungeePerms(player, receiverUUID, permMessage.isSkinPerm(), skinProfile);
        sendResultMessage(player, new PermResultMessage(success, targetSkin, receiverUUID));
    }

    private boolean checkBungeePerms(Player player, UUID receiverUUID, boolean skinPerm, UUID targetUUID) {
        if (player.getUniqueId().equals(receiverUUID)) {
            return checkPerm(player, "command.setskin", skinPerm, targetUUID);
        }

        return checkPerm(player, "command.setskin.other", skinPerm, targetUUID);
    }

    private boolean checkPerm(Player invoker, String node, boolean skinPerm, UUID targetUUID) {
        String pluginName = plugin.getName().toLowerCase();
        boolean hasCommandPerm = invoker.hasPermission(pluginName +  '.' + node);
        if (skinPerm) {
            return hasCommandPerm && plugin.hasSkinPermission(invoker, targetUUID, false);
        }

        return hasCommandPerm;
    }

    private void sendResultMessage(Player receiver, PermResultMessage resultMessage) {
        ByteArrayDataOutput dataOutput = ByteStreams.newDataOutput();
        resultMessage.writeTo(dataOutput);
        permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
    }
}
```
