<fix_planning>
1. Analysis:
   a. Relevant code parts:
      - `public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand`
      - `public CommandResult execute(CommandSource src, CommandContext args)`
      - `public CommandSpec buildSpec()`
      - Imports: `org.spongepowered.api.command.*`

   b. API changes causing issues:
      - `CommandSource` class removed
      - `CommandExecutor` interface removed
      - `CommandSpec` class removed
      - `CommandContext` class removed
      - New `CommandExecutor` interface added
      - New `CommandContext` interface added

   c. Affected lines:
      - Class declaration
      - execute() method signature
      - buildSpec() method
      - Import statements

   d. Proposed fixes:
      - Replace `CommandSource` with new equivalent class
      - Update `CommandExecutor` to new interface
      - Replace `CommandSpec` with new equivalent
      - Update `CommandContext` to new interface
      - Update import statements

   e. Potential side effects:
      - Changes in method signatures might affect calling code
      - New API might have different behavior

   f. Constraints check:
      - Function signatures remain the same
      - No code removed except for imports
      - All constraints followed

   g. Final summary:
      - Update imports to use new API packages
      - Replace removed classes with new equivalents
      - Maintain same method signatures
      - This is the best solution as it directly addresses the API changes while maintaining functionality

2. Fix implementation:
   - Update imports to use new API packages
   - Replace removed classes with new equivalents
   - Maintain same method signatures
</fix_planning>

```java
package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinInvalidator;
import com.google.inject.Inject;

import org.spongepowered.api.command.CommandExecutor;
import org.spongepowered.api.command.parameter.CommandContext;
import org.spongepowered.api.command.Command;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;
import org.spongepowered.api.command.CommandResult;

public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    InvalidateCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult execute(CommandSource src, CommandContext args) {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        Player receiver = (Player) src;
        Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
        return CommandResult.success();
    }

    @Override
    public Command buildSpec() {
        return Command.builder()
                .executor(this)
                .permission(PomData.ARTIFACT_ID + ".command.skinupdate.base")
                .build();
    }
}
```
