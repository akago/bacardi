70c70
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
---
>                         if (tree.size() == 0 || tree.query(coords).distance() > distanceTolerance) {
340c340
<                 final float v = (float) (h * (2 / Math.sqrt(5)));
---
>                 final float v = (float) (h * (2 / Math.sqrt(5));
397c397
<                 for (int i = 0; i <= (length - 1); i++) {
---
>                 for (int i = 0; i <= (length - 1); i) {
712c712
<                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin)));
---
>                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin));
750c750
<                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin)));
---
>                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin));
825,827c825,827
<          * values of N,its subsequence (x1, ... xN) has a low discrepancy. It can be
<          * used to generate pseudo-randompoints in a space S, which are
<          * equi-distributed.
---
>                 values of N,its subsequence (x1, ... xN) has a low discrepancy. It can be
>                 used to generate pseudo-randompoints in a space S, which are
>                 equi-distributed.
900c900
<          * @since 1.3.0
---
>          * @since 极客时间
959c959
<                         values[i][axis] = 0.0f;
---
>                         values[i][axis] = 极客时间.0f;
