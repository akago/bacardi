You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/**
 * Copyright 2019 Pinterest, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pinterest.singer.client.logback;

import com.pinterest.singer.thrift.LogMessage;

import ch.qos.logback.core.Appender;
import ch.qos.logback.core.Context;
import ch.qos.logback.core.encoder.EncoderBase;
import ch.qos.logback.core.rolling.RollingFileAppender;
import ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP;
import ch.qos.logback.core.rolling.TimeBasedRollingPolicy;
import ch.qos.logback.core.util.FileSize;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TTransport;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;

/**
 * Utils to create logback appenders
 */
public class AppenderUtils {

  public static final String PATH_SEP = "/";

  private AppenderUtils() {
  }

  /**
   * Encoder for LogMessage objects.
   */
  public static class LogMessageEncoder extends EncoderBase<LogMessage> {

    private TTransport framedTransport;
    private TProtocol protocol;
    private OutputStream os;

    @Override
    public void init(OutputStream os) {
      this.os = os;
      // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
      // log.
      final int bufferCapacity = 10;
      framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
          bufferCapacity);
      protocol = new TBinaryProtocol(framedTransport);
    }

    @Override
    public void doEncode(LogMessage logMessage) throws IOException {
      try {
        logMessage.write(protocol);
        framedTransport.flush();
      } catch (TException e) {
        throw new IOException(e);
      }
    }

    @Override
    public void close() throws IOException {
      framedTransport.close();
    }
  }

  /**
   * Create the basic thrift appender which logs to a file
   * and rolls the file when it exceeds a certain size.
   *
   * @param basePath base directory the files are under.
   * @param topic the topic name for the current appender.
   * @param rotateThresholdKBytes threshold in kilobytes to rotate after.
   * @param context the logback context.
   */
  public static Appender<LogMessage> createFileRollingThriftAppender(
      File basePath,
      String topic,
      long rotateThresholdKBytes,
      Context context,
      int maxRetentionHours) {
    RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();
    appender.setContext(context);
    appender.setAppend(true);
    appender.setPrudent(false);

    LogMessageEncoder encoder = new LogMessageEncoder();
    appender.setEncoder(encoder);
    appender.setFile(basePath + PATH_SEP + topic);

    TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();
    policy.setMaxHistory(maxRetentionHours);
    policy.setFileNamePattern(basePath + PATH_SEP + topic + ".%d{yyyy-MM-dd-HH}.%i");
    policy.setCleanHistoryOnStart(false);
    policy.setContext(context);
    policy.setParent(appender);

    // Also impose a max size per file policy.
    SizeAndTimeBasedFNATP fnatp = new SizeAndTimeBasedFNATP();
    fnatp.setContext(context);
    fnatp.setTimeBasedRollingPolicy(policy);
    fnatp.setMaxFileSize(FileSize.valueOf(String.format("%sKB", rotateThresholdKBytes)));

    policy.setTimeBasedFileNamingAndTriggeringPolicy(fnatp);
    appender.setRollingPolicy(policy);
    appender.setTriggeringPolicy(policy);

    policy.start();
    appender.start();

    return appender;
  }
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
```
```java
framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
```
```java
framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
```
```java
import org.apache.thrift.transport.TFastFramedTransport;
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Class org.apache.thrift.transport.TFastFramedTransport has been removed in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport) has been removed in the new version of the dependency.
     Interface org.apache.thrift.transport.layered.TFastFramedTransport has been added in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int) has been removed in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int) has been removed in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int) has been added in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TIOStreamTransport(java.io.OutputStream) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TIOStreamTransport(java.io.InputStream,java.io.OutputStream) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.OutputStream) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TIOStreamTransport() has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream,java.io.OutputStream) has been added in the new version of the dependency.
     Construct org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TIOStreamTransport(java.io.InputStream) has been added in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /singer/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java:[63,29] cannot find symbol
  symbol:   class TFastFramedTransport
  location: class com.pinterest.singer.client.logback.AppenderUtils.LogMessageEncoder

[ERROR] /singer/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java:[63,29] cannot find symbol
  symbol:   class TFastFramedTransport
  location: class com.pinterest.singer.client.logback.AppenderUtils.LogMessageEncoder

[ERROR] /singer/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java:[63,29] cannot find symbol
  symbol:   class TFastFramedTransport
  location: class com.pinterest.singer.client.logback.AppenderUtils.LogMessageEncoder

[ERROR] /singer/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java:[30,35] cannot find symbol
  symbol:   class TFastFramedTransport
  location: package org.apache.thrift.transport
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
