18,21c18
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
38,39c35,36
<   static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
<       new Function<OrgPolicy, OrgPolicyInfo>() {
---
>   static final Function<Policy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
>       new Function<Policy, OrgPolicyInfo>() {
41c38
<         public OrgPolicyInfo apply(OrgPolicy protobuf) {
---
>         public OrgPolicyInfo apply(Policy protobuf) {
45,46c42,43
<   static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =
<       new Function<OrgPolicyInfo, OrgPolicy>() {
---
>   static final Function<OrgPolicyInfo, Policy> TO_PROTOBUF_FUNCTION =
>       new Function<OrgPolicyInfo, Policy>() {
48c45
<         public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {
---
>         public Policy apply(OrgPolicyInfo orgPolicyInfo) {
57d53
<   private RestoreDefault restoreDefault;
96,97c92,93
<     BooleanPolicy toProtobuf() {
<       return new BooleanPolicy().setEnforced(enforce);
---
>     Boolean toProtobuf() {
>       return enforce;
100,101c96,97
<     static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {
<       return new BoolPolicy(booleanPolicy.getEnforced());
---
>     static BoolPolicy fromProtobuf(Boolean booleanPolicy) {
>       return new BoolPolicy(booleanPolicy);
105,120d100
<   /**
<    * The organization ListPolicy object.
<    *
<    * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource
<    * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the
<    * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:
<    * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote
<    * specific values, and is required only if the value contains a ":". Values prefixed with "is:"
<    * are treated the same as values with no prefix. Ancestry subtrees must be in one of the
<    * following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g.
<    * "folders/1234" - "organizations/", e.g. "organizations/1234" The supportsUnder field of the
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
<    */
125c105
<     private final List<java.lang.String> deniedValues;
---
>     private final List<String> deniedValues;
142d121
<     /** Returns all the Values state of this policy. */
147d125
<     /** Returns the list of allowed values of this resource */
152d129
<     /** Returns the list of denied values of this resource. */
157d133
<     /** Returns the inheritance behavior for this Policy */
162d137
<     /** Returns the suggested value of this policy. */
200,206c175,179
<     ListPolicy toProtobuf() {
<       return new ListPolicy()
<           .setAllValues(allValues)
<           .setAllowedValues(allowedValues)
<           .setDeniedValues(deniedValues)
<           .setInheritFromParent(inheritFromParent)
<           .setSuggestedValue(suggestedValue);
---
>     Policy toProtobuf() {
>       Policy policy = new Policy();
>       policy.setEtag(etag);
>       policy.setVersion(version);
>       return policy;
209c182
<     static Policies fromProtobuf(ListPolicy listPolicy) {
---
>     static Policies fromProtobuf(Policy policy) {
211,215c184,188
<           listPolicy.getAllValues(),
<           listPolicy.getAllowedValues(),
<           listPolicy.getDeniedValues(),
<           listPolicy.getInheritFromParent(),
<           listPolicy.getSuggestedValue());
---
>           null,
>           null,
>           null,
>           null,
>           null);
219d191
<   /** Builder for {@code OrganizationPolicyInfo}. */
225d196
<     private RestoreDefault restoreDefault;
236d206
<       this.restoreDefault = info.restoreDefault;
261,265d230
<     Builder setRestoreDefault(RestoreDefault restoreDefault) {
<       this.restoreDefault = restoreDefault;
<       return this;
<     }
< 
286d250
<     this.restoreDefault = builder.restoreDefault;
291d254
<   /** Returns the boolean constraint to check whether the constraint is enforced or not. */
296d258
<   /** Returns the name of the Constraint. */
301d262
<   /** Returns the etag value of policy. */
306d266
<   /** Return the policies. */
311,316d270
<   /** Restores the default behavior of the constraint. */
<   public RestoreDefault getRestoreDefault() {
<     return restoreDefault;
<   }
< 
<   /** Returns the updated timestamp of policy. */
321d274
<   /** Returns the version of the Policy, Default version is 0. */
339d291
<         && Objects.equals(restoreDefault, policyInfo.restoreDefault)
347c299
<         boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
---
>         boolPolicy, constraint, etag, policies, updateTime, version);
350d301
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
355d305
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
360,361c310,311
<   OrgPolicy toProtobuf() {
<     OrgPolicy orgPolicyProto = new OrgPolicy();
---
>   Policy toProtobuf() {
>     Policy policy = new Policy();
363c313
<       orgPolicyProto.setBooleanPolicy(boolPolicy.toProtobuf());
---
>       policy.setEtag(etag);
365,373c315,316
<     orgPolicyProto.setConstraint(constraint);
<     if (policies != null) {
<       orgPolicyProto.setListPolicy(policies.toProtobuf());
<     }
<     orgPolicyProto.setRestoreDefault(restoreDefault);
<     orgPolicyProto.setEtag(etag);
<     orgPolicyProto.setUpdateTime(updateTime);
<     orgPolicyProto.setVersion(version);
<     return orgPolicyProto;
---
>     policy.setVersion(version);
>     return policy;
376c319
<   static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {
---
>   static OrgPolicyInfo fromProtobuf(Policy policy) {
378,388c321,322
<     if (orgPolicyProtobuf.getBooleanPolicy() != null) {
<       builder.setBoolPolicy(BoolPolicy.fromProtobuf(orgPolicyProtobuf.getBooleanPolicy()));
<     }
<     builder.setConstraint(orgPolicyProtobuf.getConstraint());
<     if (orgPolicyProtobuf.getListPolicy() != null) {
<       builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));
<     }
<     builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());
<     builder.setEtag(orgPolicyProtobuf.getEtag());
<     builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());
<     builder.setVersion(orgPolicyProtobuf.getVersion());
---
>     builder.setEtag(policy.getEtag());
>     builder.setVersion(policy.getVersion());
