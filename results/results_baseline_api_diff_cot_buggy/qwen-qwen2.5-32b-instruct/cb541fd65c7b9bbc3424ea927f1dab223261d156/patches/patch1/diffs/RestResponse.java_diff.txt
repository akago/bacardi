45d44
< import org.hamcrest.CustomMatcher;
48c47,50
< import org.hamcrest.Matchers;
---
> import org.hamcrest.core.IsEqual;
> import org.hamcrest.core.IsNot;
> import org.hamcrest.core.IsNull;
> import org.hamcrest.core.StringContains;
60,61c62,63
<  *   .assertBody(Matchers.containsString("hello, world!"))
<  *   .assertHeader("Content-Type", Matchers.hasItem("text/plain"))
---
>  *   .assertBody(new StringContains("hello, world!"))
>  *   .assertHeader("Content-Type", new IsEqual<>(Collections.singletonList("text/plain")))
65,67d66
<  * <p>Method {@link #jump(URI)} creates a new instance of class
<  * {@link Request} with all cookies transferred from the current one.
<  *
103c102
<      * @return The same object
---
>      * @return This object
106,108d104
<         final String message = String.format(
<             "HTTP response with status %d", status
<         );
114,115c110,111
<             this,
<             new RestResponse.StatusMatch(message, status)
---
>             this.status(),
>             new IsEqual<>(status)
123c119
<      * @param matcher Matcher to validate status code
---
>      * @param matcher The matcher to use
210c206
<         return this.assertHeader(name, Matchers.hasItems(value));
---
>         return this.assertHeader(name, new IsEqual<>(Collections.singletonList(value)));
226c222
<                 for (final HttpCookie cookie : HttpCookie.parse(header)) {
---
>                 for (final HttpCookie candidate : HttpCookie.parse(header)) {
230c226
<                             "%s=%s", cookie.getName(), cookie.getValue()
---
>                             "%s=%s", candidate.getName(), candidate.getValue()
246c242
<             Matchers.not(Matchers.emptyIterableOf(String.class))
---
>             new IsNot<>(new IsNull<>())
263c259,260
<             headers.containsKey(HttpHeaders.SET_COOKIE)
---
>             headers.containsKey(HttpHeaders.SET_COOKIE),
>             new IsEqual<>(true)
284c281
<             Matchers.notNullValue()
---
>             new IsNull<>(false)
