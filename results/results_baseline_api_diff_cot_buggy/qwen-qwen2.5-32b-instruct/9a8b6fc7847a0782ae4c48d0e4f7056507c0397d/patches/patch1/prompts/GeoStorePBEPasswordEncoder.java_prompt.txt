You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
package it.geosolutions.geostore.core.security.password;

/*
 *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;
import static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;
import static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;

import java.io.IOException;
import java.util.Arrays;
import java.util.Base64;
import org.acegisecurity.providers.encoding.PasswordEncoder;
import org.jasypt.encryption.pbe.StandardPBEByteEncryptor;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jasypt.spring.security.PBEPasswordEncoder;
/**
 * Password Encoder using symmetric encryption
 * 
 * The salt parameter is not used, this implementation computes a random salt as
 * default.
 * 
 * {@link #isPasswordValid(String, String, Object)}
 * {@link #encodePassword(String, Object)}
 * 
 * @author Lorenzo Natali
 * 
 */
public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {

	StandardPBEStringEncryptor stringEncrypter;
	StandardPBEByteEncryptor byteEncrypter;

	private String providerName, algorithm;
	private String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;

	private KeyStoreProvider keystoreProvider;

	public KeyStoreProvider getKeystoreProvider() {
		return keystoreProvider;
	}

	public void setKeystoreProvider(KeyStoreProvider keystoreProvider) {
		this.keystoreProvider = keystoreProvider;
	}

	public void setKeyAliasInKeyStore(String keyAliasInKeyStore) {
		this.keyAliasInKeyStore = keyAliasInKeyStore;
	}

	public String getProviderName() {
		return providerName;
	}

	public void setProviderName(String providerName) {
		this.providerName = providerName;
	}

	public String getAlgorithm() {
		return algorithm;
	}

	public void setAlgorithm(String algorithm) {
		this.algorithm = algorithm;
	}

	public String getKeyAliasInKeyStore() {
		return keyAliasInKeyStore;
	}

	@Override
	protected PasswordEncoder createStringEncoder() {
		byte[] password = lookupPasswordFromKeyStore();

		char[] chars = toChars(password);
		try {
			stringEncrypter = new StandardPBEStringEncryptor();
			stringEncrypter.setPasswordCharArray(chars);

			if (getProviderName() != null && !getProviderName().isEmpty()) {
				stringEncrypter.setProviderName(getProviderName());
			}
			stringEncrypter.setAlgorithm(getAlgorithm());

			PBEPasswordEncoder encoder = new PBEPasswordEncoder();
			encoder.setPbeStringEncryptor(stringEncrypter);

			return encoder;
		} finally {
			scramble(password);
			scramble(chars);
		}
	}

	@Override
	protected CharArrayPasswordEncoder createCharEncoder() {
		byte[] password = lookupPasswordFromKeyStore();
		char[] chars = toChars(password);

		byteEncrypter = new StandardPBEByteEncryptor();
		byteEncrypter.setPasswordCharArray(chars);

		if (getProviderName() != null && !getProviderName().isEmpty()) {
			byteEncrypter.setProviderName(getProviderName());
		}
		byteEncrypter.setAlgorithm(getAlgorithm());

		return new CharArrayPasswordEncoder() {
			@Override
			public boolean isPasswordValid(String encPass, char[] rawPass,
					Object salt) {
				byte[] decoded = Base64.getDecoder().decode(encPass.getBytes());
				byte[] decrypted = byteEncrypter.decrypt(decoded);

				char[] chars = toChars(decrypted);
				try {
					return Arrays.equals(chars, rawPass);
				} finally {
					scramble(decrypted);
					scramble(chars);
				}
			}

			@Override
			public String encodePassword(char[] rawPass, Object salt) {
				byte[] bytes = toBytes(rawPass);
				try {
					return new String(Base64.getEncoder().encode(byteEncrypter
							.encrypt(bytes)));
				} finally {
					scramble(bytes);
				}
			}
		};
	}

	byte[] lookupPasswordFromKeyStore() {
		try {
			if (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {
				throw new RuntimeException("Keystore: "
						+ keystoreProvider.getFile() + " does not"
						+ " contain alias: " + getKeyAliasInKeyStore());
			}
			return keystoreProvider.getSecretKey(getKeyAliasInKeyStore())
					.getEncoded();
		} catch (IOException e) {
			throw new RuntimeException("Cannot find alias: "
					+ getKeyAliasInKeyStore() + " in "
					+ keystoreProvider.getFile().getAbsolutePath());
		}
	}

	@Override
	public PasswordEncodingType getEncodingType() {
		return PasswordEncodingType.ENCRYPT;
	}

	public String decode(String encPass) throws UnsupportedOperationException {
		if (stringEncrypter == null) {
			// not initialized
			getStringEncoder();
		}

		return stringEncrypter.decrypt(removePrefix(encPass));
	}

	@Override
	public char[] decodeToCharArray(String encPass)
			throws UnsupportedOperationException {
		if (byteEncrypter == null) {
			// not initialized
			getCharEncoder();
		}

		byte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());
		byte[] bytes = byteEncrypter.decrypt(decoded);
		try {
			return toChars(bytes);
		} finally {
			scramble(bytes);
		}
	}
	
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
PBEPasswordEncoder encoder = new PBEPasswordEncoder();
```
```java
PBEPasswordEncoder encoder = new PBEPasswordEncoder();
```
```java
import org.jasypt.spring.security.PBEPasswordEncoder;
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Class org.jasypt.spring.security.PBEPasswordEncoder has been removed in the new version of the dependency.
     Constructor org.jasypt.spring.security3.PBEPasswordEncoder() has been removed in the new version of the dependency.
     Constructor org.jasypt.spring.security.PBEPasswordEncoder() has been removed in the new version of the dependency.
     Class org.jasypt.spring.security3.PBEPasswordEncoder has been removed in the new version of the dependency.
     Constructor org.jasypt.spring.security2.PBEPasswordEncoder() has been removed in the new version of the dependency.
     Class org.jasypt.spring.security2.PBEPasswordEncoder has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java:[102,3] error: cannot find symbol

[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java:[102,3] error: cannot find symbol

[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java:[33,33] error: package org.jasypt.spring.security does not exist
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
