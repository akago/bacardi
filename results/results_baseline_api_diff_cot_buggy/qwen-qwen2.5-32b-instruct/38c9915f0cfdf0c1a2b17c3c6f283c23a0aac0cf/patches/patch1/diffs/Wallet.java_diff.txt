29a30,33
> import org.cactoos.Func;
> import org.cactoos.FuncAsScalar;
> import org.cactoos.FuncOf;
> import org.cactoos.Scalar;
36,38d39
< import org.cactoos.scalar.CheckedScalar;
< import org.cactoos.scalar.Or;
< import org.cactoos.scalar.UncheckedScalar;
47,50c48,49
<  * @todo #16:30min Merge method should update transactions
<  *  in wallet's file and return concrete implementation not a fake one.
<  *  Beware that tests should be refactored to take care of file cleanup
<  *  after each case that merges wallets.
---
>  * @todo #16:30min Merge method should update transactions in wallet's file and return concrete implementation not a fake one.
>  * @todo #65:30min Implement key method. This should return the public RSA key of the wallet owner in Base64. Also add a unit test to replace WalletTest.keyIsNotYetImplemented().
70c69
<     void pay(long amt, long bnf) throws IOException;
---
>     void pay(long amt, final long bnf) throws IOException;
96,102c95
<      * @todo #65:30min Complete Wallet implementations with id, public RSA
<      *  key and network id. Wallets.create(Long, String, String) must
<      *  create a Wallet with these strings set and a constructor must be
<      *  added to all Walletl realizations (Wallet(final long id, final String
<      *  pubkey, final String network, final Transaction... transactions). After
<      *  completing these implementations fix tests that uses Wallets.create()
<      *  and all Wallet realizations.
---
>      * @todo #65:30min Complete Wallet implementations with id, public RSA key and network id. Also add a unit test to replace WalletTest.keyIsNotYetImplemented().
134c127
<          * Constructor.
---
>          * Ctor.
165,233d157
<         public Wallet merge(final Wallet other) {
<             return other;
<         }
< 
<         @Override
<         public Iterable<Transaction> ledger() {
<             return this.transactions;
<         }
< 
<         @Override
<         public String key() {
<             return Long.toString(this.id);
<         }
<     }
< 
<     /**
<      * Default File implementation.
<      * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)
<      */
<     final class File implements Wallet {
< 
<         /**
<          * Path of this wallet.
<          */
<         private final Path path;
< 
<         /**
<          * Ctor.
<          * @param path Path of wallet
<          */
<         File(final Path path) {
<             this.path = path;
<         }
< 
<         @Override
<         public long id() throws IOException {
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
<                     16
<                 ),
<                 e -> new IOException(e)
<             ).value();
<         }
< 
<         @Override
<         public void pay(final long amt, final long bnf) throws IOException {
<             try (final Writer out = new FileWriter(this.path.toFile(), true)) {
<                 out.write('\n');
<                 out.write(new CpTransaction(amt, bnf).toString());
<             }
<         }
< 
<         // @todo #16:30min Following transactions should be ignored according
<         //  to the whitepaper:
<         //  a) If the transaction is negative and its signature is not valid,
<         //  it is ignored;
<         //  b) If the transaction makes the balance of the wallet negative,
<         //  it is ignored;
<         //  c) If the transaction is positive and it’s absent in the paying
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
<         @Override
238c162
<                         new FormattedText(
---
>                         (new FormattedText(
249,256c173,180
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
---
>                     origin -> new FuncAsScalar<>(
>                         new FuncOf<>(
>                             () -> incoming.equals(origin)
>                                 || (incoming.id() == origin.id()
>                                     && incoming.bnf().equals(origin.bnf()))
>                                 || (incoming.id() == origin.id()
>                                     && incoming.amount() < 0L)
>                                 || incoming.prefix().equals(origin.prefix())
286,288c210
<         // @todo #54:30min Implement key method. This should return the
<         //  public RSA key of the wallet owner in Base64. Also add a unit test
<         //  to replace WalletTest.keyIsNotYetImplemented().
---
>         // @todo #65:30min Implement key method. This should return the public RSA key of the wallet owner in Base64. Also add a unit test to replace WalletTest.keyIsNotYetImplemented().
