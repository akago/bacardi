10c10,11
< import com.redislabs.redisgraph.impl.resultset.ResultSetImpl;
---
> import com.redislabs.redisgraph.impl.transaction.RedisGraphTransaction;
> import com.redislabs.redisgraph.impl.transaction.RedisGraphPipeline;
12d12
< import redis.clients.jedis.Client;
14,15c14,18
< import redis.clients.jedis.exceptions.JedisDataException;
< import redis.clients.jedis.util.SafeEncoder;
---
> import redis.clients.jedis.JedisException;
> import redis.clients.jedis.Pipeline;
> import redis.clients.jedis.Transaction;
> 
> import com.redislabs.redisgraph.impl.resultset.ResultSetImpl;
17,20d19
< /**
<  * An implementation of RedisGraphContext. Allows sending RedisGraph and some Redis commands,
<  * within a specific connection context
<  */
26,29d24
<     /**
<      * Generates a new instance with a specific Jedis connection
<      * @param connectionContext
<      */
34,37d28
<     /**
<      * Overrides the abstract method. Return the instance only connection
<      * @return
<      */
43,48d33
<     /**
<      * Sends the query over the instance only connection
<      * @param graphId graph to be queried
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
58c43
<         } catch (JedisDataException j) {
---
>         } catch (JedisException j) {
63,68d47
<     /**
<      * Sends the read-only query over the instance only connection
<      * @param graphId graph to be queried
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
78c57
<         } catch (JedisDataException de) {
---
>         } catch (JedisException de) {
83,89d61
<     /**
<      * Sends the query over the instance only connection
<      * @param graphId graph to be queried
<      * @param timeout
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
98,101c70,72
<         } catch (JRedisGraphException rt) {
<             throw rt;
<         } catch (JedisDataException j) {
<             throw new JRedisGraphException(j);
---
>         } catch (Exception e) {
>             conn.close();
>             throw e;
105,111d75
<     /**
<      * Sends the read-only query over the instance only connection
<      * @param graphId graph to be queried
<      * @param timeout
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
122c86
<         } catch (JedisDataException de) {
---
>         } catch (JedisException de) {
127,129d90
<     /**
<      * @return Returns the instance Jedis connection.
<      */
131,132c92,98
<     public Jedis getConnectionContext() {
<         return this.connectionContext;
---
>     public String watch(String... keys) {
>         return this.getConnection().watch(keys);
>     }
> 
>     @Override
>     public String unwatch() {
>         return this.getConnection().unwatch();
135,138d100
<     /**
<      * Creates a new RedisGraphTransaction transactional object
<      * @return new RedisGraphTransaction
<      */
142,145c104,105
<         Client client = jedis.getClient();
<         client.multi();
<         client.getOne();
<         RedisGraphTransaction transaction = new RedisGraphTransaction(client, this);
---
>         Pipeline pipeline = jedis.pipelined();
>         RedisGraphTransaction transaction = new RedisGraphTransaction(pipeline, this);
150,153d109
<     /**
<      * Creates a new RedisGraphPipeline pipeline object
<      * @return new RedisGraphPipeline
<      */
157,160c113,116
<         Client client = jedis.getClient();
<         RedisGraphPipeline pipeline = new RedisGraphPipeline(client, this);
<         pipeline.setRedisGraphCaches(caches);
<         return pipeline;
---
>         Pipeline pipeline = jedis.pipelined();
>         RedisGraphPipeline pipelineObj = new RedisGraphPipeline(pipeline, this);
>         pipelineObj.setRedisGraphCaches(caches);
>         return pipelineObj;
163,204d118
<     /**
<      * Perfrom watch over given Redis keys
<      * @param keys
<      * @return "OK"
<      */
<     @Override
<     public String watch(String... keys) {
<         return this.getConnection().watch(keys);
<     }
< 
<     /**
<      * Removes watch from all keys
<      * @return
<      */
<     @Override
<     public String unwatch() {
<         return this.getConnection().unwatch();
<     }
< 
<     /**
<      * Deletes the entire graph
<      * @param graphId graph to delete
<      * @return delete running time statistics
<      */
<     @Override
<     public String deleteGraph(String graphId) {
<         Jedis conn = getConnection();
<         Object response;
<         try {
<             response = conn.sendCommand(RedisGraphCommand.DELETE, graphId);
<         } catch (Exception e) {
<             conn.close();
<             throw e;
<         }
<         //clear local state
<         caches.removeGraphCache(graphId);
<         return SafeEncoder.encode((byte[]) response);
<     }
< 
<     /**
<      * closes the Jedis connection
<      */
208d121
< 
