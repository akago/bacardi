4,11c4,7
< import redis.clients.jedis.commands.BasicRedisPipeline;
< import redis.clients.jedis.commands.BinaryRedisPipeline;
< import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
< import redis.clients.jedis.commands.ClusterPipeline;
< import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
< import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
< import redis.clients.jedis.commands.RedisPipeline;
< import redis.clients.jedis.commands.ScriptingCommandsPipeline;
---
> import redis.clients.jedis.exceptions.JedisException;
> import redis.clients.jedis.params.ScanParams;
> import redis.clients.jedis.resps.ScanResult;
> import redis.clients.jedis.util.SafeEncoder;
20,24c16
< public interface RedisGraphPipeline extends
<         MultiKeyBinaryRedisPipeline,
<         MultiKeyCommandsPipeline, ClusterPipeline,
<         BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
<         BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
---
> public interface RedisGraphPipeline extends Closeable {
44,45c36,37
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
---
>      * @param graphId a graph to perform the query on.
>      * @param query Cypher query.
52,54c44,46
<      * Execute a Cypher read-only query with timeout.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
---
>      * Executes a cypher read-only query with timeout.
>      * @param graphId a graph to perform the query on.
>      * @param query Cypher query.
132d123
<     
146,147c137
<     public void sync();
<     
---
>     void sync();
151,152c141
<      * at least the specified number of replicas. If the timeout, specified in milliseconds, is
<      * reached, the command returns even if the specified number of replicas were not yet reached.
---
>      * at least the specified number of replicas.
159c148
<     public Response<Long> waitReplicas(int replicas, long timeout);
---
>     Response<Long> waitReplicas(int replicas, long timeout);
