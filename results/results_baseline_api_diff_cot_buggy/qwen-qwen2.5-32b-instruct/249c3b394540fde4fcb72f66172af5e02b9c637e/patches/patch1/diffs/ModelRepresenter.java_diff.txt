16a17
> import org.yaml.snakeyaml.introspector.BeanAccess;
17a19
> import org.yaml.snakeyaml.introspector.PropertyUtils;
46a49,101
>   protected Set<Property> getProperties(Class<? extends Object> type) throws IntrospectionException {
>     if (type.isAssignableFrom(Model.class)) {
>       return sortTypeWithOrder(type, ORDER_MODEL);
>     } else if (type.isAssignableFrom(Developer.class)) {
>       return sortTypeWithOrder(type, ORDER_DEVELOPER);
>     } else if (type.isAssignableFrom(Contributor.class)) {
>       return sortTypeWithOrder(type, ORDER_CONTRIBUTOR);
>     } else if (type.isAssignableFrom(Dependency.class)) {
>       return sortTypeWithOrder(type, ORDER_DEPENDENCY);
>     } else if (type.isAssignableFrom(Plugin.class)) {
>       return sortTypeWithOrder(type, ORDER_PLUGIN);
>     } else {
>       return PropertyUtils.getProperties(type, BeanAccess.FIELD);
>     }
>   }
> 
>   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order)
>           throws IntrospectionException {
>     Set<Property> standard = PropertyUtils.getProperties(type, BeanAccess.FIELD);
>     Set<Property> sorted = new TreeSet<>(new ModelPropertyComparator(order));
>     sorted.addAll(standard);
>     return sorted;
>   }
> 
>   private class ModelPropertyComparator implements Comparator<Property> {
>     private List<String> names;
> 
>     public ModelPropertyComparator(List<String> names) {
>       this.names = names;
>     }
> 
>     public int compare(Property o1, Property o2) {
>       // important go first
>       for (String name : names) {
>         int c = compareByName(o1, o2, name);
>         if (c != 0) {
>           return c;
>         }
>       }
>       // all the rest
>       return o1.compareTo(o2);
>     }
> 
>     private int compareByName(Property o1, Property o2, String name) {
>       if (o1.getName().equals(name)) {
>         return -1;
>       } else if (o2.getName().equals(name)) {
>         return 1;
>       }
>       return 0;// compare further
>     }
>   }
> 
94d148
< 
108d161
<         String childName = child.getName();
111,112c164,165
<         int childNameLength = childName.length();
<         if ("reportPlugins".equals(childName)) {
---
>         int childNameLength = child.getName().length();
>         if ("reportPlugins".equals(child.getName())) {
114,117c167,170
<         } else if (childNameLength > 3 && childName.endsWith("ies")) {
<           singularName = childName.substring(0, childNameLength - 3);
<         } else if (childNameLength > 1 && childName.endsWith("s")) {
<           singularName = childName.substring(0, childNameLength - 1);
---
>         } else if (childNameLength > 3 && child.getName().endsWith("ies")) {
>           singularName = child.getName().substring(0, childNameLength - 3);
>         } else if (childNameLength > 1 && child.getName().endsWith("s")) {
>           singularName = child.getName().substring(0, childNameLength - 1);
135c188
<         map.put(childName, childValue);
---
>         map.put(child.getName(), childValue);
169,170c222
<   //TODO move to polyglot-common, or to org.apache.maven:maven-model
<   private static List<String> ORDER_MODEL = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_MODEL = new ArrayList<>(Arrays.asList(
204c256
<   private static List<String> ORDER_DEVELOPER = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEVELOPER = new ArrayList<>(Arrays.asList(
206c258
<   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<>(Arrays.asList(
208c260
<   private static List<String> ORDER_DEPENDENCY = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEPENDENCY = new ArrayList<>(Arrays.asList(
210c262
<   private static List<String> ORDER_PLUGIN = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_PLUGIN = new ArrayList<>(Arrays.asList(
213,270d264
< 
<   /*
<    * Change the default order. Important data goes first.
<    */
<   @Override
<   protected Set<Property> getProperties(Class<? extends Object> type)
<           throws IntrospectionException {
<     if (type.isAssignableFrom(Model.class)) {
<       return sortTypeWithOrder(type, ORDER_MODEL);
<     } else if (type.isAssignableFrom(Developer.class)) {
<       return sortTypeWithOrder(type, ORDER_DEVELOPER);
<     } else if (type.isAssignableFrom(Contributor.class)) {
<       return sortTypeWithOrder(type, ORDER_CONTRIBUTOR);
<     }  else if (type.isAssignableFrom(Dependency.class)) {
<       return sortTypeWithOrder(type, ORDER_DEPENDENCY);
<     }  else if (type.isAssignableFrom(Plugin.class)) {
<       return sortTypeWithOrder(type, ORDER_PLUGIN);
<     } else {
<       return super.getProperties(type);
<     }
<   }
< 
<   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order)
<           throws IntrospectionException {
<       Set<Property> standard = super.getProperties(type);
<       Set<Property> sorted = new TreeSet<Property>(new ModelPropertyComparator(order));
<       sorted.addAll(standard);
<       return sorted;
<   }
< 
<   private class ModelPropertyComparator implements Comparator<Property> {
<     private List<String> names;
< 
<     public ModelPropertyComparator(List<String> names) {
<       this.names = names;
<     }
< 
<     public int compare(Property o1, Property o2) {
<       // important go first
<       for (String name : names) {
<         int c = compareByName(o1, o2, name);
<         if (c != 0) {
<           return c;
<         }
<       }
<       // all the rest
<       return o1.compareTo(o2);
<     }
< 
<     private int compareByName(Property o1, Property o2, String name) {
<       if (o1.getName().equals(name)) {
<         return -1;
<       } else if (o2.getName().equals(name)) {
<         return 1;
<       }
<       return 0;// compare further
<     }
<   }
