35,40d34
< /**
<  * This is the core class of the {@code Snmpman}. The agent simulates the SNMP-capable devices.
<  * <br>
<  * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which
<  * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.
<  */
44,46d37
<     /**
<      * The default charset for files being read.
<      */
48,56c39
< 
<     /**
<      * The pattern of variable bindings in a walk file.
<      */
<     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$))");
< 
<     /**
<      * The configuration of this agent.
<      */
---
>     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$)");
58,61d40
< 
<     /**
<      * The list of managed object groups.
<      */
64,68d42
<     /**
<      * Initializes a new instance of an SNMP agent.
<      *
<      * @param configuration the configuration for this agent
<      */
75,81d48
<     /**
<      * Returns the name of {@code this} agent.
<      * <br>
<      * See {@code AgentConfiguration.name} for more information on the return value.
<      *
<      * @return the name of {@code this} agent.
<      */
86,92d52
<     /**
<      * Returns the boot-counter file for the specified agent.
<      * <p>
<      * This file will be created in the same directory as the {@link com.oneandone.snmpman.configuration.AgentConfiguration#getWalk()} file.
<      *
<      * @return the boot-counter file
<      */
97,103d56
<     /**
<      * Returns the configuration file for the specified agent.
<      * <p>
<      * This file will be created in the same directory as the {@link com.oneandone.snmpman.configuration.AgentConfiguration#getWalk()} file.
<      *
<      * @return the configuration file
<      */
108,113d60
<     /**
<      * Translates a string into {@code x-www-form-urlencoded} format. The method uses the <i>UTF-8</i> encoding scheme.
<      *
<      * @param string {@code String} to be translated
<      * @return the translated {@code String}
<      */
123,128d69
<     /**
<      * Returns the root OIDs of the bindings.
<      *
<      * @param bindings the variable bindings
<      * @return the roots of the specified variable bindings
<      */
150c91
<         potentialRoots.stream().filter(potentialRoot -> potentialRoot.size() > 0).forEach(potentialRoot -> {
---
>         potentialRoots.forEach(potentialRoot -> {
164,171d104
<     /**
<      * Returns a {@link Variable} instance for the specified parameters.
<      *
<      * @param type  the type of the variable
<      * @param value the value of this variable
<      * @return a a {@link Variable} instance with the specified type and value
<      * @throws IllegalArgumentException if the type could not be mapped to a {@link Variable} implementation
<      */
174d106
<             // TODO add "BITS" support
198d129
<                 // Parse unsigned long
211,215d141
<     /**
<      * Starts this agent instance.
<      *
<      * @throws IOException signals that this agent could not be initialized by the {@link #init()} method
<      */
222d147
<         // configure community index contexts
259,260d183
<                 final OctetString context = new OctetString(String.valueOf(vlan));
< 
265c188
<                     DefaultMOContextScope scope = new DefaultMOContextScope(context, root, true, root.nextPeer(), false);
---
>                     DefaultMOContextScope scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), root, true, root.nextPeer(), false);
270c193
<                             scope = new DefaultMOContextScope(context, variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
---
>                             scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
276c199
<                                 registerGroupAndContext(group, context);
---
>                                 registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
281c204
<                         registerGroupAndContext(group, context);
---
>                         registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
303,305d225
<     /**
<      * Creates the {@link StaticMOGroup} with all information necessary to register it to the server.
<      */
324,330d243
<     /**
<      * Creates a list of {@link VariableBinding} out of a mapping of {@link OID} and {@link Variable}.
<      *
<      * @param variableBindings mapping of {@link OID} and {@link Variable}.
<      * @param root             root SNMP OID.
<      * @return list of {@link VariableBinding}.
<      */
337,341d249
<     /**
<      * Registers a {@link ManagedObject} to the server with an empty {@link OctetString} community context.
<      *
<      * @param group {@link ManagedObject} to register.
<      */
347,352d254
<     /**
<      * Registers a {@link ManagedObject} to the server with a {@link OctetString} community context.
<      *
<      * @param group   {@link ManagedObject} to register.
<      * @param context community context.
<      */
378,384d279
<     /**
<      * Sets the private registry value of {@link DefaultMOServer} via reflection.
<      * FIXME
<      * If there is any possibility to avoid this, then replace!
<      *
<      * @param group {@link ManagedObject} to register.
<      */
389c284
<             final SortedMap<MOScope, ManagedObject> reg = server.getRegistry();
---
>             final SortedMap<MOScope, ManagedObject<?>> reg = server.getRegistry();
398,403d292
<     /**
<      * Reads all variable bindings using {@link #VARIABLE_BINDING_PATTERN}.
<      *
<      * @param reader the reader to read the bindings from.
<      * @return the map of oid to variable binding.
<      */
432,436d320
<     /**
<      * Unregisters all default managed objects in the specified context {@code ctx}.
<      *
<      * @param ctx the context from which all default managed objects should be unregistred
<      */
446,455d329
<     /**
<      * Returns the variable bindings for a device configuration and a list of bindings.
<      * <p>
<      * In this step the {@link ModifiedVariable} instances will be created as a wrapper for dynamic variables.
<      *
<      * @param device   the device configuration
<      * @param bindings the bindings as the base
<      * @return the variable bindings for the specified device configuration
<      */
<     @SuppressWarnings("unchecked")
516d389
<         // configure community index contexts
529,530c402,403
<         vacmMIB.addViewTreeFamily(new OctetString("fullWriteView"), new OID("1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("fullNotifyView"), new OID("1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
---
>         vacmMIB.addViewTreeFamily(new OctetString("fullWriteView"), new OID("1"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("fullNotifyView"), new OID("1"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
532,550c405,413
<         vacmMIB.addViewTreeFamily(new OctetString("restrictedReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("restrictedWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.6.3.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
< 
<         vacmMIB.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2.1.1"), new OctetString(), VacmMIB.vacmViewExcluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("testWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<         vacmMIB.addViewTreeFamily(new OctetString("testNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
<     }
< 
<     @Override
<     protected void addCommunities(final SnmpCommunityMIB snmpCommunityMIB) {
<         log.trace("adding communities {} for agent \"{}\"", snmpCommunityMIB.toString(), configuration.getName());
<         // configure community index contexts
<         for (final Long vlan : configuration.getDevice().getVlans()) {
<             configureSnmpCommunity(snmpCommunityMIB, vlan);
<         }
<         configureSnmpCommunity(snmpCommunityMIB, null);
---
>         vacmMIB.addViewTreeFamily(new OctetString("restrictedReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("restrictedWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.6.3.1"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
> 
>         vacmMIB.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2.1.1"), new OctetString(), VacmMib.vacmViewExcluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("testWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMIB.addViewTreeFamily(new OctetString("testNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMib.vacmViewIncluded, StorageType.nonVolatile);
553,558d415
<     /**
<      * Configures an SNMP community for a given SNMP community context.
<      *
<      * @param snmpCommunityMIB SNMP community.
<      * @param context          SNMP community context.
<      */
