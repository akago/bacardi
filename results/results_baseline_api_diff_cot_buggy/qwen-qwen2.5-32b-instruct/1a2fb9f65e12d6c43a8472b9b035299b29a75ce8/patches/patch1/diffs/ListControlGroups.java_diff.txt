37,43c37,43
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.Validator;
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
61c61
<         private Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();
---
>         private Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>>();
64c64
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
119,120d118
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
144a143
>                         );
153c152
<                                         Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
---
>                                         Class<? extends AbstractControlGroup> typesControlGroup = getControlGroupByType(objectProperty.type);
164,165d162
< 
< 
210,213c207,209
<         @SuppressWarnings("unchecked")
<         public IModel<T> getModel(){
<                 return (IModel<T>) getDefaultModel();
<         }
---
>         @SuppressWarnings("rawtypes")
>         private Set<String> getPropertiesByOrder(Class<?> modelClass) {
>                 Set<String> properties = new LinkedHashSet<String>();
215,216c211,213
<         public Component getResourceBase(){
<                 return this;
---
>                 for(String property : entitySettings.getOrderOfFields()){
>                         if(!entitySettings.getHiddenFields().contains(property))
>                                 properties.add(property);
218,220c215,219
< 
<         public Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){
<                 return Collections.unmodifiableMap(fieldComponents);
---
>                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
>                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
>                            !properties.contains(descriptor.getName()) &&
>                            !descriptor.getName().equals("class"))
>                                 properties.add(descriptor.getName());
223,228c222
<         @SuppressWarnings("rawtypes")
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
<                 }
<                 return null;
---
>                 return properties;
230a225
>         @SuppressWarnings("rawtypes")
