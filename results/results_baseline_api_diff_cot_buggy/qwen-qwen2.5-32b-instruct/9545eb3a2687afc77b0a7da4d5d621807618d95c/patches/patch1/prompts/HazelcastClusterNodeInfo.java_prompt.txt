You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/*
 * Copyright (C) 1999-2009 Jive Software. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jivesoftware.openfire.plugin.util.cluster;

import org.jivesoftware.openfire.cluster.ClusterManager;
import org.jivesoftware.openfire.cluster.ClusterNodeInfo;
import org.jivesoftware.openfire.cluster.NodeID;
import org.jivesoftware.openfire.plugin.util.cache.ClusteredCacheFactory;

import com.hazelcast.core.Member;

/**
 * Cluster Node information as provided by Hazelcast.
 *
 * @author Tom Evans
 * @author Gaston Dombiak
 */
public class HazelcastClusterNodeInfo implements ClusterNodeInfo {

    public static final String HOST_NAME_ATTRIBUTE = "hostname";
    public static final String NODE_ID_ATTRIBUTE = "node-id";
    private final String hostname;
    private final NodeID nodeID;
    private final long joinedTime;
    private final boolean seniorMember;

    public HazelcastClusterNodeInfo(final Member member, final long joinedTime) {
        this.hostname = member.getStringAttribute(HOST_NAME_ATTRIBUTE) + " (" + member.getSocketAddress().getHostString() + ")";
        this.nodeID = ClusteredCacheFactory.getNodeID(member);
        this.joinedTime = joinedTime;
        this.seniorMember = ClusterManager.getSeniorClusterMember().equals(nodeID);
    }

    public String getHostName() {
        return hostname;
    }

    public NodeID getNodeID() {
        return nodeID;
    }

    public long getJoinedTime() {
        return joinedTime;
    }

    public boolean isSeniorMember() {
        return seniorMember;
    }
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
public HazelcastClusterNodeInfo(final Member member, final long joinedTime) {
```
```java
import com.hazelcast.core.Member;
```
```java
public HazelcastClusterNodeInfo(final Member member, final long joinedTime) {
```
```java
public HazelcastClusterNodeInfo(final Member member, final long joinedTime) {
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Method com.hazelcast.config.MemberAttributeConfig.getStringAttribute(java.lang.String) has been removed in the new version of the dependency.
     Method com.hazelcast.instance.MemberImpl.getStringAttribute(java.lang.String) has been removed in the new version of the dependency.
     Method com.hazelcast.client.impl.MemberImpl.getStringAttribute(java.lang.String) has been removed in the new version of the dependency.
     Method com.hazelcast.core.Member.getStringAttribute(java.lang.String) has been removed in the new version of the dependency.
     Class com.hazelcast.core.Member has been removed in the new version of the dependency.
     Interface com.hazelcast.cluster.Member has been added in the new version of the dependency.
     Method com.hazelcast.instance.AbstractMember.getSocketAddress() has been removed in the new version of the dependency.
     Method com.hazelcast.core.Endpoint.getSocketAddress() has been removed in the new version of the dependency.
     Method com.hazelcast.core.Client.getSocketAddress() has been removed in the new version of the dependency.
     Method com.hazelcast.client.Client.getSocketAddress() has been added in the new version of the dependency.
     Method com.hazelcast.core.Member.getSocketAddress() has been removed in the new version of the dependency.
     Method com.hazelcast.cluster.Member.getSocketAddress() has been added in the new version of the dependency.
     Method com.hazelcast.cluster.Endpoint.getSocketAddress() has been added in the new version of the dependency.
     Method com.hazelcast.cp.internal.CPMemberInfo.getSocketAddress() has been removed in the new version of the dependency.
     Method com.hazelcast.cluster.impl.AbstractMember.getSocketAddress(com.hazelcast.instance.EndpointQualifier) has been added in the new version of the dependency.
     Method com.hazelcast.cluster.impl.AbstractMember.getSocketAddress() has been added in the new version of the dependency.
     Method com.hazelcast.cluster.Member.getSocketAddress(com.hazelcast.instance.EndpointQualifier) has been added in the new version of the dependency.
     Method com.hazelcast.instance.AbstractMember.getSocketAddress(com.hazelcast.instance.EndpointQualifier) has been removed in the new version of the dependency.
     Method com.hazelcast.core.Member.getSocketAddress(com.hazelcast.instance.EndpointQualifier) has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /openfire-hazelcast-plugin/src/java/org/jivesoftware/openfire/plugin/util/cluster/HazelcastClusterNodeInfo.java:[41,43] cannot find symbol
  symbol:   class Member
  location: class org.jivesoftware.openfire.plugin.util.cluster.HazelcastClusterNodeInfo

[ERROR] /openfire-hazelcast-plugin/src/java/org/jivesoftware/openfire/plugin/util/cluster/HazelcastClusterNodeInfo.java:[24,26] cannot find symbol
  symbol:   class Member
  location: package com.hazelcast.core

[ERROR] /openfire-hazelcast-plugin/src/java/org/jivesoftware/openfire/plugin/util/cluster/HazelcastClusterNodeInfo.java:[41,43] cannot find symbol
  symbol:   class Member
  location: class org.jivesoftware.openfire.plugin.util.cluster.HazelcastClusterNodeInfo

[ERROR] /openfire-hazelcast-plugin/src/java/org/jivesoftware/openfire/plugin/util/cluster/HazelcastClusterNodeInfo.java:[41,43] cannot find symbol
  symbol:   class Member
  location: class org.jivesoftware.openfire.plugin.util.cluster.HazelcastClusterNodeInfo
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
