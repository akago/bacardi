18a19,21
> import com.hazelcast.cluster.Cluster;
> import com.hazelcast.cluster.Member;
> import com.hazelcast.cluster.MemberSelector;
27d29
< import com.hazelcast.core.Cluster;
30d31
< import com.hazelcast.core.Member;
51c52
< import org.slf4j.LoggerFactory;
---
> import org.slf4j.LoggerFactoryFactory;
191c192
<                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false));
---
>                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false);
265,266c266,358
<         // Check if cluster is being started up
<         while (state == State.starting) {
---
>         if (!caches.isEmpty() && cluster != null) {
>             // Set the serialization strategy to use for transmittinging objects between node clusters
>             serializationStrategy = ExternalizableUtil.getInstance().getStrategy();
>             ExternalizableUtil.getInstance().setStrategy(new ClusterExternalizableUtil());
> 
>             // Store previous class loader (in case we change it)
>             final ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();
>             final ClassLoader loader = new ClusterClassLoader();
>             Thread.currentThread().setContextClassLoader(loader);
>             int retry = 0;
>             do {
>                 try {
>                     final Config config = new ClasspathXmlConfig(HAZELCAST_CONFIG_FILE.getValue());
>                     final NetworkConfig networkConfig = config.getNetworkConfig();
>                     if (!HAZELCAST_MEMCACHE_ENABLED.getValue()) {
>                         networkConfig.setMemcacheProtocolConfig(new MemcacheProtocolConfig().setEnabled(false));
>                     }
>                     if (!HAZELCAST_REST_ENABLED.getValue()) {
>                         networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false);
>                     }
>                     final MemberAttributeConfig memberAttributeConfig = config.getMemberAttributeConfig();
>                     memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE, XMPPServer.getInstance().getServerInfo().getHostname());
>                     memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE, XMPPServer.getInstance().getNodeID().toString());
>                     config.setInstanceName("openfire");
>                     config.setClassLoader(loader);
>                     if (JMXManager.isEnabled() && HAZELCAST_JMX_ENABLED.getValue()) {
>                         config.setProperty("hazelcast.jmx", "true");
>                         config.setProperty("hazelcast.jmx.detailed", "true");
>                     }
>                     hazelcast = Hazelcast.newHazelcastInstance(config);
>                     cluster = hazelcast.getCluster();
>                     state = State.started;
>                     // CacheFactory is now using clustered caches. We can add our listeners.
>                     clusterListener = new ClusterListener(cluster);
>                     clusterListener.joinCluster();
>                     lifecycleListener = hazelcast.getLifecycleService().addLifecycleListener(clusterListener);
>                     membershipListener = cluster.addMembershipListener(clusterListener);
>                     logger.info("Hazelcast clustering started");
>                     break;
>                 } catch (final Exception e) {
>                     cluster = null;
>                     if (retry < CLUSTER_STARTUP_RETRY_COUNT.getValue()) {
>                         logger.warn("Failed to start clustering (" + e.getMessage() + "); " +
>                             "will retry in " + StringUtils.getFullElapsedTime(CLUSTER_STARTUP_RETRY_TIME.getValue()));
>                         try {
>                             Thread.sleep(CLUSTER_STARTUP_RETRY_TIME.getValue().toMillis());
>                         } catch (final InterruptedException ignored) {
>                             Thread.currentThread().interrupt();
>                         }
>                     } else {
>                         logger.error("Unable to start clustering - continuing in local mode", e);
>                         state = State.stopped;
>                     }
>                 }
>             } while (retry++ < CLUSTER_STARTUP_RETRY_COUNT.getValue() && !Thread.currentThread().isInterrupted());
> 
>         if (oldLoader != null) {
>             // Restore previous class loader
>             Thread.currentThread().setContextClassLoader(oldLoader);
>         }
>         return cluster != null;
>     }
> 
>     @Override
>     public void stopCluster() {
>         // Stop the cache services.
>         cacheStats = null;
>         // Update the running state of the cluster
>         state = State.stopped;
> 
>         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
>         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
>         fireLeftClusterAndWaitToComplete(Duration.ofSeconds(30));
>         // Stop the cluster
>         hazelcast.getLifecycleService().removeLifecycleListener(lifecycleListener);
>         cluster.removeMembershipListener(membershipListener);
>         Hazelcast.shutdownAll();
>         cluster = null;
>         lifecycleListener = null;
>         membershipListener = null;
>         clusterListener = null;
> 
>         // Reset packet router to use to deliver packets to remote cluster nodes
>         XMPPServer.getInstance().getRoutingTable().setRemotePacketRouter(null);
>         // Reset the session locator to use
>         XMPPServer.getInstance().setRemoteSessionLocator(null);
>         // Set the old serialization strategy was using before clustering was loaded
>         ExternalizableUtil.getInstance().setStrategy(serializationStrategy);
>     }
> 
>     @Override
>     public Cache createCache(final String name) {
>         if (state == State.starting) {
281c373
<         final long openfireMaxCacheSizeInBytes = CacheFactory.getMaxCacheSize(name);
---
>         final long openfireMaxCacheSizeInBytes = CacheFactory.maxCacheSize(name);
288c380
<             dynamicConfig.setMaxSizeConfig(new MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE));
---
>             dynamicConfig.setMaxSizeConfig(new MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE);
295c387
<         @SuppressWarnings("unchecked") final ClusteredCache clusteredCache = new ClusteredCache(name, hazelcast.getMap(name));
---
>         @SuppressWarnings("unchecked") final ClusteredCache clusteredCache = new ClusteredCache(name, hazelcast.getMap(name);
341c433
<             return getNodeID(cluster.getLocalMember()).toByteArray();
---
>             return nodeID(cluster.getLocalMember()).toByteArray();
378d469
< 
407c498
<             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8));
---
>             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8);
424c515
<         final Member current = cluster.getLocalMember();
---
>         final Member current = cluster.localMember();
426c517
<             if (includeLocalMember || (!member.getUuid().equals(current.getUuid()))) {
---
>             if (includeLocalMember || (!member.getUuid().equals(current.getUuid())) {
440c531
<                     result.add(future.get(nanosLeft, TimeUnit.NANOSECONDS));
---
>                     result.add(future.get(nanosLeft, TimeUnit.NANOSECONDS);
481c572
<             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8));
---
>             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8);
504c595
<             if (memberToFind.equals(getNodeID(member))) {
---
>             if (memberToFind.equals(nodeID(member)) {
518c609
<             final String uid = getNodeID(cluster.getLocalMember()).toString();
---
>             final String uid = nodeID(cluster.localMember()).toString();
527c618
<                 info[1] = cache.getMaxCacheSize();
---
>                 info[1] = cache.maxCacheSize();
564,565c655
<             && !pluginClassLoaderWarnings.containsKey(o.getClass().getName()) )
<         {
---
>             && !pluginClassLoaderWarnings.containsKey(o.getClass().getName()) {
583c673
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().name(), Instant.now()); // Note that this Instant is unused.
614c704
<             return cache.lock(key, unit.toMillis(time));
---
>             return cache.lock(key, unit.toMillis(time);
640c730
<                 logger.trace("CallableTask[{}] result: {}", task.getClass().getName(), task.getResult());
---
>                 logger.trace("CallableTask[{}] result: {}", task.getClass().name(), task.getResult());
643c733
<                 logger.error("Unexpected exception running CallableTask[{}]", task.getClass().getName(), e);
---
>                 logger.error("Unexpected exception running CallableTask[{}]", task.getClass().name(), e);
655,656c745,746
<     public static NodeID getNodeID(final Member member) {
<         return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
---
>     public static NodeID nodeID(final Member member) {
>         return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE).getBytes(StandardCharsets.UTF_8);
687c777
<             logger.debug("Firing leftCluster() event");
---
>             logger.debug("Firinging leftCluster() event";
689c779
<             logger.debug("Waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout));
---
>             logger.debug("Waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout);
691c781
<                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout));
---
>                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout);
699d788
< 
701,703d789
< 
< 
< 
