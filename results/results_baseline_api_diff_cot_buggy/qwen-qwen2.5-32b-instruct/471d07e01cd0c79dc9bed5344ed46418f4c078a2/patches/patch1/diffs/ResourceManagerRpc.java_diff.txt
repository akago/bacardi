19,22c19,22
< import com.google.api.services.cloudresourcemanager.model.Constraint;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Constraint;
> import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
> import com.google.api.services.cloudresourcemanager.v3.model.Project;
75,78d74
<     public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {
<       return new ListResult<>(pageToken, list);
<     }
< 
148,149c144
<    * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to
<    * whether or not the user has the permission in the same position of input list.
---
>    * Tests whether the caller has the given permissions. Returns the permissions and their results.
153c148,149
<   List<Boolean> testPermissions(String projectId, List<String> permissions);
---
>   Map<String, Boolean> testPermissions(String projectId, List<String> permissions)
>       throws IOException;
156,157c152
<    * Tests whether the caller has the given permissions on the specified Organization. Returns the
<    * permissions and their results.
---
>    * Lists all the Constraints that can be applied on the specified resource.
161c156
<   Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)
---
>   ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)
164,167c159,164
<   // TODO(ajaykannan): implement "Organization" functionality when available (issue #319)
< 
<   /** Clears the Policy from a resource. */
<   void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
---
>   /**
>    * Lists all the Policies set for a particular resource.
>    *
>    * @throws ResourceManagerException upon failure
>    */
>   ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;
173,174c170
<    * not have an etag set because it is a computed Policy across multiple resources. Subtrees of
<    * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
---
>    * not have an etag set because it is a computed Policy across multiple resources.
184,185c180
<    * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with
<    * projects.setOrgPolicy() to create or update a Policy during read-modify-write.
---
>    * POLICY_TYPE_NOT_SET for the policy_type oneof.
192c187,188
<    * Lists all the Constraints that can be applied on the specified resource.
---
>    * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the
>    * resource if one does not exist.
194,200c190
<    * @throws ResourceManagerException upon failure
<    */
<   ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)
<       throws IOException;
< 
<   /**
<    * Lists all the Policies set for a particular resource.
---
>    * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.
204c194
<   ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;
---
>   OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
207,210c197
<    * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the
<    * resource if one does not exist.
<    *
<    * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.
---
>    * Clears the Policy from a resource.
214c201
<   OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
---
>   void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
