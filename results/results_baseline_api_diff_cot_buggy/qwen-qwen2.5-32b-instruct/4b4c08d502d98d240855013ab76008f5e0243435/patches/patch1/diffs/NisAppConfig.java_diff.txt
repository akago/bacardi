3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,120
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(new Location[]{new Location(prop.getProperty("flyway.locations"))});
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(configuration);
>         }
> 
>         @Bean(initMethod = "migrate")
>         public Flyway flywayInstance() throws IOException {
>                 return flyway();
117d123
<         @DependsOn("flyway")
196a203,216
>         // region mappers
> 
>         @Bean
>         public BlockChainUpdater blockChainUpdater() {
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public BlockChainContextFactory blockChainContextFactory() {
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
>                                 this.unconfirmedTransactions());
>         }
> 
256a277,282
>                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),
>                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
>                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
> 
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
314c340
<                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
---
>                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)
