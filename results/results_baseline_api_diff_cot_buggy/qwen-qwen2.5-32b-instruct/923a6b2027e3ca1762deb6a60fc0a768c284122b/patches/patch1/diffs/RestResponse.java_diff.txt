1,29d0
< /*
<  * Copyright (c) 2011-2017, jcabi.com
<  * All rights reserved.
<  *
<  * Redistribution and use in source and binary forms, with or without
<  * modification, are permitted provided that the following conditions
<  * are met: 1) Redistributions of source code must retain the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer. 2) Redistributions in binary form must reproduce the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer in the documentation and/or other materials provided
<  * with the distribution. 3) Neither the name of the jcabi.com nor
<  * the names of its contributors may be used to endorse or promote
<  * products derived from this software without specific prior written
<  * permission.
<  *
<  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
<  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
<  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
<  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
<  * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
<  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
<  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
<  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
<  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
<  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
<  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
<  * OF THE POSSIBILITY OF SUCH DAMAGE.
<  */
48d18
< import org.hamcrest.Matchers;
54c24
<  * HTTP response and manipulate with it afterwords, for example:
---
>  * HTTP response and manipulate with it afterwards, for example:
103c73
<      * @return The same object
---
>      * @return This object
114,115c84,89
<             this,
<             new RestResponse.StatusMatch(message, status)
---
>             this.status(), new CustomMatcher<Integer>(message) {
>                 @Override
>                 public boolean matches(Object item) {
>                     return item.equals(status);
>                 }
>             }
123c97
<      * @param matcher Matcher to validate status code
---
>      * @param matcher The matcher to use
175c149
<      * <p>The iterator for the matcher will always be a real object an never
---
>      * <p>The iterator for the matcher will always be a real object and never
210c184,196
<         return this.assertHeader(name, Matchers.hasItems(value));
---
>         return this.assertHeader(name, new CustomMatcher<Iterable<String>>(
>             String.format("Header '%s' should contain '%s'", name, value)
>         ) {
>             @Override
>             public boolean matches(Object item) {
>                 for (String headerValue : (Iterable<String>) item) {
>                     if (headerValue.contains(value)) {
>                         return true;
>                     }
>                 }
>                 return false;
>             }
>         };
246c232,237
<             Matchers.not(Matchers.emptyIterableOf(String.class))
---
>             new CustomMatcher<Iterable<String>>("Location header should not be empty") {
>                 @Override
>                 public boolean matches(Object item) {
>                     return !((Iterable<String>) item).iterator().hasNext();
>                 }
>             }
263c254,260
<             headers.containsKey(HttpHeaders.SET_COOKIE)
---
>             headers.containsKey(HttpHeaders.SET_COOKIE),
>             new CustomMatcher<Boolean>("Header should contain cookies") {
>                 @Override
>                 public boolean matches(Object item) {
>                     return (Boolean) item;
>                 }
>             }
284c281,286
<             Matchers.notNullValue()
---
>             new CustomMatcher<Cookie>("Cookie should not be null") {
>                 @Override
>                 public boolean matches(Object item) {
>                     return item != null;
>                 }
>             }
328c330
<         public boolean matches(final Object resp) {
---
>         public boolean matches(Object resp) {
332d333
< 
