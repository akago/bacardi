18a19,24
> import com.hazelcast.cluster.Member;
> import com.hazelcast.cluster.MemberAttributeConfig;
> import com.hazelcast.cluster.MemberSelector;
> import com.hazelcast.cluster.MembershipEvent;
> import com.hazelcast.cluster.MembershipListener;
> import com.hazelcast.cluster.impl.ClusterServiceImpl;
23,24d28
< import com.hazelcast.config.MemberAttributeConfig;
< import com.hazelcast.config.MemcacheProtocolConfig;
27d30
< import com.hazelcast.core.Cluster;
30c33,38
< import com.hazelcast.core.Member;
---
> import com.hazelcast.core.LifecycleService;
> import com.hazelcast.core.LifecycleEvent;
> import com.hazelcast.core.LifecycleListener;
> import com.hazelcast.core.MemberSelector;
> import com.hazelcast.core.MembershipEvent;
> import com.hazelcast.core.MembershipListener;
51c59
< import org.slf4j.LoggerFactory;
---
> import org.slf4j.LoggerFactoryFactory;
83,133d90
<     private static final SystemProperty<String> HAZELCAST_EXECUTOR_SERVICE_NAME = SystemProperty.Builder.ofType(String.class)
<         .setKey("hazelcast.executor.service.name")
<         .setDefaultValue("openfire::cluster::executor")
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Duration> MAX_CLUSTER_EXECUTION_TIME = SystemProperty.Builder.ofType(Duration.class)
<         .setKey("hazelcast.max.execution.seconds")
<         .setDefaultValue(Duration.ofSeconds(30))
<         .setChronoUnit(ChronoUnit.SECONDS)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Duration> CLUSTER_STARTUP_RETRY_TIME = SystemProperty.Builder.ofType(Duration.class)
<         .setKey("hazelcast.startup.retry.seconds")
<         .setDefaultValue(Duration.ofSeconds(10))
<         .setChronoUnit(ChronoUnit.SECONDS)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Integer> CLUSTER_STARTUP_RETRY_COUNT = SystemProperty.Builder.ofType(Integer.class)
<         .setKey("hazelcast.startup.retry.count")
<         .setDefaultValue(1)
<         .setDynamic(true)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<String> HAZELCAST_CONFIG_FILE = SystemProperty.Builder.ofType(String.class)
<         .setKey("hazelcast.config.xml.filename")
<         .setDefaultValue("hazelcast-cache-config.xml")
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_JMX_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.jmx.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_REST_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.rest.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
<     private static final SystemProperty<Boolean> HAZELCAST_MEMCACHE_ENABLED = SystemProperty.Builder.ofType(Boolean.class)
<         .setKey("hazelcast.config.memcache.enabled")
<         .setDefaultValue(Boolean.FALSE)
<         .setDynamic(false)
<         .setPlugin(HazelcastPlugin.PLUGIN_NAME)
<         .build();
< 
138,139c95
<      * Keep serialization strategy the server was using before we set our strategy. We will
<      * restore old strategy when plugin is unloaded.
---
>      * Keep serialization strategy the server was using before clustering was loaded.
149c105
<     private static Cluster cluster = null;
---
>     private static ClusterServiceImpl cluster = null;
154,163d109
<     /**
<      * Keeps that running state. Initial state is stopped.
<      */
<     private State state = State.stopped;
< 
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
<     private final Cache<String, Instant> pluginClassLoaderWarnings;
< 
191c137
<                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false));
---
>                     networkConfig.setRestApiConfig(new RestApiConfig().setEnabled(false);
194,195c140,141
<                 memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE, XMPPServer.getInstance().getServerInfo().getHostname());
<                 memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE, XMPPServer.getInstance().getNodeID().toString());
---
>                 memberAttributeConfig.setAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE, XMPPServer.getInstance().getServerInfo().getHostname());
>                 memberAttributeConfig.setAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE, XMPPServer.getInstance().getNodeID().toString());
203c149
<                 cluster = hazelcast.getCluster();
---
>                 cluster = (ClusterServiceImpl) hazelcast.getCluster();
243,244c189
<         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
<         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
---
>         // Fire the leftClusterEvent before we leave the cluster
294,508c239,241
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
<         @SuppressWarnings("unchecked") final ClusteredCache clusteredCache = new ClusteredCache(name, hazelcast.getMap(name));
<         return clusteredCache;
<     }
< 
<     @Override
<     public void destroyCache(Cache cache) {
<         if (cache instanceof CacheWrapper) {
<             cache = ((CacheWrapper) cache).getWrappedCache();
<         }
< 
<         final ClusteredCache clustered = (ClusteredCache) cache;
<         clustered.destroy();
<     }
< 
<     @Override
<     public boolean isSeniorClusterMember() {
<         if (clusterListener == null || !clusterListener.isClusterMember()) {
<             return false;
<         }
<         return clusterListener.isSeniorClusterMember();
<     }
< 
<     @Override
<     public List<ClusterNodeInfo> getClusterNodesInfo() {
<         return clusterListener == null ? Collections.emptyList() : clusterListener.getClusterNodesInfo();
<     }
< 
<     @Override
<     public int getMaxClusterNodes() {
<         // No longer depends on license code so just return a big number
<         return 10000;
<     }
< 
<     @Override
<     public byte[] getSeniorClusterMemberID() {
<         if (cluster != null && !cluster.getMembers().isEmpty()) {
<             final Member oldest = cluster.getMembers().iterator().next();
<             return getNodeID(oldest).toByteArray();
<         } else {
<             return null;
<         }
<     }
< 
<     @Override
<     public byte[] getClusterMemberID() {
<         if (cluster != null) {
<             return getNodeID(cluster.getLocalMember()).toByteArray();
<         } else {
<             return null;
<         }
<     }
< 
<     /**
<      * Gets the pseudo-synchronized time from the cluster. While the cluster members may
<      * have varying system times, this method is expected to return a timestamp that is
<      * synchronized (or nearly so; best effort) across the cluster.
<      *
<      * @return Synchronized time for all cluster members
<      */
<     @Override
<     public long getClusterTime() {
<         return cluster == null ? System.currentTimeMillis() : cluster.getClusterTime();
<     }
< 
<     /*
<      * Execute the given task on the other (non-local) cluster members.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
<     @Override
<     public void doClusterTask(final ClusterTask<?> task) {
< 
<         if (cluster == null) {
<             return;
<         }
<         final Set<Member> members = new HashSet<>();
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
<             if (!member.getUuid().equals(current.getUuid())) {
<                 members.add(member);
<             }
<         }
< 
< 
<         if (!members.isEmpty()) {
<             // Asynchronously execute the task on the other cluster members
<             logger.debug("Executing asynchronous MultiTask: " + task.getClass().getName());
<             checkForPluginClassLoader(task);
<             hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
<         } else {
<             logger.debug("No cluster members selected for cluster task " + task.getClass().getName());
<         }
<     }
< 
<     /*
<      * Execute the given task on the given cluster member.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
<     @Override
<     public void doClusterTask(final ClusterTask<?> task, final byte[] nodeID) {
<         if (cluster == null) {
<             return;
<         }
<         final Member member = getMember(nodeID);
<         // Check that the requested member was found
<         if (member != null) {
<             // Asynchronously execute the task on the target member
<             logger.debug("Executing asynchronous DistributedTask: " + task.getClass().getName());
<             checkForPluginClassLoader(task);
<             hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
<         } else {
<             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8));
<             logger.warn(msg);
<             throw new IllegalArgumentException(msg);
<         }
<     }
< 
<     /*
<      * Execute the given task on the designated cluster members.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) per member until the task is run on all members.
<      */
<     @Override
<     public <T> Collection<T> doSynchronousClusterTask(final ClusterTask<T> task, final boolean includeLocalMember) {
<         if (cluster == null) {
<             return Collections.emptyList();
<         }
<         final Set<Member> members = new HashSet<>();
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
<             if (includeLocalMember || (!member.getUuid().equals(current.getUuid()))) {
<                 members.add(member);
<             }
<         }
<         final Collection<T> result = new ArrayList<>();
<         if (!members.isEmpty()) {
<             // Asynchronously execute the task on the other cluster members
<             try {
<                 logger.debug("Executing MultiTask: " + task.getClass().getName());
<                 checkForPluginClassLoader(task);
<                 final Map<Member, ? extends Future<T>> futures = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
<                 long nanosLeft = TimeUnit.SECONDS.toNanos(MAX_CLUSTER_EXECUTION_TIME.getValue().getSeconds() * members.size());
<                 for (final Future<T> future : futures.values()) {
<                     final long start = System.nanoTime();
<                     result.add(future.get(nanosLeft, TimeUnit.NANOSECONDS));
<                     nanosLeft = nanosLeft - (System.nanoTime() - start);
<                 }
<             } catch (final TimeoutException te) {
<                 logger.error("Failed to execute cluster task within " + StringUtils.getFullElapsedTime(MAX_CLUSTER_EXECUTION_TIME.getValue()), te);
<             } catch (final Exception e) {
<                 logger.error("Failed to execute cluster task", e);
<             }
<         } else {
<             logger.debug("No cluster members selected for cluster task " + task.getClass().getName());
<         }
<         return result;
<     }
< 
<     /*
<      * Execute the given task on the designated cluster member.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) until the task is run on the given member.
<      */
<     @Override
<     public <T> T doSynchronousClusterTask(final ClusterTask<T> task, final byte[] nodeID) {
<         if (cluster == null) {
<             return null;
<         }
<         final Member member = getMember(nodeID);
<         T result = null;
<         // Check that the requested member was found
<         if (member != null) {
<             // Asynchronously execute the task on the target member
<             logger.debug("Executing DistributedTask: " + task.getClass().getName());
<             checkForPluginClassLoader(task);
<             try {
<                 final Future<T> future = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMember(new CallableTask<>(task), member);
<                 result = future.get(MAX_CLUSTER_EXECUTION_TIME.getValue().getSeconds(), TimeUnit.SECONDS);
<                 logger.trace("DistributedTask result: {}", result);
<             } catch (final TimeoutException te) {
<                 logger.error("Failed to execute cluster task within " + MAX_CLUSTER_EXECUTION_TIME + " seconds", te);
<             } catch (final Exception e) {
<                 logger.error("Failed to execute cluster task", e);
<             }
<         } else {
<             final String msg = MessageFormat.format("Requested node {0} not found in cluster", new String(nodeID, StandardCharsets.UTF_8));
<             logger.warn(msg);
<             throw new IllegalArgumentException(msg);
<         }
<         return result;
<     }
< 
<     @Override
<     public ClusterNodeInfo getClusterNodeInfo(final byte[] nodeID) {
<         if (cluster == null) {
<             return null;
<         }
<         ClusterNodeInfo result = null;
<         final Member member = getMember(nodeID);
<         if (member != null) {
<             result = new HazelcastClusterNodeInfo(member, cluster.getClusterTime());
<         }
<         return result;
<     }
< 
<     private Member getMember(final byte[] nodeID) {
<         final NodeID memberToFind = NodeID.getInstance(nodeID);
<         for (final Member member : cluster.getMembers()) {
<             if (memberToFind.equals(getNodeID(member))) {
<                 return member;
<             }
<         }
<         return null;
---
>         // TODO: Better genericize this method in CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
>         @SuppressWarnings("unchecked") final ClusterLock clusterLock = new ClusterLock((Serializable) key, (ClusteredCache<Serializable, ?>) cache);
>         return clusterLock;
656c389
<         return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
---
>         return NodeID.getInstance(member.getAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
661c394
<         final ClusterEventListener clusterEventListener = new ClusterEventListener() {
---
>         final MembershipListener clusterEventListener = new MembershipListener() {
663c396
<             public void joinedCluster() {
---
>             public void memberAdded(MembershipEvent event) {
667c400
<             public void joinedCluster(final byte[] bytes) {
---
>             public void memberRemoved(MembershipEvent event) {
671c404,408
<             public void leftCluster() {
---
>             public void memberAttributeChanged(MembershipEvent event) {
>             }
> 
>             @Override
>             public void memberListChanged(MembershipEvent event) {
676c413,417
<             public void leftCluster(final byte[] bytes) {
---
>             public void memberVersionMismatch(MembershipEvent event) {
>             }
> 
>             @Override
>             public void memberRemoved(MembershipEvent event) {
680c421
<             public void markedAsSeniorClusterMember() {
---
>             public void memberAdded(MembershipEvent event) {
691c432
<                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout));
---
>                 logger.warn("Timeout waiting for leftCluster() event to be called [timeout={}]", StringUtils.getFullElapsedTime(timeout);
699a441,485
>     private Member getMember(final byte[] nodeID) {
>         final NodeID memberToFind = NodeID.getInstance(nodeID);
>         for (final Member member : cluster.getMembers()) {
>             if (memberToFind.equals(getNodeID(member)) {
>                 return member;
>             }
>         }
>         return null;
>     }
> 
>     private static class ClusterListener implements MembershipListener, LifecycleListener {
> 
>         private final ClusterServiceImpl cluster;
> 
>         ClusterListener(final ClusterServiceImpl cluster) {
>             this.cluster = cluster;
>         }
> 
>         public void joinCluster() {
>             // Implementation for joining the cluster
>         }
> 
>         @Override
>         public void memberAdded(MembershipEvent event) {
>             // Implementation for memberAdded
>         }
> 
>         @Override
>         public void memberRemoved(MembershipEvent event) {
>             // Implementation for memberRemoved
>         }
> 
>         @Override
>         public void memberAttributeChanged(MembershipEvent event) {
>             // Implementation for memberAttributeChanged
>         }
> 
>         @Override
>         public void memberListChanged(MembershipEvent event) {
>             // Implementation for memberListChanged
>         }
> 
>         @Override
>         public void memberVersionMismatch(MembershipEvent event) {
>             // Implementation for memberVersionMismatch
701a488,491
>         @Override
>         public void memberRemoved(MembershipEvent event) {
>             // Implementation for memberRemoved
>         }
702a493,496
>         @Override
>         public void memberAdded(MembershipEvent event) {
>             // Implementation for memberAdded
>         }
703a498,503
>         @Override
>         public void stateChanged(LifecycleEvent event) {
>             // Implementation for stateChanged
>         }
>     }
> }
