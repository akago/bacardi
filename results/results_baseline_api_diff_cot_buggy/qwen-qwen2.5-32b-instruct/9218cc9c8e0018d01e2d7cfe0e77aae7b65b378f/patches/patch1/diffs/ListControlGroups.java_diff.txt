37,43c37,43
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
> import jakarta.validation.Validator;
61c61
<         private Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();
---
>         private Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>>();
64c64
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
153c153
<                                         Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
---
>                                         Class<? extends AbstractControlGroup> typesControlGroup = getControlGroupByType(objectProperty.type);
164a165,278
>                                         if(typesControlGroup==ObjectChoiceControlGroup.class){
>                                                 IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
>                                                 if(renderer==null){
>                                                         renderer = new IObjectRenderer<Object>() {
>                                                                 private static final long serialVersionUID = -6171655578529011405L;
> 
>                                                                 public String render(Object object) {
>                                                                         return object.toString();
>                                                                 }
>                                                         };
>                                                 }
>                                                 ((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
>                                         } else if(typesControlGroup==CollectionControlGroup.class){
>                                                 ((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
>                                         }
> 
>                                 } else {
>                                         controlGroup = controlGroupProviders
>                                                         .get(objectProperty.type)
>                                                         .createControlGroup(view.newChildId()
>                                                                         , new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
>                                                                         , objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
>                                 }
>                                 view.add(controlGroup);
> 
>                                 fieldComponents.put(objectProperty.name, controlGroup);
>                         } catch (SecurityException e) {
>                                 throw new RuntimeException(e);
>                         } catch (NoSuchMethodException e) {
>                                 throw new RuntimeException(e);
>                         } catch (IllegalArgumentException e) {
>                                 throw new RuntimeException(e);
>                         } catch (InstantiationException e) {
>                                 throw new RuntimeException(e);
>                         } catch (IllegalAccessException e) {
>                                 throw new RuntimeException(e);
>                         } catch (InvocationTargetException e) {
>                                 throw new RuntimeException(e);
>                         }
>                 }
> 
>                 add(view);
>         }
> 
>         @SuppressWarnings("rawtypes")
>         private Set<String> getPropertiesByOrder(Class<?> modelClass) {
>                 Set<String> properties = new LinkedHashSet<String>();
> 
>                 for(String property : entitySettings.getOrderOfFields()){
>                         if(!entitySettings.getHiddenFields().contains(property))
>                                 properties.add(property);
>                 }
>                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
>                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
>                            !properties.contains(descriptor.getName()) &&
>                            !descriptor.getName().equals("class"))
>                                 properties.add(descriptor.getName());
>                 }
> 
>                 return properties;
>         }
> 
>         protected abstract EntityProvider<?> getEntityProvider(String name);
> 
>         protected void onInitialize() {
>                 super.onInitialize();
> 
>                 Class<?> modelClass = getModel().getObject().getClass();
> 
>                 Set<String> properties = getPropertiesByOrder(modelClass);
> 
>                 Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();
>                 BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
>                 for(String property : properties){
>                         PropertyDescriptor descriptor;
>                         try {
>                                 descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
>                         } catch (Exception e) {
>                                 throw new RuntimeException("error getting property "+property, e);
>                         }
> 
>                         boolean required = false;
> 
>                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
>                         if(constraintDescriptor!=null){
>                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
>                                 for(ConstraintDescriptor<?> constraint : constraintsSet){
>                                         if(constraint.getAnnotation() instanceof NotNull ||
>                                            constraint.getAnnotation() instanceof NotEmpty ||
>                                            constraint.getAnnotation() instanceof NotBlank)
>                                                 required = true;
>                                 }
>                         }
> 
>                         objectProperties.add(new ObjectProperties(descriptor, required));
>                 }
>                 
>                 RepeatingView view = new RepeatingView("controlGroup");
>                 for(ObjectProperties objectProperty : objectProperties){
>                         try {
>                                 AbstractControlGroup<?> controlGroup;
>                                 if(!controlGroupProviders.containsKey(objectProperty.type)) {
>                                         Constructor<?> constructor;
>                                         Class<? extends AbstractControlGroup> typesControlGroup = getControlGroupByType(objectProperty.type);
>                                         if(typesControlGroup==null){
>                                                 if(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;
>                                                 else typesControlGroup = ObjectChoiceControlGroup.class;
>                                         }
> 
>                                         constructor = typesControlGroup.getConstructor(String.class, IModel.class);
> 
>                                         controlGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));
>                                         controlGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
>                                         controlGroup.setEnabled(objectProperty.enabled);
210c324
<         @SuppressWarnings("unchecked")
---
>         @SuppressWarnings("rawtypes")
