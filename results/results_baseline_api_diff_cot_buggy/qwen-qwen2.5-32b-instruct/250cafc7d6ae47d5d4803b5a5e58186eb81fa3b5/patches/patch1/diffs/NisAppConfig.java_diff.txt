3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(new Location[]{new Location(prop.getProperty("flyway.locations"))});
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 return new Flyway(configuration);
116,117c118
<         @Bean
<         @DependsOn("flyway")
---
>         @Bean(initMethod = "migrate")
129,130c130
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
135,136c135
<                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
<                                 this.unconfirmedTransactions(), this.nisConfiguration());
---
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(), this.unconfirmedTransactions(), this.nisConfiguration());
141,142c140
<                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
<                                 this.unconfirmedTransactions());
---
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(), this.unconfirmedTransactions());
185,186c183
<                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
<                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
---
>                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(), this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
200,207c197,200
<                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),
<                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
<                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
< 
<                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
<                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
<                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
<                                 generator);
---
>                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(), this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(), this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
> 
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao, new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(), generator);
240,241c233
<                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),
<                                 this.namespaceCache());
---
>                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(), this.namespaceCache());
249,250c241
<                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
<                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
---
>                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE, () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
255,256c246
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
<                                 featureSupplierMap);
---
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm", featureSupplierMap);
261,262c251
<                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
<                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
---
>                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer, this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
286,290c275,276
<                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
<                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
<                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
<                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
<                                 this.nisCache());
---
>                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(), this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(), blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
>                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory, this.nisCache());
316,317c302
<                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
<                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
---
>                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(), () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
326,327c311
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
<                                 this.blockAnalyzer(), System::exit);
---
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration, this.blockAnalyzer(), System::exit);
339,340c323
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
---
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "weighted balance scheme", featureSupplierMap);
347,348c330
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
---
>                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(), estimatedBlocksPerYear, forkConfiguration);
353,355c335
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
---
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport() ? CommunicationMode.BINARY : CommunicationMode.JSON;
367,368c347
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
---
>                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(), this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
390,391c369
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
<                                 this.timeProvider());
---
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME, this.timeProvider());
