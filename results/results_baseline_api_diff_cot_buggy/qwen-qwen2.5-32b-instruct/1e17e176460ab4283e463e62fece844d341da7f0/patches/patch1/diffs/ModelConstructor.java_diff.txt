16a17
> import org.yaml.snakeyaml.LoaderOptions;
43,44c44
<     super(Model.class);
< 
---
>     super(new LoaderOptions());
126,129d125
<     desc = new TypeDescription(MailingList.class);
<     desc.putListPropertyType("otherArchives", String.class);
<     addTypeDescription(desc);
< 
133c129
<     addTypeDescription(new TypeDescription(IssueManagement.class));
---
>     addTypeDescription(new TypeDescription(IssueManagement.class);
138d133
<   @Override
145,283d139
<     }
<   }
< 
<   private class ConstructXpp3Dom implements Construct {
<     private static final String ATTRIBUTE_PREFIX = "attr/";
< 
<     private Xpp3Dom toDom(Xpp3Dom parent, Map<Object, Object> map) {
< 
<       for (Map.Entry<Object, Object> entry : map.entrySet()) {
<         String key = entry.getKey().toString();
<         Object entryValue = entry.getValue();
<         Xpp3Dom child = new Xpp3Dom(key);
< 
<         if (key.startsWith(ATTRIBUTE_PREFIX)) {
<           toAttribute(parent, key.replace(ATTRIBUTE_PREFIX, ""), entryValue);
<           continue;
<         }
< 
<         // lists need the insertion of intermediate XML DOM nodes which hold the actual values
<         if (entryValue instanceof List && !((List) entryValue).isEmpty()) {
<           toDom(child, key, (List) entryValue);
<         } else if (entryValue instanceof Map) {
<           //noinspection unchecked
<           child = toDom(child, (Map) entryValue);
<         } else { // if not a list or map then copy the string value
<           child.setValue(entryValue.toString());
<         }
<         parent.addChild(child);
<       }
<       return parent;
<     }
< 
<     private void toDom(Xpp3Dom parent, String parentKey, List list) {
<       Object firstItem = list.get(0);
< 
<       String childKey;
< 
<       // deal with YAML explicit pairs which are mapped to Object[] by SnakeYAML
<       if (firstItem.getClass().isArray()) {
<         for (Object item : list) {
<           Object[] pair = (Object[]) item;
<           childKey = "" + pair[0];
<           Xpp3Dom itemNode = new Xpp3Dom(childKey);
<           if (pair[1] != null && pair[1] instanceof Map)
<             //noinspection unchecked
<             toDom(itemNode, (Map) pair[1]);
<           else
<             itemNode.setValue("" + pair[1]);
<           parent.addChild(itemNode);
<         }
<       } else { // automagically determine the node's child key using the collection node's name
<         if (!parentKey.endsWith("s")) {
<           throw new RuntimeException(format("collection key '%s' does not end in 's'. Please resort to the " +
<               "documentation on how to use explicit pairs for specifying child node names", parentKey));
<         }
< 
<         if ("reportPlugins".equals(parentKey)) {
<           childKey = "plugin";
<         } else {
<           childKey = parentKey.substring(0, parentKey.length() - 1);
<           if (childKey.endsWith("ie")) {
<             childKey = childKey.substring(0, childKey.length() - 2) + "y";
<           }
<         }
< 
<         for (Object item : list) {
<           Xpp3Dom itemNode = new Xpp3Dom(childKey);
<           if (item instanceof Map)
<             //noinspection unchecked
<             toDom(itemNode, (Map) item);
<           else
<             itemNode.setValue(item.toString());
<           parent.addChild(itemNode);
<         }
<       }
<     }
< 
<     private void toAttribute(Xpp3Dom parent, String key, Object value) {
<       if (value instanceof List || value instanceof Map) {
<         throw new YAMLException("Attribute's value has to be a plain string. Node: " + parent);
<       }
< 
<       parent.setAttribute(key, value.toString());
<     }
< 
<     public Object construct(Node node) {
<       Map<Object, Object> mapping = constructMapping((MappingNode) node);
<       Xpp3Dom parent = new Xpp3Dom("configuration");
<       return toDom(parent, mapping);
<     }
< 
<     public void construct2ndStep(Node node, Object object) {
<       throw new YAMLException("Unexpected recursive mapping structure. Node: " + node);
<     }
<   }
< 
<   class MavenObjectConstruct extends Constructor.ConstructMapping {
<     @Override
<     protected Object constructJavaBean2ndStep(MappingNode node, Object object) {
<       Class<?> type = node.getType();
< 
<       List<Class> specialCases = Arrays.<Class>asList(Dependency.class, Model.class, Plugin.class, ReportPlugin.class);
<       List<Class> configurationContainers = Arrays.<Class>asList(Plugin.class, PluginExecution.class,
<           ReportPlugin.class, ReportSet.class);
< 
<       if (configurationContainers.contains(type)) {
<         for (NodeTuple valueNode : node.getValue()) {
<           Node keyNode = valueNode.getKeyNode();
<           Node childValueNode = valueNode.getValueNode();
<           if (keyNode instanceof ScalarNode && "configuration".equals(((ScalarNode) keyNode).getValue())) {
<             childValueNode.setTag(XPP3DOM_TAG);
<           }
<         }
<       }
< 
<       if (specialCases.contains(type)) {
<         String coordinate = removeId(node);
<         if (coordinate == null) {
<           return super.constructJavaBean2ndStep(node, object);
<         }
<         if (type.equals(Dependency.class)) {
<           Dependency dep = (Dependency) super.constructJavaBean2ndStep(node, object);
<           return ConstructDependency.createDependency(coordinate, dep);
<         } else if (type.equals(Model.class)) {
<           Coordinate coord = Coordinate.createCoordinate(coordinate);
<           Model model = (Model) super.constructJavaBean2ndStep(node, object);
<           return coord.mergeModel(model);
<         } else if (type.equals(Plugin.class)) {
<           Coordinate coord = Coordinate.createCoordinate(coordinate);
<           Plugin plugin = (Plugin) super.constructJavaBean2ndStep(node, object);
<           return coord.mergePlugin(plugin);
<         } else if (type.equals(ReportPlugin.class)) {
<           Coordinate coord = Coordinate.createCoordinate(coordinate);
<           ReportPlugin plugin = (ReportPlugin) super.constructJavaBean2ndStep(node, object);
<           return coord.mergeReportPlugin(plugin);
<         }
<       }
<       // create JavaBean
<       return super.constructJavaBean2ndStep(node, object);
