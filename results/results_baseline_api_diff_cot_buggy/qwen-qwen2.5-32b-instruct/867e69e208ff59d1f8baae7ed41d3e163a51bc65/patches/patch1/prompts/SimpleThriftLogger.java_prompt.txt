You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/**
 * Copyright 2019 Pinterest, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pinterest.singer.utils;

import com.pinterest.singer.thrift.LogFile;

import org.apache.commons.io.FileUtils;
import org.apache.thrift.TBase;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;

import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileSystems;

/**
 * Thrift Logger which is used to log thrift log messages into a log file.
 *
 * This class is used by unit test and ThriftLogGenerator to write log messages to thrift log
 * file. It provides APIs for client to control the flush behavior and log file rotation.
 */
@SuppressWarnings("rawtypes")
public final class SimpleThriftLogger<T extends TBase> implements Closeable {

  private static final class ByteOffsetTFramedTransport extends TFramedTransport {

    private long byteOffset;

    public ByteOffsetTFramedTransport(TTransport transport) {
      super(transport);
      byteOffset = 0;
    }

    @Override
    public void write(byte[] buf, int off, int len) throws TTransportException {
      super.write(buf, off, len);
      byteOffset += len;
    }

    @Override
    public void flush() throws TTransportException {
      super.flush();
      // Add 4 bytes for the frame size.
      byteOffset += 4;
    }

    public long getByteOffset() {
      return byteOffset;
    }
  }

  private final String fileName;

  private BufferedOutputStream bufferedOutputStream;
  private ByteOffsetTFramedTransport transport;
  private TProtocol protocol;

  public SimpleThriftLogger(String filename) throws Exception {
    this.fileName = filename;
    bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(fileName, true));
    transport = new ByteOffsetTFramedTransport(new TIOStreamTransport(bufferedOutputStream));
    protocol = new TBinaryProtocol(transport);
  }

  /**
   * Write a thrift message to log file.
   * @param message to be written
   * @throws Exception on write error.
   */
  public void logThrift(T message) throws Exception {
    message.write(protocol);
    // Flush to make sure one message per frame.
    transport.flush();
  }

  /**
   * Simple implementation of log file rotation.
   * @throws java.io.IOException
   */
  public void rotate() throws IOException {
    close();

    int i = 0;
    while (new File(String.format("%s.%d", fileName, ++i)).exists()) {
      ;
    }

    for (int j = i - 1; j >= 1; --j) {
      FileUtils.moveFile(
          new File(String.format("%s.%d", fileName, j)),
          new File(String.format("%s.%d", fileName, j + 1)));
    }
    FileUtils.moveFile(new File(fileName), new File(fileName + ".1"));
    bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(fileName, true));
    transport = new ByteOffsetTFramedTransport(new TIOStreamTransport(bufferedOutputStream));
    protocol = new TBinaryProtocol(transport);
  }

  public void flush() throws IOException {
    bufferedOutputStream.flush();
  }

  public LogFile getLogFile() throws IOException {
    long inode = SingerUtils.getFileInode(FileSystems.getDefault().getPath(fileName));
    return new LogFile(inode);
  }

  public long getByteOffset() {
    return transport.getByteOffset();
  }

  public void close() throws IOException {
    transport.close();
  }
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
private static final class ByteOffsetTFramedTransport extends TFramedTransport {
```
```java
private static final class ByteOffsetTFramedTransport extends TFramedTransport {
```
```java
import org.apache.thrift.transport.TFramedTransport;
```
```java
private static final class ByteOffsetTFramedTransport extends TFramedTransport {
```
```java
private static final class ByteOffsetTFramedTransport extends TFramedTransport {
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Method org.apache.thrift.transport.TTransport.write(java.nio.ByteBuffer) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TFastFramedTransport.write(byte[],int,int) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.sasl.FrameWriter.write(org.apache.thrift.transport.TNonblockingTransport) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TMemoryTransport.write(byte[],int,int) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFramedTransport.write(byte[],int,int) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingTransport.write(java.nio.ByteBuffer) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TFramedTransport.write(byte[],int,int) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFastFramedTransport.write(byte[],int,int) has been added in the new version of the dependency.
     Interface org.apache.thrift.transport.layered.TFramedTransport has been added in the new version of the dependency.
     Class org.apache.thrift.transport.TFramedTransport has been removed in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been removed in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport) has been removed in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFastFramedTransport.flush() has been added in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFramedTransport.flush() has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TFramedTransport.flush() has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TFastFramedTransport.flush() has been removed in the new version of the dependency.
     Constructor org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Constructor org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[45,65] cannot find symbol
  symbol:   class TFramedTransport
  location: class com.pinterest.singer.utils.SimpleThriftLogger<T>

[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[24,35] cannot find symbol
  symbol:   class TFramedTransport
  location: package org.apache.thrift.transport
</error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
