93c93
<                                 configuration.getNetworkName());
---
>                                 configuration.getNetworkName()));
103c103
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,112c108,113
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
---
>                 final org.flywaydb.core.Flyway flyway = new Flyway(new org.flywaydb.core.api.configuration.ClassicConfiguration());
>                 flyway.getConfiguration().setDataSource(this.dataSource());
>                 flyway.getConfiguration().setLocations(prop.getProperty("flyway.locations").split(","));
>                 flyway.getConfiguration().setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 flyway.getConfiguration().setClassLoader(NisAppConfig.class.getClassLoader());
> 
115a117,121
>         @Bean(initMethod = "migrate")
>         public Flyway flywayInit() throws IOException {
>                 return flyway();
>         }
> 
117d122
<         @DependsOn("flyway")
129,130c134,135
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
196a202,203
>         // region mappers
> 
314c321
<                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
---
>                                                                         (BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
329,330c336,337
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTINGING, () -> TimeBasedVestingWeightedBalances::new);
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTINGING, () -> AlwaysVestedBalances::new);
