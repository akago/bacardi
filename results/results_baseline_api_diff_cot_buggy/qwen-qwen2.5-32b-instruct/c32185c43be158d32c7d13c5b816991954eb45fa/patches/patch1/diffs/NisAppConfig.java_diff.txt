3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(prop.getProperty("flyway.locations").split(","));
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(configuration);
196a199,200
>         // region mappers
> 
290a295,344
>         @SuppressWarnings("serial")
>         public ImportanceCalculator importanceCalculator() {
>                 final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {
>                         {
>                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
>                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
>                                 this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);
>                         }
>                 };
> 
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
>                                 featureSupplierMap);
>         }
> 
>         @Bean
>         public UnlockedAccounts unlockedAccounts() {
>                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
>                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
>         }
> 
>         @Bean
>         public CanHarvestPredicate canHarvestPredicate() {
>                 return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);
>         }
> 
>         private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {
>                 return getBlockDependentPoiOptions(height).getMinHarvesterBalance();
>         }
> 
>         private static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {
>                 return new PoiOptionsBuilder(height).create();
>         }
> 
>         @Bean
>         public Supplier<BlockHeight> lastBlockHeight() {
>                 return this.blockChainLastBlockLayer::getLastBlockHeight;
>         }
> 
>         @Bean
>         public UnconfirmedTransactions unconfirmedTransactions() {
>                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
>                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
>                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
>                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
>                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
>                                 this.nisCache());
>                 return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);
>         }
> 
>         @Bean
