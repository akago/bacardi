1,16d0
< /*
<  * Copyright (C) 2007-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
30c14
< import com.hazelcast.core.Member;
---
> import com.hazelcast.cluster.Member; // Updated import
75,80d58
< /**
<  * CacheFactory implementation to use when using Hazelcast in cluster mode.
<  *
<  * @author Tom Evans
<  * @author Gaston Dombiak
<  */
137,140d114
<     /**
<      * Keep serialization strategy the server was using before we set our strategy. We will
<      * restore old strategy when plugin is unloaded.
<      */
142,145d115
< 
<     /**
<      * Storage for cache statistics
<      */
149c119
<     private static Cluster cluster = null;
---
>     private static com.hazelcast.cluster.Cluster cluster; // Updated type
154,156d123
<     /**
<      * Keeps that running state. Initial state is stopped.
<      */
159,161d125
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
166c130
<         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis()); // Minimum duration between logged warnings.
---
>         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis());
174d137
<         // Set the serialization strategy to use for transmitting objects between node clusters
178d140
<         // Store previous class loader (in case we change it)
205d166
<                 // CacheFactory is now using clustered caches. We can add our listeners.
230d190
<             // Restore previous class loader
238d197
<         // Stop the cache services.
240d198
<         // Update the running state of the cluster
243,244d200
<         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
<         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
246d201
<         // Stop the cluster
255d209
<         // Reset packet router to use to deliver packets to remote cluster nodes
257d210
<         // Reset the session locator to use
259d211
<         // Set the old serialization strategy was using before clustering was loaded
265d216
<         // Check if cluster is being started up
267d217
<             // Wait until cluster is fully started (or failed)
271d220
<                 // Ignore
277d225
<         // Determine the time to live. Note that in Hazelcast 0 means "forever", not -1
280d227
<         // Determine the max cache size. Note that in Hazelcast the max cache size must be positive and is in megabytes
283d229
<         // It's only possible to create a dynamic config if a static one doesn't already exist
288c234
<             dynamicConfig.setMaxSizeConfig(new MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE));
---
>             dynamicConfig.setMaxSizeConfig(new com.hazelcast.config.MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, com.hazelcast.config.MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE)); // Updated constructor
294d239
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
324d268
<         // No longer depends on license code so just return a big number
331c275
<             final Member oldest = cluster.getMembers().iterator().next();
---
>             final com.hazelcast.cluster.Member oldest = cluster.getMembers().iterator().next(); // Updated type
347,353d290
<     /**
<      * Gets the pseudo-synchronized time from the cluster. While the cluster members may
<      * have varying system times, this method is expected to return a timestamp that is
<      * synchronized (or nearly so; best effort) across the cluster.
<      *
<      * @return Synchronized time for all cluster members
<      */
359,363d295
<     /*
<      * Execute the given task on the other (non-local) cluster members.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
366d297
< 
370,372c301,303
<         final Set<Member> members = new HashSet<>();
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
---
>         final Set<com.hazelcast.cluster.Member> members = new HashSet<>(); // Updated type
>         final com.hazelcast.cluster.Member current = cluster.getLocalMember(); // Updated type
>         for (final com.hazelcast.cluster.Member member : cluster.getMembers()) { // Updated type
378d308
< 
380d309
<             // Asynchronously execute the task on the other cluster members
389,393d317
<     /*
<      * Execute the given task on the given cluster member.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
399,400c323
<         final Member member = getMember(nodeID);
<         // Check that the requested member was found
---
>         final com.hazelcast.cluster.Member member = getMember(nodeID); // Updated type
402d324
<             // Asynchronously execute the task on the target member
413,417d334
<     /*
<      * Execute the given task on the designated cluster members.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) per member until the task is run on all members.
<      */
423,425c340,342
<         final Set<Member> members = new HashSet<>();
<         final Member current = cluster.getLocalMember();
<         for (final Member member : cluster.getMembers()) {
---
>         final Set<com.hazelcast.cluster.Member> members = new HashSet<>(); // Updated type
>         final com.hazelcast.cluster.Member current = cluster.getLocalMember(); // Updated type
>         for (final com.hazelcast.cluster.Member member : cluster.getMembers()) { // Updated type
432d348
<             // Asynchronously execute the task on the other cluster members
436c352
<                 final Map<Member, ? extends Future<T>> futures = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
---
>                 final Map<com.hazelcast.cluster.Member, ? extends Future<T>> futures = hazelcast.getExecutorService(HAZELCAST_EXECUTOR_SERVICE_NAME.getValue()).submitToMembers(new CallableTask<>(task), members);
454,458d369
<     /*
<      * Execute the given task on the designated cluster member.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) until the task is run on the given member.
<      */
464c375
<         final Member member = getMember(nodeID);
---
>         final com.hazelcast.cluster.Member member = getMember(nodeID); // Updated type
466d376
<         // Check that the requested member was found
468d377
<             // Asynchronously execute the task on the target member
494c403
<         final Member member = getMember(nodeID);
---
>         final com.hazelcast.cluster.Member member = getMember(nodeID); // Updated type
501c410
<     private Member getMember(final byte[] nodeID) {
---
>     private com.hazelcast.cluster.Member getMember(final byte[] nodeID) { // Updated type
503c412
<         for (final Member member : cluster.getMembers()) {
---
>         for (final com.hazelcast.cluster.Member member : cluster.getMembers()) { // Updated type
514d422
<             // Create the cacheStats map if necessary.
522,524d429
<                 // The following information is published:
<                 // current size, max size, num elements, cache
<                 // hits, cache misses.
533d437
<             // Publish message
548d451
<         // TODO: Update CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
553,561d455
<     /**
<      * ClusterTasks that are executed should not be provided by a plugin. These will cause issues related to class
<      * loading when the providing plugin is reloaded. This method verifies if an instance of a task is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
566d459
<             // Try to determine what plugin loaded the offending class.
583c476
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now());
655c548
<     public static NodeID getNodeID(final Member member) {
---
>     public static NodeID getNodeID(final com.hazelcast.cluster.Member member) { // Updated type
684,685d576
<             // Add a listener at the ultimate end of the list of all listeners, to detect that left-cluster event handling
<             // has been invoked for all before proceeding.
699d589
< 
701,703d590
< 
< 
< 
