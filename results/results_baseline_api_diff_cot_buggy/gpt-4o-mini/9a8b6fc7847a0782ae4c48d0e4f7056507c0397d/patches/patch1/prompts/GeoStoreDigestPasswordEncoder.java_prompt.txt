You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/*
 *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 * 
 *  GPLv3 + Classpath exception
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geostore.core.security.password;

import org.apache.commons.codec.binary.Base64;
import org.jasypt.digest.StandardByteDigester;
import org.jasypt.spring.security.PasswordEncoder;
import org.jasypt.util.password.StrongPasswordEncryptor;
import static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;

/**
 * This Encoder provide encription and check of password using a digest
 * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)
 *
 */
public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{
	

		/**
		 * The digest is not reversible
		 */
	    public GeoStoreDigestPasswordEncoder() {
	        setReversible(false);
	    }

	    @Override
	    protected PasswordEncoder createStringEncoder() {
	        PasswordEncoder encoder = new PasswordEncoder();
	        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());
	        return encoder;
	    }

	    @Override
	    protected CharArrayPasswordEncoder createCharEncoder() {
	        return new CharArrayPasswordEncoder() {
	            StandardByteDigester digester = new StandardByteDigester();
	            {
	                digester.setAlgorithm("SHA-256");
	                digester.setIterations(100000);
	                digester.setSaltSizeBytes(16);
	                digester.initialize();
	            }
	            
	            @Override
	            public String encodePassword(char[] rawPass, Object salt) {
	                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));
	            }
	            @Override
	            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
	                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); 
	            }
	        };
	    }

	    @Override
	    public PasswordEncodingType getEncodingType() {
	        return PasswordEncodingType.DIGEST;
	    }
	
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
PasswordEncoder encoder = new PasswordEncoder();
```
```java
import org.jasypt.spring.security.PasswordEncoder;
```
```java
protected PasswordEncoder createStringEncoder() {
```
```java
PasswordEncoder encoder = new PasswordEncoder();
```
```java
protected PasswordEncoder createStringEncoder() {
```
```java
protected PasswordEncoder createStringEncoder() {
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Constructor org.jasypt.spring.security2.PasswordEncoder() has been removed in the new version of the dependency.
     Constructor org.jasypt.spring.security3.PasswordEncoder() has been removed in the new version of the dependency.
     Constructor org.jasypt.spring.security.PasswordEncoder() has been removed in the new version of the dependency.
     Class org.jasypt.spring.security2.PasswordEncoder has been removed in the new version of the dependency.
     Class org.jasypt.spring.security.PasswordEncoder has been removed in the new version of the dependency.
     Class org.jasypt.spring.security3.PasswordEncoder has been removed in the new version of the dependency.
     Method org.jasypt.spring.security3.PasswordEncoder.setPasswordEncryptor(org.jasypt.util.password.PasswordEncryptor) has been removed in the new version of the dependency.
     Method org.jasypt.spring.security.PasswordEncoder.setPasswordEncryptor(org.jasypt.util.password.PasswordEncryptor) has been removed in the new version of the dependency.
     Method org.jasypt.spring.security2.PasswordEncoder.setPasswordEncryptor(org.jasypt.util.password.PasswordEncryptor) has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java:[45,9] error: cannot find symbol

[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java:[24,33] error: package org.jasypt.spring.security does not exist

[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java:[44,15] error: cannot find symbol
</error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
