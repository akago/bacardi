You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
package com.redislabs.redisgraph;

import redis.clients.jedis.Response;
import redis.clients.jedis.commands.BasicRedisPipeline;
import redis.clients.jedis.commands.BinaryRedisPipeline;
import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
import redis.clients.jedis.commands.ClusterPipeline;
import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
import redis.clients.jedis.commands.RedisPipeline;
import redis.clients.jedis.commands.ScriptingCommandsPipeline;

import java.io.Closeable;
import java.util.List;
import java.util.Map;

/**
 * An interface which aligned to Jedis transactional interface
 */
public interface RedisGraphTransaction extends
        MultiKeyBinaryRedisPipeline,
        MultiKeyCommandsPipeline, ClusterPipeline,
        BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
        BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {

    /**
     * Execute a Cypher query.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query);

    /**
     * Execute a Cypher read-only query.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query);

    /**
     * Execute a Cypher query with timeout.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param timeout
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, long timeout);

    /**
     * Execute a Cypher read-only query with timeout.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param timeout
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, long timeout);

    /**
     * Execute a Cypher query with arguments
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param args
     * @return a response which builds the result set with the query answer.
     * @deprecated use {@link #query(String, String, Map)} instead.
     */
    @Deprecated
    Response<ResultSet> query(String graphId, String query, Object ...args);

    /**
     * Executes a cypher query with parameters.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, Map<String, Object> params);

    /**
     * Executes a cypher read-only query with parameters.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, Map<String, Object> params);

    /**
     * Executes a cypher query with parameters and timeout.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @param timeout
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, Map<String, Object> params, long timeout);

    /**
     * Executes a cypher read-only query with parameters and timeout.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @param timeout
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, Map<String, Object> params, long timeout);

    /**
     * Invokes stored procedures without arguments
     * @param graphId a graph to perform the query on
     * @param procedure procedure name to invoke
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure);

    /**
     * Invokes stored procedure with arguments
     * @param graphId a graph to perform the query on
     * @param procedure procedure name to invoke
     * @param args procedure arguments
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure, List<String> args);

    /**
     * Invoke a stored procedure
     * @param graphId a graph to perform the query on
     * @param procedure - procedure to execute
     * @param args - procedure arguments
     * @param kwargs - procedure output arguments
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure, List<String> args  , Map<String, List<String>> kwargs);

    /**
     * Deletes the entire graph
     * @param graphId graph to delete
     * @return a response which builds the delete running time statistics
     */
    Response<String> deleteGraph(String graphId);


    /**
     * executes the transaction
     * @return a list of the executed transaction commands answers, in case of successful transaction, null otherwise
     */
    List<Object> exec();

    /**
     * If object is in transaction mode,
     * flushes all previously queued commands in a transaction and restores the connection state to normal
     */
    void clear();

    /**
     *
     * @return
     */
    List<Response<?>> execGetResponse();

    /**
     * Flushes all previously queued commands in a transaction and restores the connection state to normal
     */
    String discard();
}

```

The errors are triggered in the following specific line:

<error_lines>
```java
import redis.clients.jedis.commands.ClusterPipeline;
```
```java
import redis.clients.jedis.commands.BasicRedisPipeline;
```
```java
BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
```
```java
import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
```
```java
MultiKeyCommandsPipeline, ClusterPipeline,
```
```java
MultiKeyCommandsPipeline, ClusterPipeline,
```
```java
import redis.clients.jedis.commands.RedisPipeline;
```
```java
BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
```
```java
import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
```
```java
import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
```
```java
import redis.clients.jedis.commands.BinaryRedisPipeline;
```
```java
BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
```
```java
import redis.clients.jedis.commands.ScriptingCommandsPipeline;
```
```java
BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
```
```java
MultiKeyBinaryRedisPipeline,
```
```java
BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Class redis.clients.jedis.commands.ClusterPipeline has been removed in the new version of the dependency.
     Interface redis.clients.jedis.ClusterPipeline has been added in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(java.util.Set,redis.clients.jedis.JedisClientConfig,org.apache.commons.pool2.impl.GenericObjectPoolConfig) has been added in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(redis.clients.jedis.providers.ClusterConnectionProvider) has been added in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(java.util.Set,redis.clients.jedis.JedisClientConfig) has been added in the new version of the dependency.
     Class redis.clients.jedis.commands.BasicRedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.RedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.MultiKeyCommandsPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.BinaryRedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.BinaryScriptingCommandsPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.ScriptingCommandsPipeline has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[7,36] cannot find symbol
  symbol:   class ClusterPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[4,36] cannot find symbol
  symbol:   class BasicRedisPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
  symbol: class BasicRedisPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[9,36] cannot find symbol
  symbol:   class MultiKeyCommandsPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[22,9] cannot find symbol
  symbol: class MultiKeyCommandsPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[22,9] cannot find symbol
  symbol: class MultiKeyCommandsPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[10,36] cannot find symbol
  symbol:   class RedisPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
  symbol: class BasicRedisPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[6,36] cannot find symbol
  symbol:   class BinaryScriptingCommandsPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[8,36] cannot find symbol
  symbol:   class MultiKeyBinaryRedisPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[5,36] cannot find symbol
  symbol:   class BinaryRedisPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[23,9] cannot find symbol
  symbol: class BinaryScriptingCommandsPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[11,36] cannot find symbol
  symbol:   class ScriptingCommandsPipeline
  location: package redis.clients.jedis.commands

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[23,9] cannot find symbol
  symbol: class BinaryScriptingCommandsPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[21,9] cannot find symbol
  symbol: class MultiKeyBinaryRedisPipeline

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
  symbol: class BasicRedisPipeline
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
