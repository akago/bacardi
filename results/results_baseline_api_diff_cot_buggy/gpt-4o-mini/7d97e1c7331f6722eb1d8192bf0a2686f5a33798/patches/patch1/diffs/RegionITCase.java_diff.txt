6,15c6,10
<  * modification, are permitted provided that the following conditions
<  * are met: 1) Redistributions of source code must retain the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer. 2) Redistributions in binary form must reproduce the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer in the documentation and/or other materials provided
<  * with the distribution. 3) Neither the name of the jcabi.com nor
<  * the names of its contributors may be used to endorse or promote
<  * products derived from this software without specific prior written
<  * permission.
---
>  * modification, are permitted provided that the following conditions are met: 1) Redistributions of source code must retain the above
>  * copyright notice, this list of conditions and the following disclaimer. 2) Redistributions in binary form must reproduce the above
>  * copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided
>  * with the distribution. 3) Neither the name of the jcabi.com nor the names of its contributors may be used to endorse or promote
>  * products derived from this software without specific prior written permission.
33d27
< import com.jcabi.aspects.Tv;
58a53,55
>     private static final int TEN = 10;
>     private static final int EIGHT = 8;
> 
63,65c60,62
<             final String name = RandomStringUtils.randomAlphanumeric(Tv.TEN);
<             final String attr = RandomStringUtils.randomAlphabetic(Tv.EIGHT);
<             final String value = RandomStringUtils.randomAlphanumeric(Tv.TEN);
---
>             final String name = RandomStringUtils.randomAlphanumeric(TEN);
>             final String attr = RandomStringUtils.randomAlphabetic(EIGHT);
>             final String value = RandomStringUtils.randomAlphanumeric(TEN);
111c108
<             for (int idx = 0; idx < Tv.TEN; ++idx) {
---
>             for (int idx = 0; idx < TEN; ++idx) {
120c117
<                 Matchers.iterableWithSize(Tv.TEN)
---
>                 Matchers.iterableWithSize(TEN)
