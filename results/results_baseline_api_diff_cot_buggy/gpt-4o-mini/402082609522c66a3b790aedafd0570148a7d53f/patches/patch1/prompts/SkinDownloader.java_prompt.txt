Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

the following client code fails:
```java
package com.github.games647.changeskin.sponge.task;

import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.core.shared.task.SharedDownloader;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import java.util.UUID;

import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

public class SkinDownloader extends SharedDownloader {

    private final ChangeSkinSponge plugin;
    private final CommandSource invoker;
    private final Player receiver;

    public SkinDownloader(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, UUID targetUUID
            , boolean keepSkin) {
        super(plugin.getCore(), keepSkin, targetUUID, receiver.getUniqueId());

        this.plugin = plugin;
        this.invoker = invoker;
        this.receiver = receiver;
    }

    @Override
    protected void scheduleApplyTask(SkinModel skinData) {
        Runnable skinUpdater = new SkinApplier(plugin, invoker, receiver, skinData, keepSkin);
        Task.builder().execute(skinUpdater).submit(plugin);
    }

    @Override
    public void sendMessageInvoker(String id) {
        plugin.sendMessage(invoker, id);
    }
}

```
the error is triggered in the following specific lines in the previous code:

```java
public SkinDownloader(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, UUID targetUUID
```
```java
public SkinDownloader(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, UUID targetUUID
```
```java
private final CommandSource invoker;
```
```java
import org.spongepowered.api.command.CommandSource;
```

with the following error information:
[ERROR] /ChangeSkin/sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[19,52] cannot find symbol
  symbol:   class CommandSource
  location: class com.github.games647.changeskin.sponge.task.SkinDownloader

[ERROR] /ChangeSkin/sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[16,19] cannot find symbol
  symbol:   class CommandSource
  location: class com.github.games647.changeskin.sponge.task.SkinDownloader

[ERROR] /ChangeSkin/sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[9,37] cannot find symbol
  symbol:   class CommandSource
  location: package org.spongepowered.api.command


The error is caused by a change in the API of the dependency. The new library version includes the following changes:
     Method org.spongepowered.api.util.Identifiable.getUniqueId() has been removed in the new version of the dependency.
     Method org.spongepowered.api.world.storage.WorldProperties.getUniqueId() has been removed in the new version of the dependency.
     Method org.spongepowered.api.text.action.HoverAction$ShowEntity$Ref.getUniqueId() has been removed in the new version of the dependency.
     Method org.spongepowered.api.world.World.getUniqueId() has been removed in the new version of the dependency.
     Method org.spongepowered.api.network.ChannelBuf.getUniqueId(int) has been removed in the new version of the dependency.
     Method org.spongepowered.api.network.channel.ChannelBuf.getUniqueId(int) has been added in the new version of the dependency.
     Method org.spongepowered.api.entity.EntitySnapshot.getUniqueId() has been removed in the new version of the dependency.
     Class org.spongepowered.api.command.CommandSource has been removed in the new version of the dependency.

Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
