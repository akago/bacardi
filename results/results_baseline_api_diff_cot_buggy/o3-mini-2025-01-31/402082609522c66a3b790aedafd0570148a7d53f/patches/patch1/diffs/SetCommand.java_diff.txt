9a10
> import java.util.Optional;
11a13,14
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandExecutor;
13,17c16,17
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.args.GenericArguments;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
21,24d20
< import static org.spongepowered.api.command.args.GenericArguments.flags;
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
37,39c33,36
<     public CommandResult execute(CommandSource src, CommandContext args) {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
---
>     public CommandResult execute(CommandContext context) {
>         Optional<Player> playerOpt = context.cause().first(Player.class);
>         if (!playerOpt.isPresent()) {
>             plugin.sendMessage(context.cause().root(), "no-console");
43c40,41
<         UUID uniqueId = ((Player) src).getUniqueId();
---
>         Player sender = playerOpt.get();
>         UUID uniqueId = sender.getUniqueId();
45c43
<             plugin.sendMessage(src, "cooldown");
---
>             plugin.sendMessage(sender, "cooldown");
49,51c47,49
<         Player receiver = (Player) src;
<         String targetSkin = args.<String>getOne("skin").get();
<         boolean keepSkin = args.hasAny("keep");
---
>         Player receiver = sender;
>         String targetSkin = context.one(String.class, "skin").get();
>         boolean keepSkin = context.one(Boolean.class, "keep").orElse(false);
60c58,59
<             if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(src, targetUUID, true)) {
---
>             if (core.getConfig().getBoolean("skinPermission")
>                     && !plugin.hasSkinPermission(sender, targetUUID, true)) {
64,65c63,64
<             plugin.sendMessage(src, "skin-change-queue");
<             Runnable skinDownloader = new SkinDownloader(plugin, src, receiver, targetUUID, keepSkin);
---
>             plugin.sendMessage(sender, "skin-change-queue");
>             Runnable skinDownloader = new SkinDownloader(plugin, sender, receiver, targetUUID, keepSkin);
70c69
<         Runnable nameResolver = new NameResolver(plugin, src, targetSkin, receiver, keepSkin);
---
>         Runnable nameResolver = new NameResolver(plugin, sender, targetSkin, receiver, keepSkin);
76,77c75,76
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command.Parameterized buildSpec() {
>         return Command.builder()
79,81c78,79
<                 .arguments(
<                         string(of("skin")),
<                         flags().flag("keep").buildWith(GenericArguments.none()))
---
>                 .addParameter(Parameter.string().key("skin").build())
>                 .addParameter(Parameter.bool().key("keep").optional().build())
