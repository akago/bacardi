9d8
< 
11,12c10,11
< 
< import org.spongepowered.api.command.CommandResult;
---
> import java.util.Optional;
> import org.spongepowered.api.command.CommandExecutor;
14,20c13,14
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
< import org.spongepowered.api.scheduler.Task;
< 
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
35c29
<         String url = args.<String>getOne("url").get();
---
>         String url = args.one("url").get();
43c37
<                 Task.builder().async().execute(skinUploader).submit(plugin);
---
>                 plugin.getScheduler().submit(skinUploader);
48d41
< 
52d44
<     @Override
56c48
<                 .arguments(string(of("url")))
---
>                 .arguments(Parameter.string().key("url").build())
58a51,98
>     }
> 
>     public static class CommandSpec {
> 
>         private final CommandExecutor executor;
>         private final Object arguments;
>         private final String permission;
> 
>         private CommandSpec(CommandExecutor executor, Object arguments, String permission) {
>             this.executor = executor;
>             this.arguments = arguments;
>             this.permission = permission;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Object arguments;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Object arguments) {
>                 this.arguments = arguments;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 return new CommandSpec(executor, arguments, permission);
>             }
>         }
>     }
> 
>     public static class CommandResult {
>         public static CommandResult success() {
>             return new CommandResult();
>         }
