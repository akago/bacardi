7c7,8
< 
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandExecutor;
9,12c10,12
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.source.CommandSource;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
16,18d15
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
24c21
<     SelectCommand(ChangeSkinSponge plugin) {
---
>     public SelectCommand(ChangeSkinSponge plugin) {
32c29
<             return CommandResult.empty();
---
>             return CommandResult.success();
35c32
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = args.<String>one("skinName").get().toLowerCase().replace("skin-", "");
40c37
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             Task.builder().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
48,50c45,46
<     @Override
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         return Command.builder()
52c48
<                 .arguments(string(of("skinName")))
---
>                 .addParameter(Parameter.string().key("skinName").build())
