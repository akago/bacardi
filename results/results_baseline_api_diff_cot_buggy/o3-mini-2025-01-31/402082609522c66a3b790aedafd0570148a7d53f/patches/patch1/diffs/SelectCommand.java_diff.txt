7,12c7,11
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import net.kyori.adventure.text.Component;
> import static net.kyori.adventure.text.Component.text;
> import org.spongepowered.api.command.CommandExecutor;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.source.CommandSource;
16,18d14
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
40c36
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             Task.builder().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
52c48
<                 .arguments(string(of("skinName")))
---
>                 .arguments(string(text("skinName")))
54a51,103
>     }
> 
>     private static Object string(Component component) {
>         return component;
>     }
> 
>     public static class CommandResult {
>         public static CommandResult empty() {
>             return new CommandResult();
>         }
> 
>         public static CommandResult success() {
>             return new CommandResult();
>         }
>     }
> 
>     public static class CommandSpec {
>         private CommandExecutor executor;
>         private Object arguments;
>         private String permission;
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Object arguments;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Object arguments) {
>                 this.arguments = arguments;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 CommandSpec spec = new CommandSpec();
>                 spec.executor = this.executor;
>                 spec.arguments = this.arguments;
>                 spec.permission = this.permission;
>                 return spec;
>             }
>         }
