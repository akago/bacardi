9d8
< 
11d9
< 
14d11
< import org.spongepowered.api.command.CommandSource;
16,17d12
< import org.spongepowered.api.network.ChannelBuf;
< import org.spongepowered.api.network.RawDataListener;
19d13
< import org.spongepowered.api.scheduler.Task;
21c15
< public class UpdateSkinListener implements RawDataListener {
---
> public class UpdateSkinListener implements UpdateSkinListener.RawDataListener {
27c21
<     public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
---
>     public void handlePayload(UpdateSkinListener.ChannelBuf data, RemoteConnection connection, Type side) {
33c27,29
<         Optional<Player> receiver = Sponge.getServer().getPlayer(playerName);
---
>         Optional<Player> receiver = Sponge.server().getOnlinePlayers().stream()
>                 .filter(player -> player.getName().equals(playerName))
>                 .findFirst();
35,36c31,48
<             Runnable skinUpdater = new SkinApplier(plugin, (CommandSource) connection, receiver.get(), null, false);
<             Task.builder().execute(skinUpdater).submit(plugin);
---
>             Runnable skinUpdater = new SkinApplier(plugin, connection, receiver.get(), null, false);
>             Sponge.server().scheduler().submit(skinUpdater);
>         }
>     }
> 
>     public static interface RawDataListener {
>         void handlePayload(ChannelBuf data, RemoteConnection connection, Type side);
>     }
> 
>     public static class ChannelBuf {
>         private final byte[] data;
> 
>         public ChannelBuf(byte[] data) {
>             this.data = data;
>         }
> 
>         public byte[] array() {
>             return data;
