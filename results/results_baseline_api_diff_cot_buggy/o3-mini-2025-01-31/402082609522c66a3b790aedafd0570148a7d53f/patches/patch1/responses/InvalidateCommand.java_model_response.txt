```java
package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinInvalidator;
import com.google.inject.Inject;
import java.util.Optional;
import org.spongepowered.api.command.Command;
import org.spongepowered.api.command.CommandCause;
import org.spongepowered.api.command.CommandExecutor;
import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.parameter.CommandContext;
import org.spongepowered.api.entity.living.player.Player;

public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    InvalidateCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult execute(CommandCause src, CommandContext args) {
        Optional<Player> playerOpt = src.first(Player.class);
        if (!playerOpt.isPresent()) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.builder().successCount(0).build();
        }
        Player receiver = playerOpt.get();
        plugin.getScheduler().executor(plugin).execute(new SkinInvalidator(plugin, receiver));
        return CommandResult.success();
    }

    public CommandSpec buildSpec() {
        Command<?> command = Command.builder()
                .executor(this)
                .permission(PomData.ARTIFACT_ID + ".command.skinupdate.base")
                .build();
        return new CommandSpec(command);
    }

    public static class CommandSpec {
        private final Command<?> command;

        public CommandSpec(Command<?> command) {
            this.command = command;
        }

        public Command<?> getCommand() {
            return command;
        }
    }
}
```
