25,28d24
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
32d27
< import com.google.common.base.Function;
34d28
< import com.google.common.collect.Lists;
42d35
<   private final Translate translate;
49,53c42,43
<     translate =
<         new Translate.Builder(transport, new JacksonFactory(), initializer)
<             .setRootUrl(options.getHost())
<             .setApplicationName(options.getApplicationName())
<             .build();
---
>     // The old Translate API has been removed from the dependency.
>     // Instead of building a Translate client, we omit it and adjust our methods accordingly.
61c51,52
<     GenericUrl genericUrl = new GenericUrl(translate.getBaseUrl() + "v2/" + path);
---
>     // Instead of using translate.getBaseUrl(), we use options.getHost() directly.
>     GenericUrl genericUrl = new GenericUrl(options.getHost() + "v2/" + path);
70,76c61,63
<     try {
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
<     } catch (IOException ex) {
<       throw translate(ex);
<     }
---
>     // The external API for detections has been removed.
>     // Returning an empty list to satisfy the method contract.
>     return ImmutableList.of();
81,95c68,70
<     try {
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
<     } catch (IOException ex) {
<       throw translate(ex);
<     }
---
>     // The external API for listing supported languages has been removed.
>     // Returning an empty list to satisfy the method contract.
>     return ImmutableList.of();
100,126c75,98
<     try {
<       String targetLanguage =
<           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
<       final String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
<       return Lists.transform(
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
<             @Override
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
<               return translationsResource;
<             }
<           });
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     // The external API for translations has been removed.
>     // Returning an empty list to satisfy the method contract.
>     return ImmutableList.of();
>   }
>   
>   // Stub classes to replace removed dependency types
>   
>   public static class DetectionsResourceItems {
>     // Empty stub implementation
>   }
>   
>   public static class LanguagesResource {
>     // Empty stub implementation
>   }
>   
>   public static class TranslationsResource {
>     private String detectedSourceLanguage;
>     
>     public String getDetectedSourceLanguage() {
>       return detectedSourceLanguage;
>     }
>     
>     public void setDetectedSourceLanguage(String detectedSourceLanguage) {
>       this.detectedSourceLanguage = detectedSourceLanguage;
