2a3
> import redis.clients.jedis.ClusterPipeline;
4,11d4
< import redis.clients.jedis.commands.BasicRedisPipeline;
< import redis.clients.jedis.commands.BinaryRedisPipeline;
< import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
< import redis.clients.jedis.commands.ClusterPipeline;
< import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
< import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
< import redis.clients.jedis.commands.RedisPipeline;
< import redis.clients.jedis.commands.ScriptingCommandsPipeline;
17,31c10,11
< /**
<  * An interface which aligned to Jedis Pipeline interface
<  */
< public interface RedisGraphPipeline extends
<         MultiKeyBinaryRedisPipeline,
<         MultiKeyCommandsPipeline, ClusterPipeline,
<         BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
<         BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
< 
<     /**
<      * Execute a Cypher query.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @return a response which builds the result set with the query answer.
<      */
---
> public interface RedisGraphPipeline extends ClusterPipeline, Closeable {
> 
34,39d13
<     /**
<      * Execute a Cypher read-only query.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @return a response which builds the result set with the query answer.
<      */
42,48d15
<     /**
<      * Execute a Cypher query with timeout.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param timeout
<      * @return a response which builds the result set with the query answer.
<      */
51,57d17
<     /**
<      * Execute a Cypher read-only query with timeout.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param timeout
<      * @return a response which builds the result set with the query answer.
<      */
60,66d19
<     /**
<      * Executes a cypher query with parameters.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @return  a response which builds the result set with the query answer.
<      */
69,75d21
<     /**
<      * Executes a cypher read-only query with parameters.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @return  a response which builds the result set with the query answer.
<      */
78,85d23
<     /**
<      * Executes a cypher query with parameters and timeout.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @param timeout
<      * @return  a response which builds the result set with the query answer.
<      */
88,95d25
<     /**
<      * Executes a cypher read-only query with parameters and timeout.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @param timeout
<      * @return  a response which builds the result set with the query answer.
<      */
98,103d27
<     /**
<      * Invokes stored procedures without arguments
<      * @param graphId a graph to perform the query on
<      * @param procedure procedure name to invoke
<      * @return a response which builds result set with the procedure data
<      */
106,112d29
<     /**
<      * Invokes stored procedure with arguments
<      * @param graphId a graph to perform the query on
<      * @param procedure procedure name to invoke
<      * @param args procedure arguments
<      * @return a response which builds result set with the procedure data
<      */
115,122d31
<     /**
<      * Invoke a stored procedure
<      * @param graphId a graph to perform the query on
<      * @param procedure - procedure to execute
<      * @param args - procedure arguments
<      * @param kwargs - procedure output arguments
<      * @return a response which builds result set with the procedure data
<      */
125,129d33
<     /**
<      * Deletes the entire graph
<      * @param graphId graph to delete
<      * @return a response which builds the delete running time statistics
<      */
132,138d35
<     
<     /**
<      * Synchronize pipeline by reading all responses. This operation close the pipeline. Whenever
<      * possible try to avoid using this version and use Pipeline.sync() as it won't go through all the
<      * responses and generate the right response type (usually it is a waste of time).
<      * @return A list of all the responses in the order you executed them.
<      */
141,159c38,40
<     /**
<      * Synchronize pipeline by reading all responses. This operation close the pipeline. In order to
<      * get return values from pipelined commands, capture the different Response&lt;?&gt; of the
<      * commands you execute.
<      */
<     public void sync();
<     
<     
<     /**
<      * Blocks until all the previous write commands are successfully transferred and acknowledged by
<      * at least the specified number of replicas. If the timeout, specified in milliseconds, is
<      * reached, the command returns even if the specified number of replicas were not yet reached.
<      * @param replicas successfully transferred and acknowledged by at least the specified number of
<      *          replicas
<      * @param timeout the time to block in milliseconds, a timeout of 0 means to block forever
<      * @return the number of replicas reached by all the writes performed in the context of the
<      *         current connection
<      */
<     public Response<Long> waitReplicas(int replicas, long timeout);
---
>     void sync();
> 
>     Response<Long> waitReplicas(int replicas, long timeout);
