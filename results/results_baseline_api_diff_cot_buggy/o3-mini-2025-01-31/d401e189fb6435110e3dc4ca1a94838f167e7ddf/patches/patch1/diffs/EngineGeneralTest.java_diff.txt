1,15d0
< /*
<  * Copyright 2014 Feedzai
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
20,37c5
< import com.feedzai.commons.sql.abstraction.ddl.AlterColumn;
< import com.feedzai.commons.sql.abstraction.ddl.DbColumn;
< import com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint;
< import com.feedzai.commons.sql.abstraction.ddl.DbColumnType;
< import com.feedzai.commons.sql.abstraction.ddl.DbEntity;
< import com.feedzai.commons.sql.abstraction.ddl.Rename;
< import com.feedzai.commons.sql.abstraction.dml.Expression;
< import com.feedzai.commons.sql.abstraction.dml.K;
< import com.feedzai.commons.sql.abstraction.dml.Query;
< import com.feedzai.commons.sql.abstraction.dml.Truncate;
< import com.feedzai.commons.sql.abstraction.dml.Update;
< import com.feedzai.commons.sql.abstraction.dml.Values;
< import com.feedzai.commons.sql.abstraction.dml.With;
< import com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;
< import com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder;
< import com.feedzai.commons.sql.abstraction.dml.result.ResultColumn;
< import com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;
< import com.feedzai.commons.sql.abstraction.engine.AbstractDatabaseEngine;
---
> import ch.qos.logback.classic.LoggerContext;
42d9
< import com.feedzai.commons.sql.abstraction.exceptions.DatabaseEngineUniqueConstraintViolationException;
44a12
> import com.feedzai.commons.sql.abstraction.engine.EntityEntry;
47d14
< import com.feedzai.commons.sql.abstraction.engine.OperationNotSupportedRuntimeException;
49,50d15
< import com.feedzai.commons.sql.abstraction.engine.testconfig.BlobTest;
< import com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseConfiguration;
52,68c17,39
< import com.feedzai.commons.sql.abstraction.entry.EntityEntry;
< import com.google.common.collect.ImmutableSet;
< import java.sql.SQLException;
< import mockit.Expectations;
< import mockit.Invocation;
< import mockit.Mock;
< import mockit.MockUp;
< import mockit.Verifications;
< import org.junit.After;
< import org.junit.Before;
< import org.junit.BeforeClass;
< import org.junit.Test;
< import org.junit.experimental.categories.Category;
< import org.junit.runner.RunWith;
< import org.junit.runners.Parameterized;
< import org.slf4j.LoggerFactory;
< 
---
> import com.feedzai.commons.sql.abstraction.entry.DbColumn;
> import com.feedzai.commons.sql.abstraction.entry.DbColumnConstraint;
> import com.feedzai.commons.sql.abstraction.entry.DbColumnType;
> import com.feedzai.commons.sql.abstraction.entry.DbEntity;
> import com.feedzai.commons.sql.abstraction.entry.AlterColumn;
> import com.feedzai.commons.sql.abstraction.entry.DbFk;
> import com.feedzai.commons.sql.abstraction.entry.Rename;
> import com.feedzai.commons.sql.abstraction.entry.Values;
> import com.feedzai.commons.sql.abstraction.entry.K;
> import com.feedzai.commons.sql.abstraction.entry.Update;
> import com.feedzai.commons.sql.abstraction.dml.Select;
> import com.feedzai.commons.sql.abstraction.dml.UpdateStatement;
> import com.feedzai.commons.sql.abstraction.dml.Truncate;
> import com.feedzai.commons.sql.abstraction.dml.Delete;
> import com.feedzai.commons.sql.abstraction.dml.Query;
> import com.feedzai.commons.sql.abstraction.dml.With;
> import com.feedzai.commons.sql.abstraction.dml.Expression;
> import com.feedzai.commons.sql.abstraction.dml.SqlBuilder;
> import com.feedzai.commons.sql.abstraction.dml.ValuesStatement;
> import com.feedzai.commons.sql.abstraction.dml.ResultIterator;
> import com.feedzai.commons.sql.abstraction.dml.ResultColumn;
> import com.feedzai.commons.sql.abstraction.util.StringUtils;
> import com.feedzai.commons.sql.abstraction.util.Utils;
71c42
< import java.sql.Connection;
---
> import java.sql.SQLException;
84a56,68
> import mockit.Expectations;
> import mockit.Invocation;
> import mockit.Mock;
> import mockit.MockUp;
> import mockit.Verifications;
> import org.junit.After;
> import org.junit.Before;
> import org.junit.BeforeClass;
> import org.junit.Test;
> import org.junit.experimental.categories.Category;
> import org.junit.runner.RunWith;
> import org.junit.runners.Parameterized;
> import org.slf4j.LoggerFactory;
88d71
< import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BOOLEAN;
94,138c77,120
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.L;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.all;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.avg;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.between;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.caseWhen;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.cast;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.ceiling;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.coalesce;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.column;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.concat;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.count;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.createView;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbColumn;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbEntity;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbFk;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.delete;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.div;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dropPK;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.entry;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.eq;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.f;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.floor;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.in;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.k;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.like;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lit;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lower;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.max;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.min;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.mod;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.neq;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notBetween;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notIn;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.or;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.select;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stddev;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stringAgg;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.sum;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.table;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.udf;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.union;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.update;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.upper;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.values;
< import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.with;
---
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.all;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.avg;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.between;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.caseWhen;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.cast;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.ceiling;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.coalesce;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.column;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.concat;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.count;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.createView;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.dbColumn;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.dbEntity;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.dbFk;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.delete;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.div;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.dropPK;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.entry;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.eq;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.f;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.floor;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.in;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.k;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.like;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.lit;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.lower;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.max;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.min;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.mod;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.neq;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.notBetween;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.notIn;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.or;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.select;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.stddev;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.stringAgg;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.sum;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.table;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.udf;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.union;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.update;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.upper;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.values;
> import static com.feedzai.commons.sql.abstraction.dml.SqlBuilder.with;
158,161d139
< /**
<  * @author Rui Vilao (rui.vilao@feedzai.com)
<  * @since 2.0.0
<  */
165,169c143,144
< 
<     private static final double DELTA = 1e-7;
< 
<     protected DatabaseEngine engine;
<     protected Properties properties;
---
>     private DatabaseEngine engine;
>     private Properties properties;
172,173c147,148
<     public static Collection<DatabaseConfiguration> data() throws Exception {
<         return DatabaseTestUtil.loadConfigurations();
---
>     public static Collection<DatabaseTestUtil.Configuration> configurations() throws Exception {
>         return DatabaseTestUtil.getConfigurations();
176,178d150
<     @Parameterized.Parameter
<     public DatabaseConfiguration config;
< 
181c153
<         ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);
---
>         ((LoggerContext) LoggerFactory.getILoggerFactory()).getLogger(Logger.ROOT_LOGGER_NAME).setLevel(Level.TRACE);
185,195c157,163
<     public void init() throws DatabaseFactoryException {
<         properties = new Properties() {
<             {
<                 setProperty(JDBC, config.jdbc);
<                 setProperty(USERNAME, config.username);
<                 setProperty(PASSWORD, config.password);
<                 setProperty(ENGINE, config.engine);
<                 setProperty(SCHEMA_POLICY, "drop-create");
<             }
<         };
< 
---
>     public void setUp() throws Exception {
>         properties = new Properties();
>         properties.setProperty(JDBC, "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
>         properties.setProperty(USERNAME, "sa");
>         properties.setProperty(PASSWORD, "");
>         properties.setProperty(ENGINE, "H2");
>         properties.setProperty(SCHEMA_POLICY, "create-drop");
200c168,169
<     public void cleanup() {
---
>     public void tearDown() throws Exception {
>         if (engine != null) {
202a172
>     }
206d175
< 
214d182
<                 .pkFields("COL1")
222d189
< 
245d211
<                 .pkFields("COL1", "COL3")
316d281
<                 .pkFields("COL1", "COL3")
328d292
<                 .pkFields("COL1", "COL3")
332d295
< 
337d299
< 
345d306
<                 .pkFields("COL1")
353d313
< 
362d321
<                 .pkFields("COL1")
372c331,337
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
---
>         EntityEntry entry = entry()
>                 .set("COL1", 1)
>                 .set("COL2", true)
>                 .set("COL3", 1.0)
>                 .set("COL4", 1L)
>                 .set("COL5", "test")
>                 .build();
377d341
< 
385,401d348
< 
<         List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));
< 
<         assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
<         assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
<         assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
<         assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
<         assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
<         assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
408c355,360
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry()
>                 .set("COL1", 1)
>                 .set("COL2", true)
>                 .set("COL3", 1.0)
>                 .set("COL4", 1L)
>                 .set("COL5", "test")
412,428d363
< 
<         List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));
< 
<         assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
<         assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
<         assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
<         assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
<         assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
<         assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
444c379,383
<         EntityEntry entry = entry().set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry()
>                 .set("COL2", false)
>                 .set("COL3", 2D)
>                 .set("COL4", 3L)
>                 .set("COL5", "ADEUS")
450d388
< 
458,473d395
<         List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));
< 
<         assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
<         assertEquals("COL1 ok?", 1, (int) query.get(0).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
<         assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
<         assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
<         assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
<         assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
480c402,407
<         EntityEntry entry = entry().set("COL1", 1).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry()
>                 .set("COL1", 1)
>                 .set("COL2", true)
>                 .set("COL3", 2D)
>                 .set("COL4", 3L)
>                 .set("COL5", "ADEUS")
485,487c412
< 
<         Map<String, ResultColumn> res;
<         res = it.next();
---
>         Map<String, ResultColumn> res = it.next();
491d415
< 
493,494c417
<         assertFalse("COL2 ok?", res.get("COL2").toBoolean());
< 
---
>         assertTrue("COL2 ok?", res.get("COL2").toBoolean());
497d419
< 
500d421
< 
503,510c424
< 
<         assertNull("no more data to consume?", it.next());
< 
<         assertTrue("result set is closed?", it.isClosed());
<         assertNull("next on a closed result set must return null", it.next());
< 
<         // calling close on a closed result set has no effect.
<         it.close();
---
>         assertNull("next returns null when no more data", it.next());
516d429
< 
518d430
< 
520,527d431
< 
<         assertNull("no more data to consume?", it.next());
< 
<         assertTrue("result set is closed?", it.isClosed());
<         assertNull("next on a closed result set must return null", it.next());
< 
<         // calling close on a closed result set has no effect.
<         it.close();
530,537d433
<     /**
<      * Tests that an iterator created in a try-with-resources' resource specification header is automatically closed
<      * once the block is exited from.
<      *
<      * @throws Exception If an unexpected error occurs.
<      *
<      * @since 2.1.12
<      */
544c440
<                 .set("COL2", false)
---
>                 .set("COL2", true)
553d448
< 
555,559c450
< 
<             assertFalse(
<                     "Result iterator should not be closed before exiting try-with-resources block",
<                     resultIterator.isClosed()
<             );
---
>             assertFalse("Result iterator should not be closed", resultIterator.isClosed());
561,565c452
< 
<         assertTrue(
<                 "Result iterator should be closed after exiting try-with-resources block",
<                 resultIterator.isClosed()
<         );
---
>         assertTrue("Result iterator should be closed after try-with-resources", resultIterator.isClosed());
571d457
< 
575,577c461
<             EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
<                     .build();
< 
---
>             EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
579,582c463
< 
<             entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
<                     .build();
< 
---
>             entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA").build();
584d464
< 
586d465
< 
593,627d471
< 
<         List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).orderby(column("COL1").asc()));
< 
<         // 1st
<         assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
<         assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
<         assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
<         assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
<         assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
<         assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
< 
<         // 2nd
< 
<         assertTrue("COL1 exists", query.get(1).containsKey("COL1"));
<         assertEquals("COL1 ok?", 3, (int) query.get(1).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(1).containsKey("COL2"));
<         assertTrue("COL2 ok?", query.get(1).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(1).containsKey("COL3"));
<         assertEquals("COL3 ok?", 3D, query.get(1).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(1).containsKey("COL4"));
<         assertEquals("COL4 ok?", 4L, (long) query.get(1).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(1).containsKey("COL5"));
<         assertEquals("COL5  ok?", "OLA", query.get(1).get("COL5").toString());
633,636c477
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
638,641c479
< 
<         entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
<                 .build();
< 
---
>         entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA").build();
643,644d480
< 
<         // autocommit set to true.
646,681d481
< 
< 
<         List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).orderby(column("COL1").asc()));
< 
<         // 1st
<         assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
<         assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
<         assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
<         assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
<         assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
<         assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
< 
<         // 2nd
< 
<         assertTrue("COL1 exists", query.get(1).containsKey("COL1"));
<         assertEquals("COL1 ok?", 3, (int) query.get(1).get("COL1").toInt());
< 
<         assertTrue("COL2 exists", query.get(1).containsKey("COL2"));
<         assertTrue("COL2 ok?", query.get(1).get("COL2").toBoolean());
< 
<         assertTrue("COL3 exists", query.get(1).containsKey("COL3"));
<         assertEquals("COL3 ok?", 3D, query.get(1).get("COL3").toDouble(), 0);
< 
<         assertTrue("COL4 exists", query.get(1).containsKey("COL4"));
<         assertEquals("COL4 ok?", 4L, (long) query.get(1).get("COL4").toLong());
< 
<         assertTrue("COL5 exists", query.get(1).containsKey("COL5"));
<         assertEquals("COL5  ok?", "OLA", query.get(1).get("COL5").toString());
684,698d483
<     /**
<      * Tests that on a rollback situation, the prepared statement batches are cleared.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add batch to transaction and purposely fail to flush</li>
<      *     <li>Ensure the existence of the Exception and rollback transaction</li>
<      *     <li>Flush again successfully and ensure that the DB table doesn't have any rows</li>
<      * </ol>
<      *
<      * This is a regression test.
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      * @since 2.1.12
<      */
702d486
< 
708c492
<         new MockUp<AbstractDatabaseEngine>() {
---
>         new MockUp<DatabaseEngine>() {
710c494
<             public synchronized void flush(final Invocation invocation) throws DatabaseEngineException {
---
>             public synchronized void flush(Invocation invocation) throws DatabaseEngineException {
725d508
< 
737d519
<         // Ensure we had an exception and therefore we didn't insert anything on the DB and that we cleared the batches.
739d520
< 
745,750c526
<         final List<Map<String, ResultColumn>> query = engine.query(select(all())
<                                                                            .from(table("TEST"))
<                                                                            .orderby(column("COL1").asc()));
< 
<         // Previously, we rolled back the transaction; now we are trying the flush an empty transaction.
<         // Therefore, we shouldn't have any rows on the table.
---
>         final List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).orderby(column("COL1").asc()));
772d547
< 
782d556
< 
789d562
< 
792,793c565
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
796d567
< 
803d573
< 
810d579
< 
813,814c582
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
816d583
< 
839d605
< 
847d612
< 
851,852c616
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
854d617
< 
875d637
< 
881,885c643
< 
< 
<         entry.set("COL1", 1);
<         entry.set("COL2", "B");
<         entry.set("COL3", 5);
---
>         entry.set("COL1", 1).set("COL2", "B").set("COL3", 5);
887,890c645
< 
<         entry.set("COL1", 2);
<         entry.set("COL2", "C");
<         entry.set("COL3", 4);
---
>         entry.set("COL1", 2).set("COL2", "C").set("COL3", 4);
892,895c647
< 
<         entry.set("COL1", 3);
<         entry.set("COL2", "D");
<         entry.set("COL3", 3);
---
>         entry.set("COL1", 3).set("COL2", "D").set("COL3", 3);
897,900c649
< 
<         entry.set("COL1", 4);
<         entry.set("COL2", "E");
<         entry.set("COL3", 2);
---
>         entry.set("COL1", 4).set("COL2", "E").set("COL3", 2);
902,905c651
< 
<         entry.set("COL1", 5);
<         entry.set("COL2", "F");
<         entry.set("COL3", 1);
---
>         entry.set("COL1", 5).set("COL2", "F").set("COL3", 1);
907,910c653
< 
<         entry.set("COL1", 6);
<         entry.set("COL2", "G");
<         entry.set("COL3", 0);
---
>         entry.set("COL1", 6).set("COL2", "G").set("COL3", 0);
912d654
< 
917d658
< 
920d660
< 
923d662
< 
941d679
< 
949d686
< 
955d691
< 
979d714
< 
987d721
< 
991,992c725
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
994d726
< 
1014d745
< 
1022d752
< 
1026,1027c756
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1029d757
< 
1053d780
< 
1061d787
< 
1065,1066c791
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1068d792
< 
1075d798
< 
1086d808
< 
1093d814
< 
1096,1097c817
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1100d819
< 
1107d825
< 
1114d831
< 
1117,1118c834
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1121d836
< 
1128d842
< 
1135d848
< 
1138,1139c851
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1142d853
< 
1149d859
< 
1156d865
< 
1159,1160c868
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1163d870
< 
1170d876
< 
1177d882
< 
1180,1181c885
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1184d887
< 
1191d893
< 
1198d899
< 
1201,1202c902
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1205d904
< 
1212d910
< 
1219d916
< 
1222,1223c919
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1225d920
< 
1227,1228c922
< 
<         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), DELTA);
---
>         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), 1e-7);
1234d927
< 
1241d933
< 
1244,1245c936
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1247d937
< 
1249,1250c939
< 
<         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), DELTA);
---
>         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), 1e-7);
1262d950
< 
1266,1269c954
< 
<         engine.persist("TEST", ee
<                 .build());
< 
---
>         engine.persist("TEST", ee.build());
1271d955
< 
1278d961
< 
1370d1052
< 
1372d1053
< 
1378d1058
< 
1390d1069
< 
1392d1070
< 
1398d1075
< 
1404d1080
< 
1406d1081
< 
1418d1092
< 
1420d1093
< 
1427d1099
< 
1429d1100
< 
1435d1105
< 
1437d1106
< 
1448,1453d1116
<     /**
<      * Tests that when persisting an entity in table that does not contain any auto generated values, the
<      * {@link DatabaseEngine#persist(String, EntityEntry)} method returns {@code null}.
<      *
<      * @throws DatabaseEngineException If any error occurs.
<      */
1460d1122
<             // Set the two columns as fields of primary key, so they belong to the generated keys.
1465d1126
< 
1476,1479d1136
<     /**
<      * Tests that when trying to add {@link DbEntity} with multiple columns with auto incremented values, the
<      * {@link DatabaseEngine#addEntity(DbEntity)} method throws a {@link DatabaseEngineException}.
<      */
1502d1158
< 
1504d1159
< 
1511d1165
< 
1513d1166
< 
1519d1171
< 
1521d1172
< 
1523d1173
< 
1538d1187
< 
1540d1188
< 
1547d1194
< 
1553d1199
< 
1555d1200
< 
1562d1206
< 
1571d1214
< 
1578d1220
< 
1590d1231
< 
1607d1247
< 
1624d1263
< 
1642d1280
< 
1664,1665d1301
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1668d1303
< 
1672d1306
< 
1678,1679d1311
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1682d1313
< 
1686d1316
< 
1693d1322
< 
1703d1331
< 
1713d1340
< 
1721,1725d1347
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with a value filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1731,1735d1352
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with SELECT filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1744,1752d1360
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with values filters a row correctly,
<      * when many values are provided.
<      * <p>
<      * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
<      * 20000 values.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1758d1365
< 
1762,1767d1368
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) (Expression, Expression) negated IN} clause
<      * with a value filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1773,1777d1373
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with SELECT filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1786,1794d1381
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with a value filters a row
<      * correctly, when many values are provided.
<      * <p>
<      * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
<      * 20000 values.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1800d1386
< 
1804,1819d1389
<     /**
<      * Common code to run IN clause tests.
<      * <p>
<      * This creates 2 entries in the database:
<      * <table>
<      *     <tr><td>COL1</td><td>COL5</td></tr>
<      *     <tr><td>1</td><td>s1</td></tr>
<      *     <tr><td>2</td><td>s2</td></tr>
<      * </table>
<      * <p>
<      * The verifications expect the provided {@code whereInExpression} to filter the entries such that only the first
<      * one is returned.
<      *
<      * @param whereInExpression The {@link Expression} to use in the WHERE clause of the query.
<      * @throws DatabaseEngineException If a DB error occurs.
<      */
1822d1391
< 
1825d1393
< 
1831d1398
< 
1844d1410
< 
1853d1418
< 
1862d1426
< 
1870d1433
< 
1877d1439
< 
1886d1447
< 
1895d1455
< 
1903d1462
< 
1910d1468
< 
1923d1480
< 
1936d1492
< 
1946,1947d1501
< 
< 
1950d1503
< 
1958d1510
< 
1960d1511
< 
1970d1520
< 
1981d1530
< 
1986d1534
< 
1988,1989d1535
< 
<         // test CAST when writing values
1994d1539
< 
1996,1997d1540
< 
<         // test CAST when reading values
2005d1547
< 
2007d1548
< 
2012,2019d1552
< 
<         /*
<          Until now the test only really checks if the CAST doesn't cause any errors because
<           - when writing values into the DB it automatically casts into the column data type
<           - when reading values from the DB, the test reads the results from the ResultColumn as the desired type
<          Even if we used a function, it is likely the DB would try to cast the parameters to the expected type.
<          To effectively test if CAST works, we need to check if DB sorting considers the column a string or a number.
<          */
2024d1556
< 
2026d1557
< 
2030d1560
< 
2038,2042d1567
<     /**
<      * Check if exception is thrown when trying to cast for an unsupported type.
<      *
<      * @throws DatabaseEngineException If something goes wrong executing the query.
<      */
2051d1575
< 
2053d1576
< 
2062d1584
< 
2069d1590
< 
2071d1591
< 
2078d1597
< 
2080d1598
< 
2089d1606
< 
2098d1614
< 
2100d1615
< 
2110d1624
< 
2112d1625
< 
2121d1633
< 
2127d1638
< 
2135d1645
< 
2137d1646
< 
2142d1650
< 
2152d1659
< 
2161d1667
< 
2165d1670
< 
2181d1685
< 
2187d1690
< 
2207d1709
< 
2214d1715
< 
2225d1725
< 
2236d1735
< 
2261d1759
< 
2269,2275d1766
<     /**
<      * Runs a concat query on the test dataset, given a delimiter.
<      *
<      * @param delimiter the delimiter used in concat.
<      * @return the result set.
<      * @throws DatabaseEngineException if an issue when querying arises.
<      */
2285d1775
< 
2290,2298c1780,1781
<         engine.persist(
<                 "TEST",
<                 entry().set("COL1", 5).set("COL2", "pomme de terre").set("COL3", "pomme de terre").build()
<         );
<         engine.persist(
<                 "TEST",
<                 entry().set("COL1", 6).set("COL2", "lol").set("COL3", null).build()
<         );
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).set("COL2", "pomme de terre").set("COL3", "pomme de terre").build());
>         engine.persist("TEST", entry().set("COL1", 6).set("COL2", "lol").set("COL3", null).build());
2303d1785
< 
2307,2322d1788
<     /**
<      * Reproduces an issue when using CASE ... WHEN expressions in SqlServer and MySql.
<      * <p>
<      * Since we don't have the type information for a column that is generated from the result of a WHEN expression,
<      * we need to rely on the user calling one of the ResultColumn.toXXX methods to understand what the user is
<      * expecting. In the case of ResultColumn.toBoolean(), we're first checking if the result is of boolean type,
<      * as happens normally when the driver knows that the column is of type boolean, but then we also try to parse the
<      * underlying database boolean representation. This is necessary because in WHEN expressions, the driver doesn't
<      * know the expected return type.
<      * <p>
<      * I also tried to fix this using {@code cast(1 as BIT)}, which seemed more appropriate because we would be hinting
<      * the driver about the type, but it's not possible to follow this approach in MySql because we cannot cast to
<      * tinyint(1), which is the native type for booleans in MySql.
<      *
<      * @throws DatabaseEngineException propagate
<      */
2328d1793
< 
2337d1801
< 
2339d1802
< 
2349,2359c1812,1816
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d").build());
2367d1823
< 
2370d1825
< 
2372d1826
< 
2377d1830
< 
2387,2397c1840,1844
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d").build());
2405d1851
< 
2408d1853
< 
2410d1854
< 
2415d1858
< 
2431d1873
< 
2433d1874
< 
2438d1878
< 
2443d1882
< 
2448d1886
< 
2474d1911
< 
2479,2480d1915
< 
<         // If it crashes, the test will fail.
2487d1921
< 
2500d1933
< 
2513d1945
< 
2535d1966
< 
2545d1975
< 
2547d1976
< 
2549d1977
< 
2567d1994
< 
2577,2580c2004
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2590,2593c2014
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2605,2608c2026
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2620,2623c2038
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2643,2659c2058,2064
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre")
<                                       .build());
< 
<         engine.persist("TEST2", entry().set("COL1", 1).set("COL2", "update1")
<                                       .build());
<         engine.persist("TEST2", entry().set("COL1", 5).set("COL2", "update2")
<                                       .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre").build());
>         engine.persist("TEST2", entry().set("COL1", 1).set("COL2", "update1").build());
>         engine.persist("TEST2", entry().set("COL1", 5).set("COL2", "update2").build());
2665d2069
< 
2667,2668d2070
< 
<         // check to see if TEST has changed
2672d2073
< 
2674,2675d2074
< 
<         //check if only the 1st and the 5th were changed.
2686,2689c2085
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2698,2701c2094
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2711,2716c2104,2105
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 6)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
>         engine.persist("TEST", entry().set("COL1", 6).build());
2720d2108
< 
2727d2114
< 
2732d2118
< 
2734d2119
< 
2740d2124
< 
2748d2131
< 
2753d2135
< 
2755d2136
< 
2759d2139
< 
2761d2140
< 
2780d2158
< 
2788d2165
< 
2800,2802c2177
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
<                 .build();
---
>         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
2804,2805c2179
<         entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS2")
<                 .build();
---
>         entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS2").build();
2807d2180
< 
2809d2181
< 
2820d2191
< 
2822d2192
< 
2825d2194
< 
2827d2195
< 
2831d2198
< 
2833d2199
< 
2837d2202
< 
2839d2203
< 
2841d2204
< 
2843d2205
< 
2845d2206
< 
2862d2222
< 
2864d2223
< 
2868d2226
< 
2885d2242
< 
2887,2888d2243
< 
<         // 10 mb
2895d2249
< 
2898d2251
< 
2900d2252
< 
2904,2905d2255
< 
< 
2907d2256
< 
2909d2257
< 
2913d2260
< 
2915d2261
< 
2917d2262
< 
2921d2265
< 
2931d2274
< 
2933d2275
< 
2938d2279
< 
2942d2282
< 
2944d2283
< 
2957d2295
< 
2959d2296
< 
2963d2299
< 
2965d2300
< 
2981,2982c2316
<         engine.addEntity(entity
<                 .build());
---
>         engine.addEntity(entity.build());
2989d2322
< 
2993d2325
< 
2996,2999c2328
<         engine.updateEntity(entity
<                 .build());
< 
<         // as the fields were removed the entity mapping ignores the fields.
---
>         engine.updateEntity(entity.build());
3003,3004d2331
< 
< 
3009d2335
< 
3011,3013c2337
<         engine.updateEntity(entity
<                 .build());
< 
---
>         engine.updateEntity(entity.build());
3017d2340
< 
3024d2346
< 
3029d2350
<         // First drop-create
3045,3048c2366
< 
<         // Clone the connection with the create now.
<         final DatabaseEngine engine2 = this.engine.duplicate(new Properties() {
<             {
---
>         final DatabaseEngine engine2 = this.engine.duplicate(new Properties() {{
3050,3052c2368
<             }
<         }, true);
< 
---
>             }}, true);
3056d2371
< 
3060,3062d2374
< 
<         // as the fields were removed the entity mapping ignores the fields.
<         System.out.println("> " + engine2.getMetadata("TEST"));
3066,3067d2377
< 
< 
3072d2381
< 
3075d2383
< 
3079d2386
< 
3086d2392
< 
3089,3092d2394
<     /**
<      * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a "none" schema policy
<      * still creates the in-memory {@link MappedEntity} with the prepared statements for the entities.
<      */
3097d2398
< 
3107d2407
< 
3109d2408
< 
3112d2410
< 
3120d2417
< 
3128d2424
< 
3130d2425
< 
3132,3133d2426
< 
<         // Persist the entry and make sure it was successful
3136d2428
< 
3138d2429
< 
3140d2430
< 
3148,3151d2437
<     /**
<      * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a "none" schema policy
<      * doesn't execute DDL.
<      */
3155d2440
< 
3158d2442
< 
3168d2451
< 
3182d2464
< 
3192d2473
< 
3199d2479
< 
3202d2481
< 
3205,3207c2484
<         engine.updateEntity(entity
<                 .build());
< 
---
>         engine.updateEntity(entity.build());
3212d2488
< 
3215d2490
< 
3217,3219c2492
<         engine.updateEntity(entity
<                 .build());
< 
---
>         engine.updateEntity(entity.build());
3232,3234c2505
< 
<         DatabaseEngine engine = this.engine.duplicate(new Properties() {
<             {
---
>         DatabaseEngine engine = this.engine.duplicate(new Properties() {{
3236,3238c2507
<             }
<         }, true);
< 
---
>             }}, true);
3248d2516
< 
3255d2522
< 
3258d2524
< 
3262d2527
< 
3267d2531
< 
3270d2533
< 
3273d2535
< 
3290,3291d2551
< 
< 
3294d2553
< 
3296d2554
< 
3303d2560
< 
3311d2567
< 
3313d2568
< 
3322d2576
< 
3325d2578
< 
3327d2579
< 
3329,3330d2580
< 
< 
3333d2582
< 
3335d2583
< 
3337d2584
< 
3339d2585
< 
3341d2586
< 
3345d2589
< 
3355d2598
< 
3357d2599
< 
3360d2601
< 
3363d2603
< 
3365d2604
< 
3369d2607
< 
3371d2608
< 
3373d2609
< 
3375d2610
< 
3377d2611
< 
3381d2614
< 
3391,3392d2623
< 
< 
3394,3396c2625
< 
<         EntityEntry ent = entry().set("COL2", "CENAS1")
<                 .build();
---
>         EntityEntry ent = entry().set("COL2", "CENAS1").build();
3398,3399c2627
<         ent = entry().set("COL2", "CENAS2")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS2").build();
3401,3403c2629
< 
<         ent = entry().set("COL2", "CENAS3").set("COL1", 3)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS3").set("COL1", 3).build();
3405,3407c2631
< 
<         ent = entry().set("COL2", "CENAS5").set("COL1", 5)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS5").set("COL1", 5).build();
3409,3412c2633
< 
< 
<         ent = entry().set("COL2", "CENAS6")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS6").build();
3414,3416c2635
< 
<         ent = entry().set("COL2", "CENAS7")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS7").build();
3418d2636
< 
3439d2656
< 
3441d2657
< 
3445d2660
< 
3449d2663
< 
3453d2666
< 
3457d2669
< 
3461d2672
< 
3465d2675
< 
3471d2680
< 
3481,3482d2689
< 
< 
3484,3486c2691
< 
<         EntityEntry ent = entry().set("COL2", "CENAS1").set("COL1", 1)
<                 .build();
---
>         EntityEntry ent = entry().set("COL2", "CENAS1").set("COL1", 1).build();
3488,3490c2693
< 
<         ent = entry().set("COL2", "CENAS2")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS2").build();
3492,3495c2695
< 
< 
<         ent = entry().set("COL2", "CENAS5").set("COL1", 5)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS5").set("COL1", 5).build();
3497,3499c2697
< 
<         ent = entry().set("COL2", "CENAS6")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS6").build();
3501d2698
< 
3513,3516c2710
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
3518d2711
< 
3520d2712
< 
3523d2714
< 
3530,3531d2720
< 
<         // Drop tables for sanity.
3533,3534d2721
< 
<         // Create the "old" table.
3540,3543c2727
<         engine.persist(oldName, entry().set("timestamp", 20)
<                 .build());
< 
<         // Rename it
---
>         engine.persist(oldName, entry().set("timestamp", 20).build());
3546,3547d2729
< 
<         // Check whether the schema matches
3551,3552d2732
< 
<         // Check the data
3555d2734
< 
3557d2735
< 
3561,3565d2738
<     /**
<      * Drops a list of tables silently (i.e. if it fails, it will just keep on).
<      *
<      * @param tables The tables that we want to drop.
<      */
3579,3587c2752,2755
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "tesTte").build());
3594d2761
< 
3609,3610c2776
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3615d2780
< 
3630,3631c2795
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3634,3636c2798
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 2)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 2).build(), false);
3639d2800
< 
3643,3645c2804
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 4)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 4).build(), false);
3648,3650c2807
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3653,3655c2810
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 6)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 6).build(), false);
3658,3660c2813
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 7)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 7).build(), false);
3663,3665c2816
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3670,3674d2820
<     /**
<      * Creates a {@link DbEntity} with 5 columns to be used in the tests.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the entity.
<      */
3684d2829
< 
3688,3692d2832
<     /**
<      * Creates a {@link DbEntity} with 5 columns being the first the primary key to be used in the tests.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the entity.
<      */
3702d2841
< 
3712d2850
< 
3714d2851
< 
3720d2856
< 
3722d2857
< 
3740d2874
< 
3747,3756c2881,2884
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte").build());
3758d2885
< 
3767,3776c2894,2897
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte").build());
3793d2913
< 
3802,3811c2922,2925
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte").build());
3828d2941
< 
3839,3848c2952,2955
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3855d2961
< 
3866,3875c2972,2975
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3882d2981
< 
3894d2992
< 
3896,3905c2994,2997
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3912d3003
< 
3923,3932c3014,3017
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3939d3023
< 
3994,3996c3078
< 
<         engine.executeUpdate(new AlterColumn(table("TEST"), new DbColumn.Builder().name("COL1").type(DbColumnType.INT).addConstraint(DbColumnConstraint
<                 .NOT_NULL)
---
>         engine.executeUpdate(new AlterColumn(table("TEST"), new DbColumn.Builder().name("COL1").type(DbColumnType.INT).addConstraint(DbColumnConstraint.NOT_NULL)
4014d3095
< 
4029d3109
< 
4031d3110
< 
4034d3112
< 
4042,4043d3119
< 
< 
4049d3124
< 
4055d3129
< 
4058d3131
< 
4082d3154
< 
4084d3155
< 
4087d3157
< 
4123d3192
< 
4127d3195
< 
4131,4137d3198
<     /**
<      * Tests that creating a {@link DatabaseEngine} using try-with-resources will close the engine
<      * (and thus the underlying connection to the database) once the block is exited from.
<      *
<      * @throws Exception if something goes wrong while checking if the connection of the engine is closed.
<      * @since 2.1.12
<      */
4141d3201
< 
4147d3206
< 
4150d3208
< 
4156d3213
< 
4159d3215
< 
4162,4171d3217
<     /**
<      * Test that closing a database engine a 'create-drop' policy with multiple entities closes all insert statements
<      * associated with each entity, regardless of the schema policy used.
<      *
<      * Each entity is associated with 3 prepared statements. This test ensures that 3 PSs per entity are closed.
<      *
<      * @throws DatabaseEngineException  If something goes wrong while adding an entity to the engine.
<      * @throws DatabaseFactoryException If the database engine class specified in the properties does not exist.
<      * @since 2.1.13
<      */
4175,4176d3220
< 
<         // Force the schema policy to be 'create-drop'
4179d3222
< 
4182,4183d3224
< 
<         // Force invocation counting to start here
4185d3225
< 
4187d3226
< 
4191d3229
< 
4194,4199d3231
<     /**
<      * Assesses whether the current row count is incremented if the .next()/.nextResult()
<      * methods are called in the iterator.
<      *
<      * @throws DatabaseEngineException If a database access error happens.
<      */
4203,4204d3234
< 
<         // Create 4 entries
4208d3237
< 
4210d3238
< 
4212,4213d3239
< 
<         // If the .next() method is called once then the current row count should be updated to 1
4215d3240
< 
4217,4219d3241
< 
<         // If for the same iterator the .nextResult() method is called 3 additional
<         // times then the current row count should be updated to 4
4223d3244
< 
4227,4233d3247
<     /**
<      * Tests that a {@link com.feedzai.commons.sql.abstraction.dml.K constant expression} with an enum value behaves
<      * as if the enum is a string (obtained from {@link Enum#name()}, both when persisting an entry and when using
<      * the enum value for filtering in a WHERE clause.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the test entity or persisting entries.
<      */
4237,4238d3250
< 
<         // should fail here if enum is not supported, or it will just put garbage, which will be detected later
4240d3251
< 
4242d3252
< 
4248d3257
< 
4258,4268d3266
<     /**
<      * Tests that when inserting duplicated entries in a table the right exception is returned.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add duplicated entries in a transaction and fail to persist</li>
<      *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>
<      * </ol>
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      */
4272d3269
< 
4279,4280d3275
< 
<         // Add the same entry twice (repeated value for COL1, id)
4290,4300d3284
<     /**
<      * Tests that on a duplicated batch entry situation the right exception is returned.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add duplicated batch entries to transaction and fail to flush</li>
<      *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>
<      * </ol>
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      */
4304d3287
< 
4311,4312d3293
< 
<         // Add the same entry twice (repeated value for COL1, id)
4315,4316d3295
< 
<         // Flush the duplicated entries and check the exception
4325,4327d3303
<     /**
<      * An enum for tests.
<      */
