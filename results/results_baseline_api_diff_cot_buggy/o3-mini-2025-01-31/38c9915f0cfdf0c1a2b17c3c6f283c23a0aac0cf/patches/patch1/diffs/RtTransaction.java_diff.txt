1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
30d6
< import java.util.List;
32,53c8
< import org.cactoos.Text;
< import org.cactoos.iterable.LengthOf;
< import org.cactoos.list.ListOf;
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.ItemAt;
< import org.cactoos.scalar.StickyScalar;
< import org.cactoos.scalar.UncheckedScalar;
< import org.cactoos.text.FormattedText;
< import org.cactoos.text.SplitText;
< import org.cactoos.text.TextOf;
< import org.cactoos.text.TrimmedText;
< import org.cactoos.text.UncheckedText;
< import org.cactoos.time.ZonedDateTimeOf;
< 
< /**
<  * RtTransaction.
<  *
<  * @since 0.1
<  * @checkstyle ClassDataAbstractionCoupling (3 lines)
<  */
< @SuppressWarnings({"PMD.AvoidCatchingGenericException",
<     "PMD.AvoidFieldNameMatchingMethodName"})
---
> 
56,58d10
<     /**
<      * Pattern for Prefix String.
<      */
60,61c12
<         //@checkstyle LineLengthCheck (1 line)
<         "^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$"
---
>         "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
64,66d14
<     /**
<      * Pattern for 16 symbol hex string.
<      */
69,71d16
<     /**
<      * Pattern for parsing Signature.
<      */
74,82c19,20
<     /**
<      * Pattern for Details string.
<      */
<     private static final Pattern DTLS =
<         Pattern.compile("[A-Za-z0-9 -.]{1,512}");
< 
<     /**
<      * Pattern for ID String.
<      */
---
>     private static final Pattern DTLS = Pattern.compile("[A-Za-z0-9 -.]{1,512}");
> 
85,93c23,25
<     /**
<      * String representation of transaction.
<      */
<     private final IoCheckedScalar<String> transaction;
< 
<     /**
<      * Ctor.
<      * @param trnsct String representation of transaction
<      */
---
>     private final String transaction;
>     private String[] tokensCache;
> 
95,105c27
<         this.transaction = new IoCheckedScalar<>(
<             new StickyScalar<>(
<                 () -> {
<                     if (
<                         new TrimmedText(
<                             new TextOf(trnsct)
<                         ).asString().isEmpty()
<                     ) {
<                         throw new IOException(
<                             "Invalid transaction string: string is empty"
<                         );
---
>         this.transaction = trnsct;
107,115c29,37
<                     final List<Text> pieces =
<                         new ListOf<>(
<                             new SplitText(trnsct, ";")
<                         );
<                     // @checkstyle MagicNumberCheck (1 line)
<                     if (new LengthOf(pieces).intValue() != 7) {
<                         throw new IOException(
<                             new FormattedText(
<                                 // @checkstyle LineLength (1 line)
---
> 
>     private String[] tokens() throws IOException {
>         if (this.tokensCache == null) {
>             if (this.transaction.trim().isEmpty()) {
>                 throw new IOException("Invalid transaction string: string is empty");
>             }
>             String[] parts = this.transaction.split(";");
>             if (parts.length != 7) {
>                 throw new IOException(String.format(
117,119c39,40
<                                 pieces.size()
<                             ).asString()
<                         );
---
>                     parts.length
>                 ));
121c42
<                     return trnsct;
---
>             this.tokensCache = parts;
123,124c44
<             )
<         );
---
>         return this.tokensCache;
128d47
<     @SuppressWarnings("PMD.ShortMethodName")
130,141c49,51
<         final String ident = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     0, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.IDENT.matcher(ident).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         String ident = tokens()[0];
>         if (!IDENT.matcher(ident).matches()) {
>             throw new IOException(String.format(
144,146c54
<                     )
<                 ).asString()
<             );
---
>             ));
148d55
<         // @checkstyle MagicNumber (1 line)
154,163c61
<         return new ZonedDateTimeOf(
<             new UncheckedText(
<                 new IoCheckedScalar<>(
<                     new ItemAt<>(
<                         1, new SplitText(this.transaction.value(), ";")
<                     )
<                 ).value()
<             ).asString(),
<             DateTimeFormatter.ISO_OFFSET_DATE_TIME
<         ).value();
---
>         return ZonedDateTime.parse(tokens()[1], DateTimeFormatter.ISO_OFFSET_DATE_TIME);
168,179c66,68
<         final String amnt = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     2, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.HEX.matcher(amnt).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         String amnt = tokens()[2];
>         if (!HEX.matcher(amnt).matches()) {
>             throw new IOException(String.format(
182,184c71
<                     )
<                 ).asString()
<             );
---
>             ));
186d72
<         // @checkstyle MagicNumber (1 line)
192,200c78
<         final String prefix = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     3, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         //@checkstyle MagicNumberCheck (1 line)
---
>         String prefix = tokens()[3];
204c82
<         if (!RtTransaction.PREFIX.matcher(prefix).matches()) {
---
>         if (!PREFIX.matcher(prefix).matches()) {
212,224c90,92
<         final String bnf = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     4, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.HEX.matcher(bnf).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         String bnf = tokens()[4];
>         if (!HEX.matcher(bnf).matches()) {
>             throw new IOException(String.format(
227,229c95
<                     )
<                 ).asString()
<             );
---
>             ));
236,248c102,104
<         final String dtls = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     5, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.DTLS.matcher(dtls).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         String dtls = tokens()[5];
>         if (!DTLS.matcher(dtls).matches()) {
>             throw new IOException(String.format(
250,253c106,107
<                         dtls, RtTransaction.DTLS
<                     )
<                 ).asString()
<             );
---
>                 dtls, DTLS.toString()
>             ));
260,274c114,116
<         final String sign = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     6, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         // @checkstyle MagicNumber (1 line)
<         if (sign.length() != 684
<             || !RtTransaction.SIGN.matcher(sign).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         String sign = tokens()[6];
>         if (sign.length() != 684 || !SIGN.matcher(sign).matches()) {
>             throw new IOException(String.format(
277,279c119
<                     )
<                 ).asString()
<             );
---
>             ));
286c126
<         return new UncheckedScalar<>(this.transaction).value();
---
>         return this.transaction;
290d129
<     @SuppressWarnings("PMD.OnlyOneReturn")
