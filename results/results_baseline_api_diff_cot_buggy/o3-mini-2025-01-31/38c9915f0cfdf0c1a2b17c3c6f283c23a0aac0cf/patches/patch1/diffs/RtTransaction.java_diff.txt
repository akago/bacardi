1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
30d6
< import java.util.List;
32,38d7
< import org.cactoos.Text;
< import org.cactoos.iterable.LengthOf;
< import org.cactoos.list.ListOf;
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.ItemAt;
< import org.cactoos.scalar.StickyScalar;
< import org.cactoos.scalar.UncheckedScalar;
40,43d8
< import org.cactoos.text.SplitText;
< import org.cactoos.text.TextOf;
< import org.cactoos.text.TrimmedText;
< import org.cactoos.text.UncheckedText;
60d24
<         //@checkstyle LineLengthCheck (1 line)
88c52
<     private final IoCheckedScalar<String> transaction;
---
>     private final String transaction;
95,105c59
<         this.transaction = new IoCheckedScalar<>(
<             new StickyScalar<>(
<                 () -> {
<                     if (
<                         new TrimmedText(
<                             new TextOf(trnsct)
<                         ).asString().isEmpty()
<                     ) {
<                         throw new IOException(
<                             "Invalid transaction string: string is empty"
<                         );
---
>         this.transaction = trnsct;
107,112c61,73
<                     final List<Text> pieces =
<                         new ListOf<>(
<                             new SplitText(trnsct, ";")
<                         );
<                     // @checkstyle MagicNumberCheck (1 line)
<                     if (new LengthOf(pieces).intValue() != 7) {
---
> 
>     /**
>      * Splits and validates the transaction string.
>      *
>      * @return the parts of the transaction string.
>      * @throws IOException if the transaction string is invalid.
>      */
>     private String[] parts() throws IOException {
>         if (this.transaction.trim().isEmpty()) {
>             throw new IOException("Invalid transaction string: string is empty");
>         }
>         String[] parts = this.transaction.split(";", -1);
>         if (parts.length != 7) {
115d75
<                                 // @checkstyle LineLength (1 line)
117c77
<                                 pieces.size()
---
>                     parts.length
121,124c81
<                     return trnsct;
<                 }
<             )
<         );
---
>         return parts;
130,136c87
<         final String ident = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     0, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String ident = parts()[0];
139d89
<                 new UncheckedText(
141d90
<                         // @checkstyle LineLength (1 line)
144d92
<                     )
148d95
<         // @checkstyle MagicNumber (1 line)
153a101
>         String timeStr = parts()[1];
155,161c103
<             new UncheckedText(
<                 new IoCheckedScalar<>(
<                     new ItemAt<>(
<                         1, new SplitText(this.transaction.value(), ";")
<                     )
<                 ).value()
<             ).asString(),
---
>             timeStr,
168,174c110
<         final String amnt = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     2, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String amnt = parts()[2];
177d112
<                 new UncheckedText(
179d113
<                         // @checkstyle LineLength (1 line)
182d115
<                     )
186d118
<         // @checkstyle MagicNumber (1 line)
192,200c124
<         final String prefix = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     3, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         //@checkstyle MagicNumberCheck (1 line)
---
>         String prefix = parts()[3];
212,219c136
<         final String bnf = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     4, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String bnf = parts()[4];
222d138
<                 new UncheckedText(
224d139
<                         // @checkstyle LineLength (1 line)
227d141
<                     )
236,243c150
<         final String dtls = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     5, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String dtls = parts()[5];
246d152
<                 new UncheckedText(
248d153
<                         // @checkstyle LineLength (1 line)
251d155
<                     )
260,268c164
<         final String sign = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     6, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         // @checkstyle MagicNumber (1 line)
---
>         String sign = parts()[6];
272d167
<                 new UncheckedText(
274d168
<                         // @checkstyle LineLength (1 line)
277d170
<                     )
286c179
<         return new UncheckedScalar<>(this.transaction).value();
---
>         return this.transaction;
