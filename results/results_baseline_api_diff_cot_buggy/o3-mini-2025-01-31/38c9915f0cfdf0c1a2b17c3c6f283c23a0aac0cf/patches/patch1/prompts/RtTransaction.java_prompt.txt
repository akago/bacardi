You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates. Your task is to analyze the provided code, error information, and API changes, then propose and apply a patch to fix the issue while adhering to specific constraints.

Here is the Java code that is failing:

```java
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.zold.api;

import java.io.IOException;
import java.math.BigInteger;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.regex.Pattern;
import org.cactoos.Text;
import org.cactoos.iterable.LengthOf;
import org.cactoos.list.ListOf;
import org.cactoos.scalar.IoCheckedScalar;
import org.cactoos.scalar.ItemAt;
import org.cactoos.scalar.StickyScalar;
import org.cactoos.scalar.UncheckedScalar;
import org.cactoos.text.FormattedText;
import org.cactoos.text.SplitText;
import org.cactoos.text.TextOf;
import org.cactoos.text.TrimmedText;
import org.cactoos.text.UncheckedText;
import org.cactoos.time.ZonedDateTimeOf;

/**
 * RtTransaction.
 *
 * @since 0.1
 * @checkstyle ClassDataAbstractionCoupling (3 lines)
 */
@SuppressWarnings({"PMD.AvoidCatchingGenericException",
    "PMD.AvoidFieldNameMatchingMethodName"})
final class RtTransaction implements Transaction {

    /**
     * Pattern for Prefix String.
     */
    private static final Pattern PREFIX = Pattern.compile(
        //@checkstyle LineLengthCheck (1 line)
        "^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$"
    );

    /**
     * Pattern for 16 symbol hex string.
     */
    private static final Pattern HEX = Pattern.compile("[A-Fa-f0-9]{16}");

    /**
     * Pattern for parsing Signature.
     */
    private static final Pattern SIGN = Pattern.compile("[A-Za-z0-9+/]+={0,3}");

    /**
     * Pattern for Details string.
     */
    private static final Pattern DTLS =
        Pattern.compile("[A-Za-z0-9 -.]{1,512}");

    /**
     * Pattern for ID String.
     */
    private static final Pattern IDENT = Pattern.compile("[A-Fa-f0-9]{4}");

    /**
     * String representation of transaction.
     */
    private final IoCheckedScalar<String> transaction;

    /**
     * Ctor.
     * @param trnsct String representation of transaction
     */
    RtTransaction(final String trnsct) {
        this.transaction = new IoCheckedScalar<>(
            new StickyScalar<>(
                () -> {
                    if (
                        new TrimmedText(
                            new TextOf(trnsct)
                        ).asString().isEmpty()
                    ) {
                        throw new IOException(
                            "Invalid transaction string: string is empty"
                        );
                    }
                    final List<Text> pieces =
                        new ListOf<>(
                            new SplitText(trnsct, ";")
                        );
                    // @checkstyle MagicNumberCheck (1 line)
                    if (new LengthOf(pieces).intValue() != 7) {
                        throw new IOException(
                            new FormattedText(
                                // @checkstyle LineLength (1 line)
                                "Invalid transaction string: expected 7 fields, but found %d",
                                pieces.size()
                            ).asString()
                        );
                    }
                    return trnsct;
                }
            )
        );
    }

    @Override
    @SuppressWarnings("PMD.ShortMethodName")
    public int id() throws IOException {
        final String ident = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    0, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        if (!RtTransaction.IDENT.matcher(ident).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols",
                        ident
                    )
                ).asString()
            );
        }
        // @checkstyle MagicNumber (1 line)
        return Integer.parseUnsignedInt(ident, 16);
    }

    @Override
    public ZonedDateTime time() throws IOException {
        return new ZonedDateTimeOf(
            new UncheckedText(
                new IoCheckedScalar<>(
                    new ItemAt<>(
                        1, new SplitText(this.transaction.value(), ";")
                    )
                ).value()
            ).asString(),
            DateTimeFormatter.ISO_OFFSET_DATE_TIME
        ).value();
    }

    @Override
    public long amount() throws IOException {
        final String amnt = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    2, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        if (!RtTransaction.HEX.matcher(amnt).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols",
                        amnt
                    )
                ).asString()
            );
        }
        // @checkstyle MagicNumber (1 line)
        return new BigInteger(amnt, 16).longValue();
    }

    @Override
    public String prefix() throws IOException {
        final String prefix = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    //@checkstyle MagicNumberCheck (1 line)
                    3, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        //@checkstyle MagicNumberCheck (1 line)
        if (prefix.length() < 8 || prefix.length() > 32) {
            throw new IOException("Invalid prefix size");
        }
        if (!RtTransaction.PREFIX.matcher(prefix).matches()) {
            throw new IOException("Invalid base64 prefix");
        }
        return prefix;
    }

    @Override
    public String bnf() throws IOException {
        final String bnf = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    //@checkstyle MagicNumberCheck (1 line)
                    4, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        if (!RtTransaction.HEX.matcher(bnf).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid bnf string '%s', expecting hex string with 16 symbols",
                        bnf
                    )
                ).asString()
            );
        }
        return bnf;
    }

    @Override
    public String details() throws IOException {
        final String dtls = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    //@checkstyle MagicNumberCheck (1 line)
                    5, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        if (!RtTransaction.DTLS.matcher(dtls).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid details string '%s', does not match pattern '%s'",
                        dtls, RtTransaction.DTLS
                    )
                ).asString()
            );
        }
        return dtls;
    }

    @Override
    public String signature() throws IOException {
        final String sign = new UncheckedText(
            new IoCheckedScalar<>(
                new ItemAt<>(
                    //@checkstyle MagicNumberCheck (1 line)
                    6, new SplitText(this.transaction.value(), ";")
                )
            ).value()
        ).asString();
        // @checkstyle MagicNumber (1 line)
        if (sign.length() != 684
            || !RtTransaction.SIGN.matcher(sign).matches()) {
            throw new IOException(
                new UncheckedText(
                    new FormattedText(
                        // @checkstyle LineLength (1 line)
                        "Invalid signature '%s', expecting base64 string with 684 characters",
                        sign
                    )
                ).asString()
            );
        }
        return sign;
    }

    @Override
    public String toString() {
        return new UncheckedScalar<>(this.transaction).value();
    }

    @Override
    @SuppressWarnings("PMD.OnlyOneReturn")
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final RtTransaction that = (RtTransaction) obj;
        return this.transaction.equals(that.transaction);
    }

    @Override
    public int hashCode() {
        return this.transaction.hashCode();
    }
}

```

The errors are triggered in the following specific lines:

<error_lines>
```java
import org.cactoos.iterable.LengthOf;
```
```java
import org.cactoos.scalar.UncheckedScalar;
```
```java
import org.cactoos.scalar.StickyScalar;
```
```java
private final IoCheckedScalar<String> transaction;
```
```java
import org.cactoos.scalar.IoCheckedScalar;
```
```java
import org.cactoos.text.SplitText;
```
```java
import org.cactoos.text.TrimmedText;
```
</error_lines>

The API of the dependency has changed. Here are the relevant changes:

     Type reference org.cactoos.scalar.LengthOf(org.cactoos.Input,int) has been added in the new version of the dependency.
     Constructor org.cactoos.io.LengthOf(org.cactoos.Input,int) has been removed in the new version of the dependency.
     Constructor org.cactoos.iterable.LengthOf(java.lang.Iterable) has been removed in the new version of the dependency.
     Type reference org.cactoos.scalar.LengthOf(java.lang.Iterable) has been added in the new version of the dependency.
     Class org.cactoos.iterator.LengthOf has been removed in the new version of the dependency.
     Type reference org.cactoos.scalar.LengthOf(org.cactoos.Input) has been added in the new version of the dependency.
     Interface org.cactoos.scalar.LengthOf has been added in the new version of the dependency.
     Constructor org.cactoos.io.LengthOf(org.cactoos.Input) has been removed in the new version of the dependency.
     Type reference org.cactoos.scalar.LengthOf(org.cactoos.Text) has been added in the new version of the dependency.
     Class org.cactoos.io.LengthOf has been removed in the new version of the dependency.
     Class org.cactoos.iterable.LengthOf has been removed in the new version of the dependency.
     Constructor org.cactoos.iterator.LengthOf(java.util.Iterator) has been removed in the new version of the dependency.
     Class org.cactoos.scalar.UncheckedScalar has been removed in the new version of the dependency.
     Constructor org.cactoos.scalar.UncheckedScalar(org.cactoos.Scalar) has been removed in the new version of the dependency.
     Class org.cactoos.scalar.StickyScalar has been removed in the new version of the dependency.
     Constructor org.cactoos.scalar.StickyScalar(org.cactoos.Scalar) has been removed in the new version of the dependency.
     Class org.cactoos.scalar.IoCheckedScalar has been removed in the new version of the dependency.
     Constructor org.cactoos.scalar.IoCheckedScalar(org.cactoos.Scalar) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.text.UncheckedText,org.cactoos.text.UncheckedText) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.Text,org.cactoos.Text) has been removed in the new version of the dependency.
     Class org.cactoos.text.SplitText has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(java.lang.String,java.lang.String) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(org.cactoos.Text,java.lang.String) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.SplitText(java.lang.String,org.cactoos.Text) has been removed in the new version of the dependency.
     Constructor org.cactoos.text.TrimmedText(org.cactoos.Text) has been removed in the new version of the dependency.
     Class org.cactoos.text.TrimmedText has been removed in the new version of the dependency.

Additional error information:

<error_information>
[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[33,28] cannot find symbol
  symbol:   class LengthOf
  location: package org.cactoos.iterable

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[38,26] cannot find symbol
  symbol:   class UncheckedScalar
  location: package org.cactoos.scalar

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[37,26] cannot find symbol
  symbol:   class StickyScalar
  location: package org.cactoos.scalar

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[88,19] cannot find symbol
  symbol:   class IoCheckedScalar
  location: class io.zold.api.RtTransaction

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[35,26] cannot find symbol
  symbol:   class IoCheckedScalar
  location: package org.cactoos.scalar

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[40,24] cannot find symbol
  symbol:   class SplitText
  location: package org.cactoos.text

[ERROR] /java-api/src/main/java/io/zold/api/RtTransaction.java:[42,24] cannot find symbol
  symbol:   class TrimmedText
  location: package org.cactoos.text
<error_information>

Your task is to fix the issue by modifying only the client code. Follow these steps:

1. Analyze the problem and propose changes by wrapping the work inside fix_planning tags. This analysis is for your internal use only and will not be included in the final output. In your analysis:
   a. Quote relevant parts of the code and API changes
   b. Identify the specific API changes causing the issue
   c. List the affected lines of code
   d. Propose potential fixes for each affected line
   e. Consider any potential side effects of the proposed changes
   f. Explicitly check if the proposed changes adhere to all the given constraints
   g. Provide a final summary of the chosen fix and why it's the best solution

2. Apply the fix to the Java code.

3. Output the complete, fixed Java class in a fenced code block. This should be the only visible output in your response.

Constraints:
1. Do not change the function signature of any method.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation if and only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Do not remove any existing code unless it directly causes a compilation or functionality error.
6. Include all code, even unchanged portions, in your final output.
7. Do not use placeholder comments like "// ... (rest of the code remains unchanged)".

Your final output should only contain the complete, fixed Java class in a fenced code block, without any explanations or analysis visible. The <fix_planning> section is for your internal use only.

Example output structure:

```java
[Complete, fixed Java class]
```

Please proceed with your analysis and solution.
