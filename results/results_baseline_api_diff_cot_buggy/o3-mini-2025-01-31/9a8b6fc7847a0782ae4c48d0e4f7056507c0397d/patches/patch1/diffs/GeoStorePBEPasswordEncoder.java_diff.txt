3,22d2
< /*
<  *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.
<  *  http://www.geo-solutions.it
<  *
<  *  GPLv3 + Classpath exception
<  *
<  *  This program is free software: you can redistribute it and/or modify
<  *  it under the terms of the GNU General Public License as published by
<  *  the Free Software Foundation, either version 3 of the License, or
<  *  (at your option) any later version.
<  *
<  *  This program is distributed in the hope that it will be useful,
<  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  *  GNU General Public License for more details.
<  *
<  *  You should have received a copy of the GNU General Public License
<  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
<  */
< 
33,45c13
< import org.jasypt.spring.security.PBEPasswordEncoder;
< /**
<  * Password Encoder using symmetric encryption
<  * 
<  * The salt parameter is not used, this implementation computes a random salt as
<  * default.
<  * 
<  * {@link #isPasswordValid(String, String, Object)}
<  * {@link #encodePassword(String, Object)}
<  * 
<  * @author Lorenzo Natali
<  * 
<  */
---
> 
91d58
< 
102,103c69,73
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
---
>             return new PasswordEncoder() {
>                 @Override
>                 public String encodePassword(String rawPass, Object salt) {
>                     return stringEncrypter.encrypt(rawPass);
>                 }
105c75,79
<                         return encoder;
---
>                 @Override
>                 public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
>                     return stringEncrypter.decrypt(encPass).equals(rawPass);
>                 }
>             };
127,128c101
<                         public boolean isPasswordValid(String encPass, char[] rawPass,
<                                         Object salt) {
---
>             public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
145,146c118
<                                         return new String(Base64.getEncoder().encode(byteEncrypter
<                                                         .encrypt(bytes)));
---
>                     return new String(Base64.getEncoder().encode(byteEncrypter.encrypt(bytes)));
157,159c129
<                                 throw new RuntimeException("Keystore: "
<                                                 + keystoreProvider.getFile() + " does not"
<                                                 + " contain alias: " + getKeyAliasInKeyStore());
---
>                 throw new RuntimeException("Keystore: " + keystoreProvider.getFile() + " does not contain alias: " + getKeyAliasInKeyStore());
161,162c131
<                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore())
<                                         .getEncoded();
---
>             return keystoreProvider.getSecretKey(getKeyAliasInKeyStore()).getEncoded();
164,166c133
<                         throw new RuntimeException("Cannot find alias: "
<                                         + getKeyAliasInKeyStore() + " in "
<                                         + keystoreProvider.getFile().getAbsolutePath());
---
>             throw new RuntimeException("Cannot find alias: " + getKeyAliasInKeyStore() + " in " + keystoreProvider.getFile().getAbsolutePath());
177d143
<                         // not initialized
180d145
< 
185,186c150
<         public char[] decodeToCharArray(String encPass)
<                         throws UnsupportedOperationException {
---
>     public char[] decodeToCharArray(String encPass) throws UnsupportedOperationException {
188d151
<                         // not initialized
191d153
< 
200d161
<         
