33c33
< import org.jasypt.spring.security.PBEPasswordEncoder;
---
> 
102,103c102,105
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
---
>                         return new PasswordEncoder() {
>                                 public String encodePassword(String rawPassword, Object salt) {
>                                         return stringEncrypter.encrypt(rawPassword);
>                                 }
105c107,114
<                         return encoder;
---
>                                 public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
>                                         try {
>                                                 return stringEncrypter.decrypt(encPass).equals(rawPass);
>                                         } catch (Exception e) {
>                                                 return false;
>                                         }
>                                 }
>                         };
127,128c136
<                         public boolean isPasswordValid(String encPass, char[] rawPass,
<                                         Object salt) {
---
>                         public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
145,146c153
<                                         return new String(Base64.getEncoder().encode(byteEncrypter
<                                                         .encrypt(bytes)));
---
>                                         return new String(Base64.getEncoder().encode(byteEncrypter.encrypt(bytes)));
157,158c164
<                                 throw new RuntimeException("Keystore: "
<                                                 + keystoreProvider.getFile() + " does not"
---
>                                 throw new RuntimeException("Keystore: " + keystoreProvider.getFile() + " does not"
161,162c167
<                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore())
<                                         .getEncoded();
---
>                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore()).getEncoded();
164,165c169
<                         throw new RuntimeException("Cannot find alias: "
<                                         + getKeyAliasInKeyStore() + " in "
---
>                         throw new RuntimeException("Cannot find alias: " + getKeyAliasInKeyStore() + " in "
185,186c189
<         public char[] decodeToCharArray(String encPass)
<                         throws UnsupportedOperationException {
---
>         public char[] decodeToCharArray(String encPass) throws UnsupportedOperationException {
