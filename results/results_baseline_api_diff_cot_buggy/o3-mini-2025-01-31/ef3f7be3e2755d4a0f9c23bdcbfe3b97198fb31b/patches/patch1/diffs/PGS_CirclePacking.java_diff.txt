23,28c23,26
< import org.tinfour.common.IIncrementalTin;
< import org.tinfour.common.SimpleTriangle;
< import org.tinfour.common.Vertex;
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
---
> // Removed imports for the removed dependency API
> // import org.tinspin.index.PointEntryDist;
> // import org.tinspin.index.covertree.CoverTree;
> // import org.tinspin.index.PointDistanceFunction;
158c156
<          *         the center point and .z represents radius.
---
>          *         the center point, and .z represents the radius.
203c201
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final SimpleCircleIndex tree = new SimpleCircleIndex();
217c215,218
<                 vertices.forEach(p -> tree.insert(new double[] { p.x, p.y, 0 }, p));
---
>                 for (PVector p : vertices) {
>                         p.z = 0;
>                         tree.insert(p);
>                 }
226c227
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
---
>                         final PVector nn = tree.queryNearest(p.x, p.y, largestR); // find nearest-neighbour circle
228,235c229,231
<                         /*
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                         final float dx = p.x - nn.x;
>                         final float dy = p.y - nn.y;
>                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.z);
239c235
<                                 tree.insert(new double[] { p.x, p.y, radius }, p); // insert circle into tree
---
>                                 tree.insert(p);
627,656d622
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
662a629,655
> 
>         // Removed the old circleDistanceMetric and related dependency code.
> 
>         // SimpleCircleIndex performs a brute-force nearest neighbor search for circles.
>         private static class SimpleCircleIndex {
>                 private final List<PVector> points = new ArrayList<>();
> 
>                 public void insert(PVector circle) {
>                         points.add(circle);
>                 }
> 
>                 public PVector queryNearest(float x, float y, float queryRadius) {
>                         PVector best = null;
>                         float bestMetric = Float.POSITIVE_INFINITY;
>                         for (PVector v : points) {
>                                 float dx = x - v.x;
>                                 float dy = y - v.y;
>                                 float metric = (float) Math.sqrt(dx * dx + dy * dy) - v.z;
>                                 if (metric < bestMetric) {
>                                         bestMetric = metric;
>                                         best = v;
>                                 }
>                         }
>                         // In case there are no points inserted, which shouldn't happen because vertices are inserted first.
>                         return best != null ? best : new PVector(x, y, 0);
>                 }
>         }
