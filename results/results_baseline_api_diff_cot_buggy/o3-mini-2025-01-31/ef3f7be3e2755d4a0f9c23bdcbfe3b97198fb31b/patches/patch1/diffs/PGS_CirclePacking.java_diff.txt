26,28c26,27
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
---
> import processing.core.PShape;
> import processing.core.PVector;
34,35d32
< import processing.core.PShape;
< import processing.core.PVector;
165d161
<          * 
203c199
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final List<PVector> treeList = new ArrayList<>();
209,210c205,206
<                         steinerPoints = StreamSupport.stream(tin.triangles().spliterator(), false).filter(filterBorderTriangles)
<                                         .map(PGS_CirclePacking::centroid).collect(Collectors.toList());
---
>                         steinerPoints = StreamSupport.stream(tin.triangles().spliterator(), false)
>                                         .filter(filterBorderTriangles).map(PGS_CirclePacking::centroid).collect(Collectors.toList());
213,214c209
<                 // Model shape vertices as circles of radius 0, to constrain packed circles
<                 // within shape edge
---
>                 // Model shape vertices as circles of radius 0, to constrain packed circles within shape edge
216,217c211,214
<                 Collections.shuffle(vertices); // shuffle vertices to reduce tree imbalance during insertion
<                 vertices.forEach(p -> tree.insert(new double[] { p.x, p.y, 0 }, p));
---
>                 Collections.shuffle(vertices);
>                 for (PVector vertex : vertices) {
>                         treeList.add(new PVector(vertex.x, vertex.y, 0));
>                 }
226,227c223,226
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
< 
---
>                         PVector nn = findNearestNeighbor(treeList, p.x, p.y, largestR);
>                         if (nn == null) {
>                                 nn = new PVector(0, 0, 0);
>                         }
229,235c228,234
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                          * nn does not return the radius directly (since it's a distance metric used to
>                          * find the nearest circle), so calculate maximum radius for candidate circle using
>                          * 2D euclidean distance between center points minus radius of the nearest circle.
>                          */
>                         final float dx = p.x - nn.x;
>                         final float dy = p.y - nn.y;
>                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.z);
239c238
<                                 tree.insert(new double[] { p.x, p.y, radius }, p); // insert circle into tree
---
>                                 treeList.add(new PVector(p.x, p.y, radius)); // insert circle into tree
247c246
<          * Generates a random circle packing of tangential circles with varying radii
---
>          * Generates a circle packing of tangential circles with varying radii
285,287c284
< 
<                                 // if center point not in circle, check whether circle overlaps with shape using
<                                 // intersects() (somewhat slower)
---
>                                 // if center point not in circle, check whether circle overlaps with shape using intersects() (somewhat slower)
627,656d623
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
663a631,656
>         /**
>          * Finds the nearest neighbor circle from a list using a custom metric which is
>          * defined as the 2D Euclidean distance between centers plus the absolute difference
>          * of their radii.
>          * 
>          * @param treeList the list of circles (each represented as a PVector with x, y, z)
>          * @param qx       query x coordinate
>          * @param qy       query y coordinate
>          * @param qz       query z value (used for radius comparison)
>          * @return the nearest PVector from the list according to the custom metric
>          */
>         private static PVector findNearestNeighbor(List<PVector> treeList, double qx, double qy, double qz) {
>                 double bestDist = Double.MAX_VALUE;
>                 PVector best = null;
>                 for (PVector candidate : treeList) {
>                         double dx = candidate.x - qx;
>                         double dy = candidate.y - qy;
>                         double ed = Math.sqrt(dx * dx + dy * dy);
>                         double d = ed + Math.abs(candidate.z - qz);
>                         if (d < bestDist) {
>                                 bestDist = d;
>                                 best = candidate;
>                         }
>                 }
>                 return best;
>         }
