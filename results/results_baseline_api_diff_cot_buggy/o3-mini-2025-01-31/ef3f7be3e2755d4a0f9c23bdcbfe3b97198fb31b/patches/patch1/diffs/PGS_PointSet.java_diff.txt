26c26
< import org.tinspin.index.kdtree.KDTree;
---
> import org.tinspin.index.kdtree.KDTree; // Note: This import can be removed if not used elsewhere
66d65
<                 final KDTree<PVector> tree = KDTree.create(2);
67a67
>                 double tolSq = distanceTolerance * distanceTolerance;
69,71c69,78
<                         final double[] coords = new double[] { p.x, p.y };
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
<                                 tree.insert(coords, p);
---
>                         boolean tooClose = false;
>                         for (PVector np : newPoints) {
>                                 double dx = p.x - np.x;
>                                 double dy = p.y - np.y;
>                                 if (dx * dx + dy * dy <= tolSq) {
>                                         tooClose = true;
>                                         break;
>                                 }
>                         }
>                         if (!tooClose) {
