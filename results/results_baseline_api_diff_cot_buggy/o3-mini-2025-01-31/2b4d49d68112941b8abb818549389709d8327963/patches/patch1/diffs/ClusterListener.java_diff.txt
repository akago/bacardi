18,26c18,23
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.EntryListener;
< import com.hazelcast.core.LifecycleEvent;
< import com.hazelcast.core.LifecycleEvent.LifecycleState;
< import com.hazelcast.core.LifecycleListener;
< import com.hazelcast.core.Member;
< import com.hazelcast.core.MemberAttributeEvent;
< import com.hazelcast.core.MembershipEvent;
< import com.hazelcast.core.MembershipListener;
---
> import com.hazelcast.cluster.Cluster;
> import com.hazelcast.cluster.LifecycleEvent;
> import com.hazelcast.cluster.MembershipEvent;
> import com.hazelcast.cluster.MembershipListener;
> import com.hazelcast.cluster.Member;
> import com.hazelcast.cluster.MemberAttributeEvent;
48,52c45
< /**
<  * ClusterListener reacts to membership changes in the cluster. It takes care of cleaning up the state
<  * of the routing table and the sessions within it when a node which manages those sessions goes down.
<  */
< public class ClusterListener implements MembershipListener, LifecycleListener {
---
> public class ClusterListener implements MembershipListener {
76d68
< 
164d155
< 
179,181d169
<                 // The following line was intended to wait until all local handling finishes before informing other
<                 // nodes. However that proved to be insufficient. Hence the 30 second default wait in the lines above.
<                 // TODO Instead of the 30 second wait, we should look (and then wait) for some trigger or event that signifies that local handling has completed and caches have stabilized.
261d248
<     @Override
263c250
<         if (event.getState().equals(LifecycleState.SHUTDOWN)) {
---
>         if (event.getState().equals(LifecycleEvent.LifecycleState.SHUTDOWN)) {
265c252
<         } else if (event.getState().equals(LifecycleState.STARTED)) {
---
>         } else if (event.getState().equals(LifecycleEvent.LifecycleState.STARTED)) {
280a268,271
>     }
>     
>     private interface EntryListener {
>         // Empty placeholder interface for compatibility with the new Hazelcast API
