23,28d22
< import org.tinfour.common.IIncrementalTin;
< import org.tinfour.common.SimpleTriangle;
< import org.tinfour.common.Vertex;
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
158c152
<          *         the center point and .z represents radius.
---
>          *         the center point, and .z represents the radius.
203c197
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final List<PVector> tree = new ArrayList<>();
216,217c210,211
<                 Collections.shuffle(vertices); // shuffle vertices to reduce tree imbalance during insertion
<                 vertices.forEach(p -> tree.insert(new double[] { p.x, p.y, 0 }, p));
---
>                 Collections.shuffle(vertices); // shuffle vertices to reduce imbalance during search
>                 vertices.forEach(p -> tree.add(p));
220,221c214,215
<                  * "To find the circle nearest to a center (x, y), do a proximity search at (x,
<                  * y, R), where R is greater than or equal to the maximum radius of a circle."
---
>                  * "To find the circle nearest to a center (x, y), perform a linear search using
>                  * a custom distance metric: sqrt((x1-x2)^2+(y1-y2)^2) + |r1 - r2|."
223c217
<                 float largestR = 0; // the radius of the largest circle in the tree
---
>                 float largestR = 0; // the radius of the largest circle in the index
226,235c220,223
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
< 
<                         /*
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                         final PVector nn = queryNearest(tree, new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
>                         final float dx = p.x - nn.x;
>                         final float dy = p.y - nn.y;
>                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.z);
239c227
<                                 tree.insert(new double[] { p.x, p.y, radius }, p); // insert circle into tree
---
>                                 tree.add(p);
247c235
<          * Generates a random circle packing of tangential circles with varying radii
---
>          * Generates a circle packing of tangential circles with varying radii
627,656d614
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
662a621,645
> 
>         /**
>          * Performs a linear nearest neighbor search on the list of circles using the
>          * custom metric: sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
>          * 
>          * @param circles the list of circles
>          * @param query   the query point in the form [x, y, r]
>          * @return the nearest neighbor circle (PVector)
>          */
>         private static PVector queryNearest(List<PVector> circles, double[] query) {
>                 double bestDist = Double.MAX_VALUE;
>                 PVector best = null;
>                 for (PVector v : circles) {
>                         double dx = query[0] - v.x;
>                         double dy = query[1] - v.y;
>                         double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
>                         double absDiff = Math.abs(query[2] - v.z);
>                         double dist = euclideanDistance + absDiff;
>                         if (dist < bestDist) {
>                                 bestDist = dist;
>                                 best = v;
>                         }
>                 }
>                 return best;
>         }
