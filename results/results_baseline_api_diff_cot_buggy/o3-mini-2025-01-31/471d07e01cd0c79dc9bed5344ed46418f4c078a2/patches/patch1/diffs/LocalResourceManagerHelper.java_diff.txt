25,31c25,31
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Binding;
> import com.google.api.services.cloudresourcemanager.v3.model.Operation;
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
> import com.google.api.services.cloudresourcemanager.v3.model.Project;
> import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;
285c285,289
<                     jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
---
>                     jsonFactory.toString(
>                         new Operation()
>                             .setDone(true)
>                             .setName("operations/" + project.getProjectId())
>                             .setResponse(project)));
449,450c453
<       project.setLifecycleState("ACTIVE");
<       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
---
>       project.setState("ACTIVE");
483c486
<     if (!project.getLifecycleState().equals("ACTIVE")) {
---
>     if (!project.getState().equals("ACTIVE")) {
487c490
<       project.setLifecycleState("DELETE_REQUESTED");
---
>       project.setState("DELETE_REQUESTED");
618c621
<           project.setLifecycleState(fullProject.getLifecycleState());
---
>           project.setState(fullProject.getState());
629,631d631
<         case "projectNumber":
<           project.setProjectNumber(fullProject.getProjectNumber());
<           break;
642c642
<     } else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
---
>     } else if (!originalProject.getState().equals("ACTIVE")) {
651c651
<     project.setLifecycleState(originalProject.getLifecycleState());
---
>     project.setState(originalProject.getState());
653,654d652
<     project.setProjectNumber(originalProject.getProjectNumber());
<     // replace cannot fail because both this method and removeProject are synchronized
670c668
<     } else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
---
>     } else if (!project.getState().equals("DELETE_REQUESTED")) {
677c675
<       project.setLifecycleState("ACTIVE");
---
>       project.setState("ACTIVE");
787c785
<       project.setLifecycleState(lifecycleState);
---
>       project.setState(lifecycleState);
802,803d799
<     // Because this method is synchronized, any code that relies on non-atomic read/write operations
<     // should not fail if that code is also synchronized.
