24,33c24,33
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.NamingStrategy;
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.Implementation;
> import net.bytebuddy.matcher.ElementMatchers;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
34a35
> import org.assertj.core.util.Arrays;
37a39
> import java.util.Objects;
38a41
> import java.util.concurrent.ConcurrentHashMap;
40,41d42
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
46,51c47,49
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
<     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)
<             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
---
>     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy()
>             .with(TypeValidation.DISABLED)
>             .with(new NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
55c53
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
---
>     private static final ConcurrentHashMap<SimpleKey, Class<?>> CACHE = new ConcurrentHashMap<>();
198c196
<         return asAssumption(assertionType, array(actualType), array(actual));
---
>         return asAssumption(assertionType, Arrays.array(actualType), Arrays.array(actual));
216,218c214
<         return (Class<ASSERTION>) CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),
<                 cacheKey,
<                 () -> generateAssumptionClass(assertClass));
---
>         return (Class<ASSERTION>) CACHE.computeIfAbsent(cacheKey, k -> generateAssumptionClass(assertClass));
223c219
<                 .method(any())
---
>                 .method(ElementMatchers.any())
259d254
<         // @format:off
268,269d262
<         // @format:on
<         // should not arrive here
270a264,284
>     }
> 
>     private static final class SimpleKey {
>         private final Class<?> type;
> 
>         SimpleKey(Class<?> type) {
>             this.type = type;
>         }
> 
>         @Override
>         public boolean equals(Object o) {
>             if (this == o) return true;
>             if (o == null || getClass() != o.getClass()) return false;
>             SimpleKey that = (SimpleKey) o;
>             return Objects.equals(type, that.type);
>         }
> 
>         @Override
>         public int hashCode() {
>             return Objects.hash(type);
>         }
