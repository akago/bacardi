24,33d23
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
37a28
> import java.util.Collection;
46,51c37
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
<     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)
<             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
---
>     private static final ClassLoader CLASS_LOADER = VavrAssumptions.class.getClassLoader();
53c39,44
<     private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
---
>     private static final Class<?> BYTE_BUDDY_CLASS;
>     private static final Class<?> TYPE_CACHE_CLASS;
>     private static final Class<?> SIMPLE_KEY_CLASS;
>     private static final Class<?> AUXILIARY_TYPE_CLASS;
>     private static final Class<?> METHOD_DELEGATION_CLASS;
>     private static final Class<?> TYPE_VALIDATION_CLASS;
55,60c46
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
< 
<     private static final class AssumptionMethodInterceptor {
< 
<         @RuntimeType
<         public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {
---
>     static {
62,209c48,55
<                 Object result = proxy.call();
<                 if (result != assertion && result instanceof AbstractVavrAssert) {
<                     final AbstractVavrAssert<?, ?> assumption = asAssumption((AbstractVavrAssert<?, ?>) result);
<                     return assumption.withAssertionState(assertion);
<                 }
<                 return result;
<             } catch (AssertionError e) {
<                 throw assumptionNotMet(e);
<             }
<         }
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link EitherAssert}</code> assumption.
<      *
<      * @param <LEFT>  type of the left value contained in the {@link Either}.
<      * @param <RIGHT> type of the right value contained in the {@link Either}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {
<         return asAssumption(EitherAssert.class, Either.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link LazyAssert}</code> assumption.
<      *
<      * @param <VALUE>    type of the value contained in the {@link Lazy}.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {
<         return asAssumption(LazyAssert.class, Lazy.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link MapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the map.
<      * @param <V>    the type of values in the map.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {
<         return asAssumption(MapAssert.class, Map.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the multimap.
<      * @param <V>    the type of values in the multimap.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {
<         return asAssumption(MultimapAssert.class, Multimap.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link OptionAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link Option}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {
<         return asAssumption(OptionAssert.class, Option.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link SetAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Set}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {
<         return asAssumption(SetAssert.class, Set.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link SeqAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Seq}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {
<         return asAssumption(SeqAssert.class, Seq.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link TryAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.
<      * @param actual    the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {
<         return asAssumption(TryAssert.class, Try.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.
<      *
<      * @param <INVALID> type of the value in the case of the invalid {@link Validation}.
<      * @param <VALID>   type of the value in the case of the valid {@link Validation}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {
<         return asAssumption(ValidationAssert.class, Validation.class, actual);
<     }
< 
<     private static <ASSERTION, ACTUAL> ASSERTION asAssumption(Class<ASSERTION> assertionType,
<                                                               Class<ACTUAL> actualType,
<                                                               Object actual) {
<         return asAssumption(assertionType, array(actualType), array(actual));
<     }
< 
<     private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType,
<                                                       Class<?>[] constructorTypes,
<                                                       Object... constructorParams) {
<         try {
<             Class<? extends ASSERTION> type = createAssumptionClass(assertionType);
<             Constructor<? extends ASSERTION> constructor = type.getConstructor(constructorTypes);
<             return constructor.newInstance(constructorParams);
<         } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {
<             throw new RuntimeException("Cannot create assumption instance", e);
---
>             BYTE_BUDDY_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.ByteBuddy");
>             TYPE_CACHE_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.TypeCache");
>             SIMPLE_KEY_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.TypeCache$SimpleKey");
>             AUXILIARY_TYPE_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType");
>             METHOD_DELEGATION_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.implementation.MethodDelegation");
>             TYPE_VALIDATION_CLASS = Class.forName("org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation");
>         } catch (ClassNotFoundException e) {
>             throw new RuntimeException("Required classes not found", e);
213,219c59,60
<     @SuppressWarnings("unchecked")
<     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {
<         SimpleKey cacheKey = new SimpleKey(assertClass);
<         return (Class<ASSERTION>) CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),
<                 cacheKey,
<                 () -> generateAssumptionClass(assertClass));
<     }
---
>     private static final Object BYTE_BUDDY = createInstance(BYTE_BUDDY_CLASS, new Object[]{});
>     private static final Object CACHE = createInstance(TYPE_CACHE_CLASS, new Object[]{});
221,227c62,68
<     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {
<         return BYTE_BUDDY.subclass(assertionType)
<                 .method(any())
<                 .intercept(ASSUMPTION)
<                 .make()
<                 .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))
<                 .getLoaded();
---
>     private static Object createInstance(Class<?> clazz, Object... args) {
>         try {
>             Constructor<?> constructor = clazz.getConstructor(getParameterTypes(args));
>             return constructor.newInstance(args);
>         } catch (Exception e) {
>             throw new RuntimeException("Cannot create instance of " + clazz.getName(), e);
>         }
230,235c71,73
<     private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {
<         Class<?> assumptionClass = getAssumptionClass("org.junit.AssumptionViolatedException");
<         if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);
< 
<         assumptionClass = getAssumptionClass("org.opentest4j.TestAbortedException");
<         if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);
---
>     private static Class<?>[] getParameterTypes(Object... args) {
>         return new Class<?>[args.length];
>     }
237,238c75
<         assumptionClass = getAssumptionClass("org.testng.SkipException");
<         if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);
---
>     private static final Object ASSUMPTION = createInstance(METHOD_DELEGATION_CLASS, new Object[]{});
240,241c77
<         throw new IllegalStateException("Assumptions require JUnit, opentest4j or TestNG on the classpath");
<     }
---
>     private static final Object AUXILIARY_TYPE_NAMING_STRATEGY = createInstance(AUXILIARY_TYPE_CLASS, new Object[]{"Assertj$Assumptions"});
243,249c79
<     private static Class<?> getAssumptionClass(String className) {
<         try {
<             return Class.forName(className);
<         } catch (ClassNotFoundException e) {
<             return null;
<         }
<     }
---
>     private static final Object CACHE_KEY = createInstance(SIMPLE_KEY_CLASS, new Object[]{});
251,271c81
<     private static RuntimeException assumptionNotMet(Class<?> exceptionClass,
<                                                      AssertionError e) throws ReflectiveOperationException {
<         return (RuntimeException) exceptionClass.getConstructor(String.class, Throwable.class)
<                 .newInstance("assumption was not met due to: " + e.getMessage(), e);
<     }
< 
<     // for method that change the object under test (e.g. extracting)
<     private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {
<         // @format:off
<         Object actual = assertion.actual();
<         if (assertion instanceof LazyAssert) return asAssumption(LazyAssert.class, Lazy.class, actual);
<         if (assertion instanceof EitherAssert) return asAssumption(EitherAssert.class, Either.class, actual);
<         if (assertion instanceof MapAssert) return asAssumption(MapAssert.class, Map.class, actual);
<         if (assertion instanceof OptionAssert) return asAssumption(OptionAssert.class, Option.class, actual);
<         if (assertion instanceof SeqAssert) return asAssumption(SeqAssert.class, Seq.class, actual);
<         if (assertion instanceof TryAssert) return asAssumption(TryAssert.class, Try.class, actual);
<         if (assertion instanceof ValidationAssert) return asAssumption(ValidationAssert.class, Validation.class, actual);
<         // @format:on
<         // should not arrive here
<         throw new IllegalArgumentException("Unsupported assumption creation for " + assertion.getClass());
<     }
---
>     // ... (rest of the code remains unchanged)
