1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
30c7
< import org.cactoos.collection.Filtered;
---
> import org.cactoos.iterable.Filtered;
36d12
< import org.cactoos.scalar.CheckedScalar;
38d13
< import org.cactoos.scalar.UncheckedScalar;
40d14
< import org.cactoos.text.SplitText;
156c130,136
<             return this.id;
---
>             return Long.parseUnsignedLong(
>                 new ListOf<>(
>                     new TextOf(this.path).asString().split("\n")
>                 )[2],
>                 // @checkstyle MagicNumber (1 line)
>                 16
>             );
201,202c181
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return Long.parseUnsignedLong(
204,208c183,184
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
---
>                     new TextOf(this.path).asString().split("\n")
>                 )[2],
211,213c187
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             );
249,258c223,227
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
---
>                     origin -> 
>                         incoming.equals(origin) ||
>                         (incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf())) ||
>                         (incoming.id() == origin.id() && incoming.amount() < 0L) ||
>                         incoming.prefix().equals(origin.prefix()),
275,278c244
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).asString().split("\\n")
