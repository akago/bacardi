30c30,32
< import org.cactoos.collection.Filtered;
---
> import java.util.List;
> import java.util.stream.Collectors;
> import java.util.stream.StreamSupport;
36d37
< import org.cactoos.scalar.CheckedScalar;
38d38
< import org.cactoos.scalar.UncheckedScalar;
40d39
< import org.cactoos.text.SplitText;
201,202c200
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return Long.parseUnsignedLong(
204,208c202,203
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
---
>                     new TextOf(this.path).asString().split("\n")
>                 ).get(2),
211,213c206
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             );
224,232d216
<         // @todo #16:30min Following transactions should be ignored according
<         //  to the whitepaper:
<         //  a) If the transaction is negative and its signature is not valid,
<         //  it is ignored;
<         //  b) If the transaction makes the balance of the wallet negative,
<         //  it is ignored;
<         //  c) If the transaction is positive and it’s absent in the paying
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
247,256c231,236
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
---
>             final Iterable<Transaction> candidates = StreamSupport.stream(other.ledger().spliterator(), false)
>                 .filter(incoming -> StreamSupport.stream(ledger.spliterator(), false)
>                     .noneMatch(origin -> incoming.equals(origin)
>                         || (incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf()))
>                         || (incoming.id() == origin.id() && incoming.amount() < 0L)
>                         || incoming.prefix().equals(origin.prefix())
258,262c238,239
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
<             );
---
>                 )
>                 .collect(Collectors.toList());
272c249
<                 txt -> new RtTransaction(txt.asString()),
---
>                 txt -> new RtTransaction(txt),
275,278c252
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).asString().split("\\n")
286,288d259
<         // @todo #54:30min Implement key method. This should return the
<         //  public RSA key of the wallet owner in Base64. Also add a unit test
<         //  to replace WalletTest.keyIsNotYetImplemented().
