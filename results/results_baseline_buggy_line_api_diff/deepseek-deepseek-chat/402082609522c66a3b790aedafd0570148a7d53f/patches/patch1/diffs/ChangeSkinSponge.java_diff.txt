23,25c23,25
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.config.ConfigDir;
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandResult;
> import org.spongepowered.api.command.parameter.CommandContext;
27,33c27,35
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.plugin.Plugin;
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.event.lifecycle.RegisterCommandEvent;
> import org.spongepowered.api.event.lifecycle.RegisterChannelEvent;
> import org.spongepowered.api.event.lifecycle.StartingEngineEvent;
> import org.spongepowered.api.event.lifecycle.StoppingEngineEvent;
> import org.spongepowered.api.network.channel.Channel;
> import org.spongepowered.api.network.channel.ChannelManager;
> import org.spongepowered.api.plugin.PluginContainer;
> import org.spongepowered.api.text.Text;
> import org.spongepowered.api.text.serializer.TextSerializer;
42c44
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<CommandContext> {
53d54
<     //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
62,63c63
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
<         //load config and database
---
>     public void onPreInit(StartingEngineEvent<?> preInitEvent) {
73c73
<     public void onInit(GameInitializationEvent initEvent) {
---
>     public void onInit(RegisterCommandEvent<Command.Parameterized> initEvent) {
77c77
<         CommandManager cmdManager = Sponge.getCommandManager();
---
>         PluginContainer pluginContainer = Sponge.pluginManager().plugin(ARTIFACT_ID).orElseThrow(() -> new IllegalStateException("Plugin not found"));
79,85c79,83
<         //command and event register
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
---
>         initEvent.register(pluginContainer, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>         initEvent.register(pluginContainer, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>         initEvent.register(pluginContainer, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>         initEvent.register(pluginContainer, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>         initEvent.register(pluginContainer, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
87c85,86
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
---
>         Sponge.eventManager().registerListeners(pluginContainer, injector.getInstance(LoginListener.class));
>     }
89,90c88,90
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
---
>     @Listener
>     public void onRegisterChannels(RegisterChannelEvent event) {
>         ChannelManager channelManager = Sponge.channelManager();
93,96c93,96
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         Channel updateChannel = channelManager.ofType(updateChannelName, Channel.class);
>         Channel permChannel = channelManager.ofType(permissionChannelName, Channel.class);
>         updateChannel.play().addHandler(injector.getInstance(UpdateSkinListener.class));
>         permChannel.play().addHandler(injector.getInstance(CheckPermissionListener.class));
100c100
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StoppingEngineEvent<?> stoppingServerEvent) {
108,110c108,109
<     @Override
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
<         if (invoker.hasPermission(PomData.ARTIFACT_ID + ".skin.whitelist." + uuid)) {
---
>     public boolean hasSkinPermission(CommandContext invoker, UUID uuid, boolean sendMessage) {
>         if (invoker.cause().hasPermission(PomData.ARTIFACT_ID + ".skin.whitelist." + uuid)) {
114d112
<         //disallow - not whitelisted or blacklisted
126d123
<     @Override
131d127
<     @Override
136d131
<     @Override
141,142c136
<     @Override
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(CommandContext receiver, String key) {
145c139
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             receiver.sendMessage(Text.of(message));
