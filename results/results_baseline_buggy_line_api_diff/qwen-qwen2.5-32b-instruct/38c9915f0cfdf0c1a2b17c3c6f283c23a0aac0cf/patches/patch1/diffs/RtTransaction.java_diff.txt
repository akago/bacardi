1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
38d14
< import org.cactoos.scalar.UncheckedScalar;
43d18
< import org.cactoos.text.UncheckedText;
50c25
<  * @checkstyle ClassDataAbstractionCoupling (3 lines)
---
>  * @checkstyle ClassDataAbstractionCouplingCheck (3 lines)
52,53c27
< @SuppressWarnings({"PMD.AvoidCatchingGenericException",
<     "PMD.AvoidFieldNameMatchingMethodName"})
---
> @SuppressWarnings({"PMD.AvoidFieldNameMatchingMethodName", "PMD.AvoidCatchingGenericException"})
112c86
<                     if (new LengthOf(pieces).intValue() != 7) {
---
>                     if (new LengthOf<>(pieces).intValue() != 7) {
117c91
<                                 pieces.size()
---
>                                 new LengthOf<>(pieces).intValue()
130c104
<         final String ident = new UncheckedText(
---
>         final String ident = new UncheckedScalar<>(
135,136c109,110
<             ).value()
<         ).asString();
---
>             )
>         ).value();
139c113
<                 new UncheckedText(
---
>                 new UncheckedScalar<>(
145c119
<                 ).asString()
---
>                 ).value().asString()
155c129
<             new UncheckedText(
---
>             new UncheckedScalar<>(
160,161c134,135
<                 ).value()
<             ).asString(),
---
>                 )
>             ).value(),
168c142
<         final String amnt = new UncheckedText(
---
>         final String amnt = new UncheckedScalar<>(
173,174c147,148
<             ).value()
<         ).asString();
---
>             )
>         ).value();
177c151
<                 new UncheckedText(
---
>                 new UncheckedScalar<>(
183c157
<                 ).asString()
---
>                 ).value().asString()
192c166
<         final String prefix = new UncheckedText(
---
>         final String prefix = new UncheckedScalar<>(
195d168
<                     //@checkstyle MagicNumberCheck (1 line)
198,200c171,172
<             ).value()
<         ).asString();
<         //@checkstyle MagicNumberCheck (1 line)
---
>             )
>         ).value();
212c184
<         final String bnf = new UncheckedText(
---
>         final String bnf = new UncheckedScalar<>(
215d186
<                     //@checkstyle MagicNumberCheck (1 line)
218,219c189,190
<             ).value()
<         ).asString();
---
>             )
>         ).value();
222c193
<                 new UncheckedText(
---
>                 new UncheckedScalar<>(
228c199
<                 ).asString()
---
>                 ).value().asString()
236c207
<         final String dtls = new UncheckedText(
---
>         final String dtls = new UncheckedScalar<>(
239d209
<                     //@checkstyle MagicNumberCheck (1 line)
242,243c212,213
<             ).value()
<         ).asString();
---
>             )
>         ).value();
246c216
<                 new UncheckedText(
---
>                 new UncheckedScalar<>(
252c222
<                 ).asString()
---
>                 ).value().asString()
260c230
<         final String sign = new UncheckedText(
---
>         final String sign = new UncheckedScalar<>(
263d232
<                     //@checkstyle MagicNumberCheck (1 line)
266,270c235,237
<             ).value()
<         ).asString();
<         // @checkstyle MagicNumber (1 line)
<         if (sign.length() != 684
<             || !RtTransaction.SIGN.matcher(sign).matches()) {
---
>             )
>         ).value();
>         if (sign.length() != 684 || !RtTransaction.SIGN.matcher(sign).matches()) {
272c239
<                 new UncheckedText(
---
>                 new UncheckedScalar<>(
278c245
<                 ).asString()
---
>                 ).value().asString()
