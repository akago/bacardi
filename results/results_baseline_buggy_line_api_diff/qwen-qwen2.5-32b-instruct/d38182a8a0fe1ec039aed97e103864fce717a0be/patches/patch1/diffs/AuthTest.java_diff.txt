25,27d24
< import com.artipie.http.rq.RequestLine;
< import com.artipie.http.rq.RqMethod;
< import com.artipie.http.rs.RsStatus;
52c49
< @SuppressWarnings("PMD.AvoidDuplicateLiterals")
---
> @SuppressWarnings("PMD.UnusedPrivateMethod")
126,168d122
<     @Test
<     void shouldOverwriteManifestIfAllowed() {
<         final Basic basic = new Basic(this.docker);
<         final String path = "/v2/my-alpine/manifests/abc";
<         final String line = new RequestLine(RqMethod.PUT, path).toString();
<         final String action = "repository:my-alpine:overwrite";
<         final Flowable<ByteBuffer> manifest = this.manifest();
<         MatcherAssert.assertThat(
<             "Manifest was created for the first time",
<             basic.slice(action).response(
<                 line,
<                 basic.headers(TestAuthentication.ALICE),
<                 manifest
<             ),
<             new ResponseMatcher(
<                 RsStatus.CREATED,
<                 new Header("Location", path),
<                 new Header("Content-Length", "0"),
<                 new Header(
<                     "Docker-Content-Digest",
<                     "sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf"
<                 )
<             )
<         );
<         MatcherAssert.assertThat(
<             "Manifest was overwritten",
<             basic.slice(action).response(
<                 line,
<                 basic.headers(TestAuthentication.ALICE),
<                 manifest
<             ),
<             new ResponseMatcher(
<                 RsStatus.CREATED,
<                 new Header("Location", path),
<                 new Header("Content-Length", "0"),
<                 new Header(
<                     "Docker-Content-Digest",
<                     "sha256:ef0ff2adcc3c944a63f7cafb386abc9a1d95528966085685ae9fab2a1c0bedbf"
<                 )
<             )
<         );
<     }
< 
198,284d151
<      * Create manifest content.
<      *
<      * @return Manifest content.
<      */
<     private Flowable<ByteBuffer> manifest() {
<         final byte[] content = "config".getBytes();
<         final Blob config = this.docker.repo(new RepoName.Valid("my-alpine")).layers()
<             .put(new TrustedBlobSource(content))
<             .toCompletableFuture().join();
<         final byte[] data = String.format(
<             "{\"config\":{\"digest\":\"%s\"},\"layers\":[],\"mediaType\":\"my-type\"}",
<             config.digest().string()
<         ).getBytes();
<         return Flowable.just(ByteBuffer.wrap(data));
<     }
< 
<     private static Stream<Arguments> setups(final Method method) {
<         return Stream.of(
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/"),
<                 "registry:base:*"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.HEAD, "/v2/my-alpine/manifests/1"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/my-alpine/manifests/2"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.PUT, "/v2/my-alpine/manifests/latest"),
<                 "repository:my-alpine:push"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.PUT, "/v2/my-alpine/manifests/latest"),
<                 "repository:my-alpine:overwrite"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/my-alpine/tags/list"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.HEAD, "/v2/my-alpine/blobs/sha256:123"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/my-alpine/blobs/sha256:012345"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.POST, "/v2/my-alpine/blobs/uploads/"),
<                 "repository:my-alpine:push"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.PATCH, "/v2/my-alpine/blobs/uploads/123"),
<                 "repository:my-alpine:push"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.PUT, "/v2/my-alpine/blobs/uploads/12345"),
<                 "repository:my-alpine:push"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/my-alpine/blobs/uploads/112233"),
<                 "repository:my-alpine:pull"
<             ),
<             Arguments.of(
<                 method,
<                 new RequestLine(RqMethod.GET, "/v2/_catalog"),
<                 "registry:catalog:*"
<             )
<         );
<     }
< 
<     /**
353c220
<                             .map(user -> new Authentication.User(user.name()))
---
>                             .map(user -> new Authentication.User(user.name(), user.permissions()))
