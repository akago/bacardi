1,15d0
< /*
<  * Copyright 2020 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,21c3,6
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.cloud.resourcemanager.v3.Policy;
> import com.google.cloud.resourcemanager.v3.BooleanPolicy;
> import com.google.cloud.resourcemanager.v3.ListPolicy;
> import com.google.cloud.resourcemanager.v3.Policy;
38,39c23,25
<   static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
<       new Function<OrgPolicy, OrgPolicyInfo>() {
---
> {
>   static final Function<Policy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
>       new Function<Policy, OrgPolicyInfo>() {
41c27
<         public OrgPolicyInfo apply(OrgPolicy protobuf) {
---
>         public OrgPolicyInfo apply(Policy protobuf) {
45,46c31,32
<   static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =
<       new Function<OrgPolicyInfo, OrgPolicy>() {
---
>   static final Function<OrgPolicyInfo, Policy> TO_PROTOBUF_FUNCTION =
>       new Function<OrgPolicyInfo, Policy>() {
48c34
<         public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {
---
>         public Policy apply(OrgPolicyInfo orgPolicyInfo) {
53c39
<   private BoolPolicy boolPolicy;
---
>   private BooleanPolicy boolPolicy;
57d42
<   private RestoreDefault restoreDefault;
61c46,48
<   /** Used For boolean Constraints, whether to enforce the Constraint or not. */
---
>   /**
>    * Used For boolean Constraints, whether to enforce the Constraint or not.
>    */
111,119c98
<    * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote
<    * specific values, and is required only if the value contains a ":". Values prefixed with "is:"
<    * are treated the same as values with no prefix. Ancestry subtrees must be in one of the
<    * following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g.
<    * "folders/1234" - "organizations/", e.g. "organizations/1234" The supportsUnder field of the
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
---
>    * prefixes. Values prefixed with "is:" are treated the same as values with no prefix.
125c104
<     private final List<java.lang.String> deniedValues;
---
>     private final List<String> deniedValues;
221c200
<     private BoolPolicy boolPolicy;
---
>     private BooleanPolicy boolPolicy;
225d203
<     private RestoreDefault restoreDefault;
236d213
<       this.restoreDefault = info.restoreDefault;
241c218
<     Builder setBoolPolicy(BoolPolicy boolPolicy) {
---
>     Builder setBoolPolicy(BooleanPolicy boolPolicy) {
261,265d237
<     Builder setRestoreDefault(RestoreDefault restoreDefault) {
<       this.restoreDefault = restoreDefault;
<       return this;
<     }
< 
286d257
<     this.restoreDefault = builder.restoreDefault;
292c263
<   public BoolPolicy getBoolPolicy() {
---
>   public BooleanPolicy getBoolPolicy() {
311,315d281
<   /** Restores the default behavior of the constraint. */
<   public RestoreDefault getRestoreDefault() {
<     return restoreDefault;
<   }
< 
326,350d291
<   @Override
<   public boolean equals(Object o) {
<     if (this == o) {
<       return true;
<     }
<     if (o == null || getClass() != o.getClass()) {
<       return false;
<     }
<     OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;
<     return Objects.equals(boolPolicy, policyInfo.boolPolicy)
<         && Objects.equals(constraint, policyInfo.constraint)
<         && Objects.equals(etag, policyInfo.etag)
<         && Objects.equals(policies, policyInfo.policies)
<         && Objects.equals(restoreDefault, policyInfo.restoreDefault)
<         && Objects.equals(updateTime, policyInfo.updateTime)
<         && Objects.equals(version, policyInfo.version);
<   }
< 
<   @Override
<   public int hashCode() {
<     return Objects.hash(
<         boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
<   }
< 
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
355d295
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
360,361c300,301
<   OrgPolicy toProtobuf() {
<     OrgPolicy orgPolicyProto = new OrgPolicy();
---
>   Policy toProtobuf() {
>     Policy orgPolicyProto = new Policy();
369d308
<     orgPolicyProto.setRestoreDefault(restoreDefault);
376c315
<   static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {
---
>   static OrgPolicyInfo fromProtobuf(Policy orgPolicyProtobuf) {
385d323
<     builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());
