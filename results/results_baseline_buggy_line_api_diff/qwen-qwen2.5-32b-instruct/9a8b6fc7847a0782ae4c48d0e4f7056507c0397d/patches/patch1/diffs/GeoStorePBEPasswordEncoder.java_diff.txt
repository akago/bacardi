30d29
< import org.acegisecurity.providers.encoding.PasswordEncoder;
33,45c32,38
< import org.jasypt.spring.security.PBEPasswordEncoder;
< /**
<  * Password Encoder using symmetric encryption
<  * 
<  * The salt parameter is not used, this implementation computes a random salt as
<  * default.
<  * 
<  * {@link #isPasswordValid(String, String, Object)}
<  * {@link #encodePassword(String, Object)}
<  * 
<  * @author Lorenzo Natali
<  * 
<  */
---
> import org.jasypt.spring.security3.PBEStringEncryptor;
> import org.jasypt.util.password.PasswordEncryptor;
> import org.jasypt.util.password.StrongPasswordEncryptor;
> 
> import it.geosolutions.geostore.core.security.password.CharArrayPasswordEncoder;
> import it.geosolutions.geostore.core.security.password.PasswordEncodingType;
> 
102,105c95,96
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
< 
<                         return encoder;
---
>                         PasswordEncryptor encoder = new StrongPasswordEncryptor();
>                         return encoder::isPasswordValid;
200d190
<         
