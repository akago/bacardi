```java
package com.google.cloud.translate.spi.v2;

import static com.google.common.base.MoreObjects.firstNonNull;

import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.cloud.http.HttpTransportOptions;
import com.google.cloud.translate.TranslateException;
import com.google.cloud.translate.TranslateOptions;
import com.google.cloud.translate.v3.Translate;
import com.google.cloud.translate.v3.TranslateRequest;
import com.google.cloud.translate.v3.TranslationServiceClient;
import com.google.cloud.translate.v3.TranslateTextRequest;
import com.google.cloud.translate.v3.TranslateTextResponse;
import com.google.cloud.translate.v3.Translation;
import com.google.cloud.translate.v3.GetSupportedLanguagesRequest;
import com.google.cloud.translate.v3.SupportedLanguages;
import com.google.cloud.translate.v3.DetectLanguageRequest;
import com.google.cloud.translate.v3.DetectLanguageResponse;
import com.google.cloud.translate.v3.DetectedLanguage;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class HttpTranslateRpc implements TranslateRpc {

  private final TranslateOptions options;
  private final TranslationServiceClient translate;

  public HttpTranslateRpc(TranslateOptions options) {
    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();
    HttpTransport transport = transportOptions.getHttpTransportFactory().create();
    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);
    this.options = options;
    translate = TranslationServiceClient.create();
  }

  private static TranslateException translate(IOException exception) {
    return new TranslateException(exception);
  }

  private GenericUrl buildTargetUrl(String path) {
    GenericUrl genericUrl = new GenericUrl(translate.getBaseUrl() + "v2/" + path);
    if (options.getApiKey() != null) {
      genericUrl.put("key", options.getApiKey());
    }
    return genericUrl;
  }

  @Override
  public List<List<DetectedLanguage>> detect(List<String> texts) {
    try {
      DetectLanguageRequest request = DetectLanguageRequest.newBuilder().addAllTexts(texts).build();
      DetectLanguageResponse response = translate.detectLanguage(request);
      return response.getLanguagesList();
    } catch (IOException ex) {
      throw translate(ex);
    }
  }

  @Override
  public List<SupportedLanguages.LanguageCode> listSupportedLanguages(Map<Option, ?> optionMap) {
    try {
      GetSupportedLanguagesRequest request = GetSupportedLanguagesRequest.newBuilder().build();
      SupportedLanguages response = translate.getSupportedLanguages(request);
      return response.getLanguageCodesList();
    } catch (IOException ex) {
      throw translate(ex);
    }
  }

  @Override
  public List<Translation> translate(List<String> texts, Map<Option, ?> optionMap) {
    try {
      String targetLanguage =
          firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
      final String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
      TranslateTextRequest request = TranslateTextRequest.newBuilder()
          .addAllTexts(texts)
          .setTargetLanguageCode(targetLanguage)
          .setSourceLanguageCode(sourceLanguage)
          .build();
      TranslateTextResponse response = translate.translateText(request);
      return response.getTranslationsList();
    } catch (IOException ex) {
      throw translate(ex);
    }
  }
}
```
