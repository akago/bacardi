17a18
> import org.slf4j.Logger as Slf4jLogger;
48d48
< import static org.mockito.Mockito.mock;
52d51
< import static org.mockito.Mockito.when;
55,58d53
< import static uk.gov.pay.adminusers.fixtures.EventFixture.anEventFixture;
< import static uk.gov.pay.adminusers.fixtures.LedgerTransactionFixture.aLedgerTransactionFixture;
< import static uk.gov.pay.adminusers.model.Service.DEFAULT_NAME_VALUE;
< import static uk.gov.pay.adminusers.service.UserServicesTest.aUserEntityWithRoleForService;
111,113c106,108
<         Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
<         logger.setLevel(Level.INFO);
<         logger.addAppender(mockLogAppender);
---
>         Slf4jLogger logger = LoggerFactory.getLogger(EventMessageHandler.class);
>         ((ch.qos.logback.classic.Logger)logger).setLevel(Level.INFO);
>         ((ch.qos.logback.classic.Logger)logger).addAppender(mockLogAppender);
123,126d117
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
<         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
< 
128a120
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
129a122,124
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
>         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
141c136
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
147d141
< 
162d155
<         assertThat(personalisation.get("paymentExternalId"), is("456"));
164,175c157
<         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022"));
<         assertThat(personalisation.get("disputedAmount"), is("210.00"));
< 
<         assertThat(personalisation.get("fraudulent"), is("yes"));
<         assertThat(personalisation.get("duplicate"), is("no"));
<         assertThat(personalisation.get("credit_not_processed"), is("no"));
<         assertThat(personalisation.get("product_not_received"), is("no"));
<         assertThat(personalisation.get("product_unacceptable"), is("no"));
<         assertThat(personalisation.get("subscription_canceled"), is("no"));
<         assertThat(personalisation.get("unrecognized"), is("no"));
<         assertThat(personalisation.get("paymentAmount"), is(nullValue()));
<         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
189c171
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
191,192d172
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
226c206
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
228,229d207
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
259,295d236
<     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
<         var mockQueueMessage = mock(QueueMessage.class);
<         disputeEvent = anEventFixture()
<                 .withEventType(EventType.DISPUTE_EVIDENCE_SUBMITTED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
<                 .withParentResourceExternalId("456")
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
<                 .build();
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
<         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
<         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
< 
<         eventMessageHandler.processMessages();
< 
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeEvidenceSubmittedEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
< 
<         var emails = adminEmailsCaptor.getValue();
<         var personalisation = personalisationCaptor.getValue();
< 
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
< 
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
<     }
< 
<     @Test
300c241
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
338a280
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
340d281
< 
