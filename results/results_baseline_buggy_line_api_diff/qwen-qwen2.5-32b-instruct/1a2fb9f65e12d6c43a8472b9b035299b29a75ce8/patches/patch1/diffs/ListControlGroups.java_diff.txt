1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
38,43c20,25
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
61c43
<         private Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();
---
>         private Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>>();
64c46
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
87,91d68
<                 typesControlGroups.put(Set.class, CollectionControlGroup.class);
< 
<                 objectProperties = new ArrayList<ObjectProperties>();
<                 this.entitySettings = entitySettings;
<                 this.renderers = renderers;
111,112d87
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
119,120d93
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
123,124c96,108
<                 for(String property : properties){
<                         PropertyDescriptor descriptor;
---
>                 for(ObjectProperties objectProperty : objectProperties){
>                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(objectProperty.name);
>                         Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
>                         for(ConstraintDescriptor<?> constraint : constraintsSet){
>                                 if(constraint.getAnnotation() instanceof NotNull ||
>                                    constraint.getAnnotation() instanceof NotEmpty ||
>                                    constraint.getAnnotation() instanceof NotBlank)
>                                         objectProperty.required = true;
>                         }
>                 }
> 
>                 RepeatingView view = new RepeatingView("controlGroup");
>                 for(ObjectProperties objectProperty : objectProperties){
126,128c110,169
<                                 descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
<                         } catch (Exception e) {
<                                 throw new RuntimeException("error getting property "+property, e);
---
>                                 AbstractControlGroup<?> controlGroup;
>                                 if(!controlGroupProviders.containsKey(objectProperty.type)) {
>                                         Constructor<?> constructor;
>                                         Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
>                                         if(typesControlGroup==null){
>                                                 if(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;
>                                                 else typesControlGroup = ObjectChoiceControlGroup.class;
>                                         }
> 
>                                         constructor = typesControlGroup.getConstructor(String.class, IModel.class);
> 
>                                         controlGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));
>                                         controlGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
>                                         controlGroup.setEnabled(objectProperty.enabled);
> 
>                                         if(typesControlGroup==ObjectChoiceControlGroup.class){
>                                                 IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
>                                                 if(renderer==null){
>                                                         renderer = new IObjectRenderer<Object>() {
>                                                                 private static final long serialVersionUID = -6171655578529011405L;
> 
>                                                                 public String render(Object object) {
>                                                                         return object.toString();
>                                                                 }
>                                                         };
>                                                 }
>                                                 ((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
>                                         } else if(typesControlGroup==CollectionControlGroup.class){
>                                                 ((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
>                                         }
> 
>                                 } else {
>                                         controlGroup = controlGroupProviders
>                                                         .get(objectProperty.type)
>                                                         .createControlGroup(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name), objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
>                                 }
>                                 view.add(controlGroup);
> 
>                                 fieldComponents.put(objectProperty.name, controlGroup);
>                         } catch (SecurityException e) {
>                                 throw new RuntimeException(e);
>                         } catch (NoSuchMethodException e) {
>                                 throw new RuntimeException(e);
>                         } catch (IllegalArgumentException e) {
>                                 throw new RuntimeException(e);
>                         } catch (InstantiationException e) {
>                                 throw new RuntimeException(e);
>                         } catch (IllegalAccessException e) {
>                                 throw new RuntimeException(e);
>                         } catch (InvocationTargetException e) {
>                                 throw new RuntimeException(e);
>                         }
>                 }
> 
>                 add(view);
>         }
> 
>         @SuppressWarnings("rawtypes")
>         public IModel<T> getModel(){
>                 return (IModel<T>) getDefaultModel();
131c172,174
<                         boolean required = false;
---
>         public Component getResourceBase(){
>                 return this;
>         }
133,134c176,211
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
---
>         public Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){
>                 return Collections.unmodifiableMap(fieldComponents);
>         }
> 
>         @SuppressWarnings("rawtypes")
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>                 return typesControlGroups;
>         }
> 
>         private Set<String> getPropertiesByOrder(Class<?> modelClass) {
>                 Set<String> properties = new LinkedHashSet<String>();
> 
>                 for(String property : entitySettings.getOrderOfFields()){
>                         if(!entitySettings.getHiddenFields().contains(property))
>                                 properties.add(property);
>                 }
>                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
>                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
>                            !properties.contains(descriptor.getName()) &&
>                            !descriptor.getName().equals("class"))
>                                 properties.add(descriptor.getName());
>                 }
> 
>                 return properties;
>         }
> 
>         @Override
>         protected void onInitialize() {
>                 super.onInitialize();
> 
>                 Class<?> modelClass = getModel().getObject().getClass();
> 
>                 Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();
>                 BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
>                 for(ObjectProperties objectProperty : objectProperties){
>                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(objectProperty.name);
140,141c217
<                                                 required = true;
<                                 }
---
>                                         objectProperty.required = true;
143,144d218
< 
<                         objectProperties.add(new ObjectProperties(descriptor, required));
165d238
< 
185,187c258
<                                                         .createControlGroup(view.newChildId()
<                                                                         , new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
<                                                                         , objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
---
>                                                         .createControlGroup(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name), objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
210c281
<         @SuppressWarnings("unchecked")
---
>         @SuppressWarnings("rawtypes")
224,228c295,296
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
<                 }
<                 return null;
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>                 return typesControlGroups;
245,253d312
< 
<         @SuppressWarnings("rawtypes")
<         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
<                 return typesControlGroups;
<         }
<         
<         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
<                 return this.controlGroupProviders;
<         }
