1,24d0
< /*
<  * The MIT License
<  *
<  * Copyright 2018 CloudBees, Inc.
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included in
<  * all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
<  * THE SOFTWARE.
<  */
< 
40c16,17
< import org.kohsuke.github.GHCompare;
---
> import org.kohsuke.github.GHCommit;
> import org.kohsuke.github.GHRepository;
41a19
> import org.kohsuke.github.GitHubComparison;
46,48d23
< /**
<  * Looks for updates (incremental or otherwise) to a specific artifact.
<  */
53d27
<     /** keys are {@code groupId:artifactId:currentVersion:branch} */
55d28
< 
63,99d35
<     @FunctionalInterface
<     public interface Log {
<         void info(String message);
<     }
< 
<     public static final class VersionAndRepo implements Comparable<VersionAndRepo> {
<         public final String groupId;
<         public final String artifactId;
<         public final ComparableVersion version;
<         public final String repo;
<         VersionAndRepo(String groupId, String artifactId, ComparableVersion version, String repo) {
<             this.groupId = groupId;
<             this.artifactId = artifactId;
<             this.version = version;
<             this.repo = repo;
<         }
<         /** Sort by version descending. */
<         @Override public int compareTo(VersionAndRepo o) {
<             assert o.groupId.equals(groupId) && o.artifactId.equals(artifactId);
<             return o.version.compareTo(version);
<         }
<         /** @return for example: {@code https://repo/net/nowhere/lib/1.23/} */
<         public String baseURL() {
<             return repo + groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/';
<         }
<         /**
<          * @param type for example, {@code pom}
<          * @return for example: {@code https://repo/net/nowhere/lib/1.23/lib-1.23.pom}
<          */
<         public String fullURL(String type) {
<             return baseURL() + artifactId + '-' + version + '.' + type;
<         }
<         @Override public String toString() {
<             return baseURL();
<         }
<     }
< 
106,108d41
< 
<         //TODO: implement to support non-Incremental formats
<         // Needs to load UC JSON and query it like https://github.com/jenkinsci/docker/pull/668
123,166d55
<     private @CheckForNull VersionAndRepo doFind(String groupId, String artifactId, String currentVersion, String branch) throws Exception {
<         ComparableVersion currentV = new ComparableVersion(currentVersion);
<         log.info("Searching for updates to " + groupId + ":" + artifactId + ":" + currentV + " within " + branch);
<         SortedSet<VersionAndRepo> candidates = loadVersions(groupId, artifactId);
<         if (candidates.isEmpty()) {
<             log.info("Found no candidates");
<             return null;
<         }
<         log.info("Found " + candidates.size() + " candidates from " + candidates.first() + " down to " + candidates.last());
<         for (VersionAndRepo candidate : candidates) {
<             if (candidate.version.compareTo(currentV) <= 0) {
<                 log.info("Stopping search at " + candidate + " since it is no newer than " + currentV);
<                 return null;
<             }
<             log.info("Considering " + candidate);
<             GitHubCommit ghc = loadGitHubCommit(candidate);
<             if (ghc != null) {
<                 log.info("Mapped to: " + ghc);
<                 if (isAncestor(ghc, branch)) {
<                     log.info("Seems to be within " + branch + ", so accepting");
<                     return candidate;
<                 } else {
<                     log.info("Does not seem to be within " + branch);
<                 }
<             } else {
<                 log.info("Does not seem to be an incremental release, so accepting");
<                 // TODO may still be useful to select MRP versions targeted to an origin branch.
<                 // (For example, select the latest backport from a stable branch rather than trunk.)
<                 // The problem is that we cannot then guarantee that the POM has been flattened
<                 // (this is only guaranteed for repositories which *may* produce incrementals),
<                 // and loadGitHubCommit will not work for nonflattened POMs from reactor submodules:
<                 // it would have to be made more complicated to resolve the parent POM(s),
<                 // or we would need to switch the implementation to use Maven/Aether resolution APIs.
<                 return candidate;
<             }
<         }
<         return null;
<     }
< 
<     /**
<      * Look for all known versions of a given artifact.
<      * @param repos a set of repository URLs to check
<      * @return a possibly empty set of versions, sorted descending
<      */
168d56
<         // TODO consider using official Aether APIs here (could make use of local cache)
176c64
<                 continue; // not even defined in this repo, fine
---
>                 continue;
181d68
<                 // Not bothering to exclude timestamped snapshots for now, since we are working with release repositories anyway.
188,205c75
<     private static final class GitHubCommit {
<         final String owner;
<         final String repo;
<         final String hash;
<         GitHubCommit(String owner, String repo, String hash) {
<             this.owner = owner;
<             this.repo = repo;
<             this.hash = hash;
<         }
<         @Override public String toString() {
<             return "https://github.com/" + owner + '/' + repo + "/commit/" + hash;
<         }
<     }
< 
<     /**
<      * Parses {@code /project/scm/url} and {@code /project/scm/tag} out of a POM, if mapped to a commit.
<      */
<     private static @CheckForNull GitHubCommit loadGitHubCommit(VersionAndRepo vnr) throws Exception {
---
>     private static GitHubCommit loadGitHubCommit(VersionAndRepo vnr) throws Exception {
229,236d98
<     /**
<      * Checks whether a commit is an ancestor of a given branch head.
<      * {@code curl -s -u â€¦ https://api.github.com/repos/<owner>/<repo>/compare/<branch>...<hash> | jq -r .status}
<      * will return {@code identical} or {@code behind} if so, else {@code diverged} or {@code ahead}.
<      * @param branch may be {@code master} or {@code forker:branch}
<      * @see <a href="https://developer.github.com/v3/repos/commits/#compare-two-commits">Compare two commits</a>
<      * @see <a href="https://stackoverflow.com/a/23970412/12916">Discussion</a>
<      */
239,240c101,104
<             GHCompare.Status status = GitHub.connect().getRepository(ghc.owner + '/' + ghc.repo).getCompare(branch, ghc.hash).status;
<             return status == GHCompare.Status.identical || status == GHCompare.Status.behind;
---
>             GitHub gh = GitHub.connect();
>             GHRepository repo = gh.getRepository(ghc.owner + '/' + ghc.repo);
>             GitHubComparison comparison = repo.compare(ghc.hash, branch);
>             return comparison.getStatus().equals(GitHubComparison.Status.BEHIND) || comparison.getStatus().equals(GitHubComparison.Status.EQUAL);
242d105
<             // For example, that branch does not exist in this repository.
245,247d107
<         // TODO check behavior when the comparison is huge (too many commits or too large diff)
<         // and perhaps fall back to cloning into a temp dir and pulling all PR refs https://gist.github.com/piscisaureus/3342247
<         // Currently https://developer.github.com/v4/object/commit/ does no better than this.
279a140,182
>     public static final class GitHubCommit {
>         final String owner;
>         final String repo;
>         final String hash;
>         GitHubCommit(String owner, String repo, String hash) {
>             this.owner = owner;
>             this.repo = repo;
>             this.hash = hash;
>         }
>         @Override public String toString() {
>             return "https://github.com/" + owner + '/' + repo + "/commit/" + hash;
>         }
>     }
> 
>     public static final class VersionAndRepo implements Comparable<VersionAndRepo> {
>         public final String groupId;
>         public final String artifactId;
>         public final ComparableVersion version;
>         public final String repo;
>         VersionAndRepo(String groupId, String artifactId, ComparableVersion version, String repo) {
>             this.groupId = groupId;
>             this.artifactId = artifactId;
>             this.version = version;
>             this.repo = repo;
>         }
>         @Override public int compareTo(VersionAndRepo o) {
>             assert o.groupId.equals(groupId) && o.artifactId.equals(artifactId);
>             return o.version.compareTo(version);
>         }
>         public String baseURL() {
>             return repo + groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/';
>         }
>         public String fullURL(String type) {
>             return baseURL() + artifactId + '-' + version + '.' + type;
>         }
>         @Override public String toString() {
>             return baseURL();
>         }
>     }
> 
>     public interface Log {
>         void info(String message);
>     }
