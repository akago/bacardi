1,24d0
< /*
<  * The MIT License
<  *
<  * Copyright 2018 CloudBees, Inc.
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included in
<  * all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
<  * THE SOFTWARE.
<  */
< 
40c16,17
< import org.kohsuke.github.GHCompare;
---
> import org.kohsuke.github.GHCommit;
> import org.kohsuke.github.GHRepository;
46,48d22
< /**
<  * Looks for updates (incremental or otherwise) to a specific artifact.
<  */
53d26
<     /** keys are {@code groupId:artifactId:currentVersion:branch} */
55d27
< 
63,99d34
<     @FunctionalInterface
<     public interface Log {
<         void info(String message);
<     }
< 
<     public static final class VersionAndRepo implements Comparable<VersionAndRepo> {
<         public final String groupId;
<         public final String artifactId;
<         public final ComparableVersion version;
<         public final String repo;
<         VersionAndRepo(String groupId, String artifactId, ComparableVersion version, String repo) {
<             this.groupId = groupId;
<             this.artifactId = artifactId;
<             this.version = version;
<             this.repo = repo;
<         }
<         /** Sort by version descending. */
<         @Override public int compareTo(VersionAndRepo o) {
<             assert o.groupId.equals(groupId) && o.artifactId.equals(artifactId);
<             return o.version.compareTo(version);
<         }
<         /** @return for example: {@code https://repo/net/nowhere/lib/1.23/} */
<         public String baseURL() {
<             return repo + groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/';
<         }
<         /**
<          * @param type for example, {@code pom}
<          * @return for example: {@code https://repo/net/nowhere/lib/1.23/lib-1.23.pom}
<          */
<         public String fullURL(String type) {
<             return baseURL() + artifactId + '-' + version + '.' + type;
<         }
<         @Override public String toString() {
<             return baseURL();
<         }
<     }
< 
106,108d40
< 
<         //TODO: implement to support non-Incremental formats
<         // Needs to load UC JSON and query it like https://github.com/jenkinsci/docker/pull/668
149,155d80
<                 // TODO may still be useful to select MRP versions targeted to an origin branch.
<                 // (For example, select the latest backport from a stable branch rather than trunk.)
<                 // The problem is that we cannot then guarantee that the POM has been flattened
<                 // (this is only guaranteed for repositories which *may* produce incrementals),
<                 // and loadGitHubCommit will not work for nonflattened POMs from reactor submodules:
<                 // it would have to be made more complicated to resolve the parent POM(s),
<                 // or we would need to switch the implementation to use Maven/Aether resolution APIs.
162,187d86
<     /**
<      * Look for all known versions of a given artifact.
<      * @param repos a set of repository URLs to check
<      * @return a possibly empty set of versions, sorted descending
<      */
<     private SortedSet<VersionAndRepo> loadVersions(String groupId, String artifactId) throws Exception {
<         // TODO consider using official Aether APIs here (could make use of local cache)
<         SortedSet<VersionAndRepo> r = new TreeSet<>();
<         for (String repo : repos) {
<             String mavenMetadataURL = repo + groupId.replace('.', '/') + '/' + artifactId + "/maven-metadata.xml";
<             Document doc;
<             try {
<                 doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(mavenMetadataURL);
<             } catch (FileNotFoundException x) {
<                 continue; // not even defined in this repo, fine
<             }
<             Element versionsE = theElement(doc, "versions", mavenMetadataURL);
<             NodeList versionEs = versionsE.getElementsByTagName("version");
<             for (int i = 0; i < versionEs.getLength(); i++) {
<                 // Not bothering to exclude timestamped snapshots for now, since we are working with release repositories anyway.
<                 r.add(new VersionAndRepo(groupId, artifactId, new ComparableVersion(versionEs.item(i).getTextContent()), repo));
<             }
<         }
<         return r;
<     }
< 
202,236d100
<     /**
<      * Parses {@code /project/scm/url} and {@code /project/scm/tag} out of a POM, if mapped to a commit.
<      */
<     private static @CheckForNull GitHubCommit loadGitHubCommit(VersionAndRepo vnr) throws Exception {
<         String pom = vnr.fullURL("pom");
<         Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(pom);
<         NodeList scmEs = doc.getElementsByTagName("scm");
<         if (scmEs.getLength() != 1) {
<             return null;
<         }
<         Element scmE = (Element) scmEs.item(0);
<         Element urlE = theElement(scmE, "url", pom);
<         String url = urlE.getTextContent();
<         Matcher m = Pattern.compile("https?://github[.]com/([^/]+)/([^/]+?)([.]git)?(/.*)?").matcher(url);
<         if (!m.matches()) {
<             throw new Exception("Unexpected /project/scm/url " + url + " in " + pom + "; expecting https://github.com/owner/repo format");
<         }
<         Element tagE = theElement(scmE, "tag", pom);
<         String tag = tagE.getTextContent();
<         String groupId = m.group(1);
<         String artifactId = m.group(2).replace("${project.artifactId}", vnr.artifactId);
<         if (!tag.matches("[a-f0-9]{40}")) {
<             return null;
<         }
<         return new GitHubCommit(groupId, artifactId, tag);
<     }
< 
<     /**
<      * Checks whether a commit is an ancestor of a given branch head.
<      * {@code curl -s -u â€¦ https://api.github.com/repos/<owner>/<repo>/compare/<branch>...<hash> | jq -r .status}
<      * will return {@code identical} or {@code behind} if so, else {@code diverged} or {@code ahead}.
<      * @param branch may be {@code master} or {@code forker:branch}
<      * @see <a href="https://developer.github.com/v3/repos/commits/#compare-two-commits">Compare two commits</a>
<      * @see <a href="https://stackoverflow.com/a/23970412/12916">Discussion</a>
<      */
239,240c103,106
<             GHCompare.Status status = GitHub.connect().getRepository(ghc.owner + '/' + ghc.repo).getCompare(branch, ghc.hash).status;
<             return status == GHCompare.Status.identical || status == GHCompare.Status.behind;
---
>             GHRepository repo = GitHub.connect().getRepository(ghc.owner + '/' + ghc.repo);
>             GHCommit commit = repo.getCommit(ghc.hash);
>             GHCommit branchCommit = repo.getBranch(branch).getCommit();
>             return commit.isAncestorOf(branchCommit);
242d107
<             // For example, that branch does not exist in this repository.
245,247d109
<         // TODO check behavior when the comparison is huge (too many commits or too large diff)
<         // and perhaps fall back to cloning into a temp dir and pulling all PR refs https://gist.github.com/piscisaureus/3342247
<         // Currently https://developer.github.com/v4/object/commit/ does no better than this.
279a142,170
>     public static final class VersionAndRepo implements Comparable<VersionAndRepo> {
>         public final String groupId;
>         public final String artifactId;
>         public final ComparableVersion version;
>         public final String repo;
>         VersionAndRepo(String groupId, String artifactId, ComparableVersion version, String repo) {
>             this.groupId = groupId;
>             this.artifactId = artifactId;
>             this.version = version;
>             this.repo = repo;
>         }
>         @Override public int compareTo(VersionAndRepo o) {
>             assert o.groupId.equals(groupId) && o.artifactId.equals(artifactId);
>             return o.version.compareTo(version);
>         }
>         public String baseURL() {
>             return repo + groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/';
>         }
>         public String fullURL(String type) {
>             return baseURL() + artifactId + '-' + version + '.' + type;
>         }
>         @Override public String toString() {
>             return baseURL();
>         }
>     }
> 
>     public interface Log {
>         void info(String message);
>     }
