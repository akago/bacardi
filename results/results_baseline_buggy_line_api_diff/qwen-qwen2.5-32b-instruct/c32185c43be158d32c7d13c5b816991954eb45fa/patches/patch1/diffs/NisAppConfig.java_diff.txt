3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setLocations(Arrays.asList(prop.getProperty("flyway.locations").split(",")));
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(config);
235,370d236
<         public ReadOnlyNisCache nisCache() {
<                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),
<                                 this.namespaceCache());
<         }
< 
<         @Bean
<         @SuppressWarnings("serial")
<         public ImportanceCalculator importanceCalculator() {
<                 final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {
<                         {
<                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
<                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
<                                 this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
<                                 featureSupplierMap);
<         }
< 
<         @Bean
<         public UnlockedAccounts unlockedAccounts() {
<                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
<                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
<         }
< 
<         @Bean
<         public CanHarvestPredicate canHarvestPredicate() {
<                 return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);
<         }
< 
<         private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {
<                 return getBlockDependentPoiOptions(height).getMinHarvesterBalance();
<         }
< 
<         private static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {
<                 return new PoiOptionsBuilder(height).create();
<         }
< 
<         @Bean
<         public Supplier<BlockHeight> lastBlockHeight() {
<                 return this.blockChainLastBlockLayer::getLastBlockHeight;
<         }
< 
<         @Bean
<         public UnconfirmedTransactions unconfirmedTransactions() {
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
<                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
<                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
<                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
<                                 this.nisCache());
<                 return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);
<         }
< 
<         @Bean
<         public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {
<                 return this.unconfirmedTransactions().asFilter();
<         }
< 
<         @Bean
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
<         public NisMain nisMain() {
<                 // initialize network info
<                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
< 
<                 // initialize other globals
<                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
<                 if (this.nisConfiguration().ignoreFees()) {
<                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
<                 } else {
<                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
<                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
<                                                         new BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),
<                                                         new BlockHeight(
<                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
<                                         }));
<                 }
< 
<                 NemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());
<                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
< 
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
<                                 this.nisConfiguration(), this.blockAnalyzer(), System::exit);
<         }
< 
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
<                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
<                         {
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
<         }
< 
<         @Bean
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
389,436c255,257
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
< 
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
< 
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
<         }
< 
<         @Bean
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
<         }
< 
<         @Bean
<         public Function<Address, Collection<Address>> cosignatoryLookup() {
<                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
<         }
---
>         public NisMain nisMain() {
>                 // initialize network info
>                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
438,440c259,260
<         @Bean
<         public MosaicIdCache mosaicIdCache() {
<                 return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());
---
>                 // initialize other globals
>                 return new NisMain(this.blockDao, this.blockChainLastBlockLayer, this.nisConfiguration());
