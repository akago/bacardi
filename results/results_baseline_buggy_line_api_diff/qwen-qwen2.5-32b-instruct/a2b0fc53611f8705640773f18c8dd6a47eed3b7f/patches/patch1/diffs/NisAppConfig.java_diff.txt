3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(prop.getProperty("flyway.locations").split(","));
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(configuration);
334,335c336,337
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTINGING, () -> TimeBasedVestingWeightedBalances::new);
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, AlwaysVestedBalances::new);
344,348c346,347
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
---
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
352,356c351,360
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
---
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
>         }
> 
>         @Bean
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
363,368c367,370
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
---
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), harvestingTask.getTransactionProvider(), this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
>                                 generator);
377,378c379,383
<         public NisConfiguration nisConfiguration() {
<                 return new NisConfiguration();
---
>         public HttpConnectorPool httpConnectorPool() {
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
>                                 ? CommunicationMode.BINARY
>                                 : CommunicationMode.JSON;
>                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
382,384c387,388
<         public TimeProvider timeProvider() {
<                 return CommonStarter.TIME_PROVIDER;
<         }
---
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
386,391c390,394
<         @Bean
<         public TrustProvider trustProvider() {
<                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
<                 final int TRUST_CACHE_TIME = 15 * 60;
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
<                                 this.timeProvider());
---
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), harvestingTask.getTransactionProvider(), this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new NisPeerNetworkHost(this.nisCache(), this.blockChainSynchronizer(), this.scheduler(), this.chainServices(),
>                                 this.nodeCompatibilityChecker(), this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(),
>                                 this.outgoingAudits());
395,396c398,402
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
---
>         public BlockAnalyzer blockAnalyzer() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
>                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
>                                 estimatedBlocksPerYear, forkConfiguration);
