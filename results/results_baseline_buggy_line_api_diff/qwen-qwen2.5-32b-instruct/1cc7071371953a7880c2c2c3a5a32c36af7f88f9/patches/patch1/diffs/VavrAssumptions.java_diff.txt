24,33c24,30
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.pool.TypePool;
40,42c37
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
< import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
---
> import static net.bytebuddy.matcher.ElementMatchers.any;
46,51c41,43
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
<     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)
<             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
---
> {
>     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().disableTypeValidation()
>             .namingStrategy(new net.bytebuddy.dynamic.scaffold.naming.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
53c45
<     private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
---
>     private static final MethodDelegation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
55,57c47
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
< 
<     private static final class AssumptionMethodInterceptor {
---
>     private static final TypePool.TypeCache<SimpleKey> CACHE = TypePool.Default.ofSystemLoader().openCache();
58a49,50
>     private static final class AssumptionMethodInterceptor
>     {
60,61c52,55
<         public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {
<             try {
---
>         public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception
>         {
>             try
>             {
63c57,58
<                 if (result != assertion && result instanceof AbstractVavrAssert) {
---
>                 if (result != assertion && result instanceof AbstractVavrAssert)
>                 {
68c63,65
<             } catch (AssertionError e) {
---
>             }
>             catch (AssertionError e)
>             {
74,84c71,72
<     /**
<      * Creates a new instance of <code>{@link EitherAssert}</code> assumption.
<      *
<      * @param <LEFT>  type of the left value contained in the {@link Either}.
<      * @param <RIGHT> type of the right value contained in the {@link Either}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {
---
>     public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual)
>     {
88,97c76,77
<     /**
<      * Creates a new instance of <code>{@link LazyAssert}</code> assumption.
<      *
<      * @param <VALUE>    type of the value contained in the {@link Lazy}.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {
---
>     public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual)
>     {
101,111c81,82
<     /**
<      * Creates a new instance of <code>{@link MapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the map.
<      * @param <V>    the type of values in the map.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {
---
>     public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual)
>     {
115,125c86,87
<     /**
<      * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the multimap.
<      * @param <V>    the type of values in the multimap.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {
---
>     public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual)
>     {
129,138c91,92
<     /**
<      * Creates a new instance of <code>{@link OptionAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link Option}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {
---
>     public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual)
>     {
142,151c96,97
<     /**
<      * Creates a new instance of <code>{@link SetAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Set}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {
---
>     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual)
>     {
155,164c101,102
<     /**
<      * Creates a new instance of <code>{@link SeqAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Seq}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {
---
>     public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual)
>     {
168,177c106,107
<     /**
<      * Creates a new instance of <code>{@link TryAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.
<      * @param actual    the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {
---
>     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual)
>     {
181,191c111,112
<     /**
<      * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.
<      *
<      * @param <INVALID> type of the value in the case of the invalid {@link Validation}.
<      * @param <VALID>   type of the value in the case of the valid {@link Validation}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {
---
>     public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual)
>     {
197,198c118,120
<                                                               Object actual) {
<         return asAssumption(assertionType, array(actualType), array(actual));
---
>                                                               Object actual)
>     {
>         return asAssumption(assertionType, new Class<?>[]{actualType}, new Object[]{actual});
203,204c125,128
<                                                       Object... constructorParams) {
<         try {
---
>                                                        Object... constructorParams)
>     {
>         try
>         {
208c132,134
<         } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {
---
>         }
>         catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e)
>         {
213,214c139,140
<     @SuppressWarnings("unchecked")
<     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {
---
>     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass)
>     {
221c147,148
<     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {
---
>     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType)
>     {
226c153
<                 .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))
---
>                 .load(VavrAssumptions.class.getClassLoader(), ClassLoadingStrategy.Default.ofSystemLoader())
230c157,158
<     private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {
---
>     private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException
>     {
237c165
<         assumptionClass = getAssumptionClass("org.testng.SkipException");
---
>         assumptionClass = getAssumptionClass"org.testng.SkipException");
243,244c171,174
<     private static Class<?> getAssumptionClass(String className) {
<         try {
---
>     private static Class<?> getAssumptionClass(String className)
>     {
>         try
>         {
246c176,178
<         } catch (ClassNotFoundException e) {
---
>         }
>         catch (ClassNotFoundException e)
>         {
252c184,185
<                                                      AssertionError e) throws ReflectiveOperationException {
---
>                                                      AssertionErrorError e) throws ReflectiveOperationException
>     {
257,259c190,191
<     // for method that change the object under test (e.g. extracting)
<     private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {
<         // @format:off
---
>     private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion)
>     {
268,269d199
<         // @format:on
<         // should not arrive here
272d201
< 
