1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
38,43c20,25
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
46,49d27
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
< import org.apache.commons.beanutils.PropertyUtils;
64c42
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
85,86d62
<                 typesControlGroups.put(Boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(boolean.class, CheckboxControlGroup.class);
111,112d86
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
119,120d92
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
123,133c95,96
<                 for(String property : properties){
<                         PropertyDescriptor descriptor;
<                         try {
<                                 descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
<                         } catch (Exception e) {
<                                 throw new RuntimeException("error getting property "+property, e);
<                         }
< 
<                         boolean required = false;
< 
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
---
>                 for(String property : getPropertiesByOrder(modelClass)){
>                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(property);
143,144d105
< 
<                         objectProperties.add(new ObjectProperties(descriptor, required));
165d125
< 
210c170
<         @SuppressWarnings("unchecked")
---
>         @SuppressWarnings("rawtypes")
224,228c184,185
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
<                 }
<                 return null;
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>                 return typesControlGroups;
245,253d201
< 
<         @SuppressWarnings("rawtypes")
<         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
<                 return typesControlGroups;
<         }
<         
<         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
<                 return this.controlGroupProviders;
<         }
