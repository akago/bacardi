12a13,14
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
17,19c19,20
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.parameter.CommandContext;
22,23c23,24
< import org.spongepowered.api.text.Text;
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.service.permission.Subject;
> import org.spongepowered.api.text.channel.MessageChannel;
25c26
< public class InfoCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class InfoCommand implements Command, ChangeSkinCommand {
26a28
> {
33d34
< 
35,37c36,38
<     public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
---
>     public CommandResult execute(CommandContext context) throws CommandException {
>         if (!(context.source() instanceof Player)) {
>             plugin.sendMessage(context.source(), "no-console");
41,43c42,43
<         UUID uniqueId = ((Player) src).getUniqueId();
<         Task.builder().async()
<                 .execute(() -> {
---
>         UUID uniqueId = ((Player) context.source()).uniqueId();
>         Task.builder().execute(() -> {
46,47c46
<                 })
<                 .submit(plugin);
---
>         }).submit(plugin);
53,54c52,53
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command.Parameterized buildSpec() {
>         return Command.builder()
61c60
<         Optional<Player> optPlayer = Sponge.getServer().getPlayer(uuid);
---
>         Optional<Player> optPlayer = Sponge.server().player(uuid);
70,71c69,70
<                 Text text = TextSerializers.LEGACY_FORMATTING_CODE.deserialize(formatted);
<                 player.sendMessage(text);
---
>                 Component component = PlainTextComponentSerializer.plain().deserialize(formatted);
>                 player.sendMessage(component);
