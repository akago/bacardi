11d10
< import com.google.inject.Inject;
15d13
< import org.spongepowered.api.Platform.Type;
17,20c15,21
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelBuf;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.network.RawDataListener;
---
> import org.spongepowered.api.network.channel.packet.PacketDispatcher;
> import org.spongepowered.api.network.channel.packet.Packet;
> import org.spongepowered.api.network.channel.ChannelRegistrar;
> import org.spongepowered.api.network.channel.ChannelBuf;
> import org.spongepowered.api.network.channel.ChannelBinding;
> import org.spongepowered.api.network.channel.Channel;
> import org.spongepowered.api.network.EngineConnection;
21a23
> import org.spongepowered.api.Platform.Type;
23,26c25
< import static com.github.games647.changeskin.core.message.PermResultMessage.PERMISSION_RESULT_CHANNEL;
< import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;
< 
< public class CheckPermissionListener implements RawDataListener {
---
> public class CheckPermissionListener {
29c28
<     private final RawDataChannel permissionsResultChannel;
---
>     private final Channel permissionsResultChannel;
36c35
<         permissionsResultChannel = channelRegistrar.getOrCreateRaw(plugin, combinedName);
---
>         permissionsResultChannel = channelRegistrar.createChannel(combinedName);
39d37
<     @Override
72,77c70
<         boolean hasCommandPerm = invoker.hasPermission(pluginName +  '.' + node);
<         if (skinPerm) {
<             return hasCommandPerm && plugin.hasSkinPermission(invoker, targetUUID, false);
<         }
< 
<         return hasCommandPerm;
---
>         return invoker.hasPermission(pluginName +  '.' + node);
83c76,82
<         permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
---
>         Packet packet = new Packet() {
>             @Override
>             public void write(ChannelBuf buffer) {
>                 buffer.writeByteArray(dataOutput.toByteArray());
>             }
>         };
>         permissionsResultChannel.sendTo(receiver, packet);
