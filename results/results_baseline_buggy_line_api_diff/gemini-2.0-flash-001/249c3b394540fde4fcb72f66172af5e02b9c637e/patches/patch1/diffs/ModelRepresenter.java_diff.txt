24a25,27
> import java.beans.Introspector;
> import java.beans.BeanInfo;
> import java.beans.PropertyDescriptor;
218,219c221,222
<   protected Set<Property> getProperties(Class<? extends Object> type)
<           throws IntrospectionException {
---
>   protected Set<Property> getProperties(Class<? extends Object> type) {
>     try {
232a236,238
>     } catch (IntrospectionException e) {
>       throw new YAMLException(e);
>     }
237c243
<       Set<Property> standard = super.getProperties(type);
---
>       Set<Property> standard = getYamlProperties(type);
242a249,260
>   private Set<Property> getYamlProperties(Class<? extends Object> type) throws IntrospectionException {
>     Set<Property> yamlProperties = new HashSet<>();
>     BeanInfo beanInfo = Introspector.getBeanInfo(type);
>     PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
> 
>     for (PropertyDescriptor pd : propertyDescriptors) {
>       yamlProperties.add(new PropertyAdapter(pd));
>     }
> 
>     return yamlProperties;
>   }
> 
270a289,317
> 
>   // Simple adapter to convert java.beans.PropertyDescriptor to org.yaml.snakeyaml.introspector.Property
>   private static class PropertyAdapter extends Property {
>     private final PropertyDescriptor propertyDescriptor;
> 
>     public PropertyAdapter(PropertyDescriptor propertyDescriptor) {
>       super(propertyDescriptor.getName(), propertyDescriptor.getPropertyType());
>       this.propertyDescriptor = propertyDescriptor;
>     }
> 
>     @Override
>     public Class<?> getType() {
>       return propertyDescriptor.getPropertyType();
>     }
> 
>     @Override
>     public void set(Object object, Object value) throws Exception {
>       propertyDescriptor.getWriteMethod().invoke(object, value);
>     }
> 
>     @Override
>     public Object get(Object object) {
>       try {
>         return propertyDescriptor.getReadMethod().invoke(object);
>       } catch (Exception e) {
>         throw new YAMLException("Unable to get property " + getName() + " on object " + object, e);
>       }
>     }
>   }
