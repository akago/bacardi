12a13,15
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
> 
14c17
< import org.spongepowered.api.command.CommandException;
---
> import org.spongepowered.api.command.Command;
16,19c19,21
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.exception.CommandException;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.CommandCause;
22,23d23
< import org.spongepowered.api.text.Text;
< import org.spongepowered.api.text.serializer.TextSerializers;
25c25
< public class InfoCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class InfoCommand implements org.spongepowered.api.command.CommandExecutor, ChangeSkinCommand {
35,38c35,38
<     public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
<             return CommandResult.empty();
---
>     public CommandResult execute(CommandCause cause, CommandContext args) throws CommandException {
>         if (!(cause.cause() instanceof Player)) {
>             plugin.sendMessage(cause, "no-console");
>             return CommandResult.success();
41,42c41,43
<         UUID uniqueId = ((Player) src).getUniqueId();
<         Task.builder().async()
---
>         Player player = (Player) cause.cause();
>         UUID uniqueId = player.getUniqueId();
>         Task.builder().plugin(plugin).async()
45c46
<                     Task.builder().execute(() -> sendSkinDetails(uniqueId, preferences)).submit(plugin);
---
>                     Task.builder().plugin(plugin).execute(() -> sendSkinDetails(uniqueId, preferences, cause)).submit(plugin);
53,54c54,55
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         return Command.builder()
60,61c61,62
<     private void sendSkinDetails(UUID uuid, UserPreference preference) {
<         Optional<Player> optPlayer = Sponge.getServer().getPlayer(uuid);
---
>     private void sendSkinDetails(UUID uuid, UserPreference preference, CommandCause cause) {
>         Optional<Player> optPlayer = Sponge.server().player(uuid);
70,71c71,72
<                 Text text = TextSerializers.LEGACY_FORMATTING_CODE.deserialize(formatted);
<                 player.sendMessage(text);
---
>                 Component text = LegacyComponentSerializer.legacySection().deserialize(formatted);
>                 cause.sendMessage(text);
