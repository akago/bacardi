19a20,22
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
> 
21c24
< import org.spongepowered.api.Platform.Type;
---
> import org.spongepowered.api.Platform;
23,24d25
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
27,31c28,32
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
---
> import org.spongepowered.api.event.lifecycle.GameInitializationEvent;
> import org.spongepowered.api.event.lifecycle.GamePreInitializationEvent;
> import org.spongepowered.api.event.lifecycle.GameStoppingServerEvent;
> import org.spongepowered.api.network.channel.raw.RawDataChannel;
> import org.spongepowered.api.network.channel.ChannelRegistry;
33c34,38
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandResult;
> import org.spongepowered.api.command.exception.CommandException;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.CommandCause;
42c47
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<CommandCause> {
77,78d81
<         CommandManager cmdManager = Sponge.getCommandManager();
< 
80,85c83
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
---
>         Sponge.eventManager().registerListeners(this, injector.getInstance(LoginListener.class));
87c85
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
---
>         registerCommands();
90c88
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
---
>         ChannelRegistry channelReg = Sponge.channelRegistry();
93,96c91,108
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         RawDataChannel updateChannel = channelReg.register(this, updateChannelName);
>         RawDataChannel permChannel = channelReg.register(this, permissionChannelName);
>         updateChannel.addListener(injector.getInstance(UpdateSkinListener.class));
>         permChannel.addListener(injector.getInstance(CheckPermissionListener.class));
>     }
> 
>     private void registerCommands() {
>         InfoCommand infoCommand = injector.getInstance(InfoCommand.class);
>         SelectCommand selectCommand = injector.getInstance(SelectCommand.class);
>         UploadCommand uploadCommand = injector.getInstance(UploadCommand.class);
>         SetCommand setCommand = injector.getInstance(SetCommand.class);
>         InvalidateCommand invalidateCommand = injector.getInstance(InvalidateCommand.class);
> 
>         Sponge.commandManager().register(this, infoCommand.buildCommand(), "skin-info");
>         Sponge.commandManager().register(this, selectCommand.buildCommand(), "skin-select", "skinselect");
>         Sponge.commandManager().register(this, uploadCommand.buildCommand(), "skin-upload");
>         Sponge.commandManager().register(this, setCommand.buildCommand(), "changeskin", "setskin", "skin");
>         Sponge.commandManager().register(this, invalidateCommand.buildCommand(), "skininvalidate", "skin-invalidate");
109c121
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
---
>     public boolean hasSkinPermission(CommandCause invoker, UUID uuid, boolean sendMessage) {
142c154
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(CommandCause receiver, String key) {
145c157,158
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             Component text = LegacyComponentSerializer.legacySection().deserialize(message);
>             receiver.sendMessage(text);
