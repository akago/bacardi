1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
30c7,8
< import org.cactoos.collection.Filtered;
---
> import java.util.Arrays;
> import org.cactoos.iterable.Filtered;
36d13
< import org.cactoos.scalar.CheckedScalar;
38d14
< import org.cactoos.scalar.UncheckedScalar;
40d15
< import org.cactoos.text.SplitText;
59,60d33
<      * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
<      * @checkstyle MethodName (2 lines)
201,213c174,180
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
<                     16
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             try {
>                 String content = new TextOf(this.path).asString();
>                 String[] lines = content.split("\n");
>                 return Long.parseUnsignedLong(lines[2].trim(), 16);
>             } catch (Exception ex) {
>                 throw new IOException(ex);
>             }
248,250c215,219
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
---
>                 incoming -> new ListOf<>(
>                     new Filtered<>(
>                         origin -> {
>                             try {
>                                 return new Or(
257,258c226,230
<                         )
<                     ).value(),
---
>                                 ).value();
>                             } catch (Exception ex) {
>                                 throw new RuntimeException(ex);
>                             }
>                         },
259a232
>                     )
270a244,245
>             String content = new TextOf(this.path).asString();
>             String[] lines = content.split("\\n");
272c247
<                 txt -> new RtTransaction(txt.asString()),
---
>                 line -> new RtTransaction(line),
274,280c249
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
<                     ),
<                     // @checkstyle MagicNumberCheck (1 line)
---
>                     new ListOf<>(Arrays.asList(lines)),
