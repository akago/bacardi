30d29
< import java.util.List;
32,43d30
< import org.cactoos.Text;
< import org.cactoos.iterable.LengthOf;
< import org.cactoos.list.ListOf;
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.ItemAt;
< import org.cactoos.scalar.StickyScalar;
< import org.cactoos.scalar.UncheckedScalar;
< import org.cactoos.text.FormattedText;
< import org.cactoos.text.SplitText;
< import org.cactoos.text.TextOf;
< import org.cactoos.text.TrimmedText;
< import org.cactoos.text.UncheckedText;
60,61c47
<         //@checkstyle LineLengthCheck (1 line)
<         "^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$"
---
>         "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
88c74
<     private final IoCheckedScalar<String> transaction;
---
>     private final String transaction;
92a79
>      * @throws IOException if transaction is invalid
94,105c81,83
<     RtTransaction(final String trnsct) {
<         this.transaction = new IoCheckedScalar<>(
<             new StickyScalar<>(
<                 () -> {
<                     if (
<                         new TrimmedText(
<                             new TextOf(trnsct)
<                         ).asString().isEmpty()
<                     ) {
<                         throw new IOException(
<                             "Invalid transaction string: string is empty"
<                         );
---
>     RtTransaction(final String trnsct) throws IOException {
>         if (trnsct.trim().isEmpty()) {
>             throw new IOException("Invalid transaction string: string is empty");
107,112c85,86
<                     final List<Text> pieces =
<                         new ListOf<>(
<                             new SplitText(trnsct, ";")
<                         );
<                     // @checkstyle MagicNumberCheck (1 line)
<                     if (new LengthOf(pieces).intValue() != 7) {
---
>         String[] parts = trnsct.split(";", -1);
>         if (parts.length != 7) {
114,118c88
<                             new FormattedText(
<                                 // @checkstyle LineLength (1 line)
<                                 "Invalid transaction string: expected 7 fields, but found %d",
<                                 pieces.size()
<                             ).asString()
---
>                 String.format("Invalid transaction string: expected 7 fields, but found %d", parts.length)
121,124c91
<                     return trnsct;
<                 }
<             )
<         );
---
>         this.transaction = trnsct;
130,136c97,98
<         final String ident = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     0, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String[] parts = this.transaction.split(";", -1);
>         final String ident = parts[0];
139,145c101
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols",
<                         ident
<                     )
<                 ).asString()
---
>                 String.format("Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols", ident)
148d103
<         // @checkstyle MagicNumber (1 line)
154,163c109,111
<         return new ZonedDateTimeOf(
<             new UncheckedText(
<                 new IoCheckedScalar<>(
<                     new ItemAt<>(
<                         1, new SplitText(this.transaction.value(), ";")
<                     )
<                 ).value()
<             ).asString(),
<             DateTimeFormatter.ISO_OFFSET_DATE_TIME
<         ).value();
---
>         String[] parts = this.transaction.split(";", -1);
>         final String timeString = parts[1];
>         return new ZonedDateTimeOf(timeString, DateTimeFormatter.ISO_OFFSET_DATE_TIME).value();
168,174c116,117
<         final String amnt = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     2, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String[] parts = this.transaction.split(";", -1);
>         final String amnt = parts[2];
177,183c120
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols",
<                         amnt
<                     )
<                 ).asString()
---
>                 String.format("Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols", amnt)
186d122
<         // @checkstyle MagicNumber (1 line)
192,200c128,129
<         final String prefix = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     3, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         //@checkstyle MagicNumberCheck (1 line)
---
>         String[] parts = this.transaction.split(";", -1);
>         final String prefix = parts[3];
212,219c141,142
<         final String bnf = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     4, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String[] parts = this.transaction.split(";", -1);
>         final String bnf = parts[4];
222,228c145
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid bnf string '%s', expecting hex string with 16 symbols",
<                         bnf
<                     )
<                 ).asString()
---
>                 String.format("Invalid bnf string '%s', expecting hex string with 16 symbols", bnf)
236,243c153,154
<         final String dtls = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     5, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         String[] parts = this.transaction.split(";", -1);
>         final String dtls = parts[5];
246,252c157
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid details string '%s', does not match pattern '%s'",
<                         dtls, RtTransaction.DTLS
<                     )
<                 ).asString()
---
>                 String.format("Invalid details string '%s', does not match pattern '%s'", dtls, RtTransaction.DTLS)
260,270c165,167
<         final String sign = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     6, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         // @checkstyle MagicNumber (1 line)
<         if (sign.length() != 684
<             || !RtTransaction.SIGN.matcher(sign).matches()) {
---
>         String[] parts = this.transaction.split(";", -1);
>         final String sign = parts[6];
>         if (sign.length() != 684 || !RtTransaction.SIGN.matcher(sign).matches()) {
272,278c169
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid signature '%s', expecting base64 string with 684 characters",
<                         sign
<                     )
<                 ).asString()
---
>                 String.format("Invalid signature '%s', expecting base64 string with 684 characters", sign)
286c177
<         return new UncheckedScalar<>(this.transaction).value();
---
>         return this.transaction;
