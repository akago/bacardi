26d25
< import org.tinspin.index.kdtree.KDTree;
66d64
<                 final KDTree<PVector> tree = KDTree.create(2);
69,71c67
<                         final double[] coords = new double[] { p.x, p.y };
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
<                                 tree.insert(coords, p);
---
>                         if (newPoints.isEmpty() || nearestDistance(newPoints, p) > distanceTolerance) {
77a74,86
>         private static double nearestDistance(List<PVector> points, PVector p) {
>                 double min = Double.MAX_VALUE;
>                 for (PVector q : points) {
>                         double dx = p.x - q.x;
>                         double dy = p.y - q.y;
>                         double d = Math.sqrt(dx * dx + dy * dy);
>                         if (d < min) {
>                                 min = d;
>                         }
>                 }
>                 return min;
>         }
> 
981d989
<                 @Override
