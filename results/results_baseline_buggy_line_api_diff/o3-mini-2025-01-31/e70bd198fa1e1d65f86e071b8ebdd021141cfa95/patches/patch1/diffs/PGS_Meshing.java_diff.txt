15a16
> import org.tinspin.index.phtree.PHTreeP;
38,39d38
< import org.tinspin.index.PointIndex;
< import org.tinspin.index.kdtree.KDTree;
155,157c154,156
<                                 edges.add(t.getEdgeA().getBaseReference()); // add edge to set
<                                 edges.add(t.getEdgeB().getBaseReference()); // add edge to set
<                                 edges.add(t.getEdgeC().getBaseReference()); // add edge to set
---
>                                 edges.add(t.getEdgeA().getBaseReference());
>                                 edges.add(t.getEdgeB().getBaseReference());
>                                 edges.add(t.getEdgeC().getBaseReference());
164,169c163,164
<                 final PointIndex<Vertex> tree = KDTree.create(2, (p1, p2) -> {
<                         final double deltaX = p1[0] - p2[0];
<                         final double deltaY = p1[1] - p2[1];
<                         return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
<                 });
<                 vertices.forEach(v -> tree.insert(new double[] { v.x, v.y }, v));
---
>                 final PHTreeP<Vertex> tree = PHTreeP.create(2);
>                 vertices.forEach(v -> tree.put(new double[] { v.x, v.y }, v));
171c166
<                 final HashSet<IQuadEdge> nonGabrielEdges = new HashSet<>(); // base references to edges that should be removed
---
>                 final HashSet<IQuadEdge> nonGabrielEdges = new HashSet<>();
174c169
<                         final Vertex near = tree.query1NN(midpoint).value();
---
>                         final Vertex near = tree.queryKNN(midpoint, 1).get(0).value();
177c172
<                                         nonGabrielEdges.add(edge); // base reference
---
>                                         nonGabrielEdges.add(edge);
