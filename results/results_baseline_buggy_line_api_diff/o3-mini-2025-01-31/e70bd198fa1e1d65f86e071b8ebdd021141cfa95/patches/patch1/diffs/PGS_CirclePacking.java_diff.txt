26,28d25
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
203c200
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final CircleIndex tree = new CircleIndex();
226c223
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
---
>                         final NNEntry nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
627,656d623
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
663a631,673
>         // Custom replacement for the removed API functionality
>         
>         private static class CircleIndex {
>                 private final List<PVector> circles = new ArrayList<>();
>         
>                 public NNEntry query1NN(double[] key) {
>                         PVector best = null;
>                         double bestDistance = Double.MAX_VALUE;
>                         double qx = key[0], qy = key[1], qz = key[2];
>                         for (PVector circle : circles) {
>                                 double dx = circle.x - qx;
>                                 double dy = circle.y - qy;
>                                 double distance = Math.sqrt(dx * dx + dy * dy) + Math.abs(circle.z - qz);
>                                 if (distance < bestDistance) {
>                                         bestDistance = distance;
>                                         best = circle;
>                                 }
>                         }
>                         return new NNEntry(best, bestDistance);
>                 }
>         
>                 public void insert(double[] key, PVector point) {
>                         circles.add(point);
>                 }
>         }
>         
>         private static class NNEntry {
>                 private final PVector value;
>                 private final double distance;
>         
>                 public NNEntry(PVector value, double distance) {
>                         this.value = value;
>                         this.distance = distance;
>                 }
>         
>                 public PVector value() {
>                         return value;
>                 }
>         
>                 public double dist() {
>                         return distance;
>                 }
>         }
