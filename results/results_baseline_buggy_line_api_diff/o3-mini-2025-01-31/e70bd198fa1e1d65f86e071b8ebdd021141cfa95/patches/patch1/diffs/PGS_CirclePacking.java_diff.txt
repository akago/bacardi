26,28d25
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
57,61d53
<         /*-
<          * Roadmap (see/implement): 'A LINEARIZED CIRCLE PACKING ALGORITHM'? 
<          * 'A note on circle packing' Young Joon AHN.
<          */
< 
165d156
<          * 
203c194
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final SimplePointIndex<PVector> tree = new SimplePointIndex<>();
226,235c217,220
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
< 
<                         /*
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                         SimplePointEntry<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR });
>                         final float dx = p.x - nn.value.x;
>                         final float dy = p.y - nn.value.y;
>                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value.z);
627,656d611
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
663a619,658
>         // Simple point index to substitute for the removed tinspin CoverTree and related classes.
>         public static class SimplePointIndex<V> {
>                 private final List<SimplePointEntry<V>> entries = new ArrayList<>();
> 
>                 public void insert(double[] key, V value) {
>                         entries.add(new SimplePointEntry<>(key, value));
>                 }
> 
>                 public SimplePointEntry<V> query1NN(double[] query) {
>                         SimplePointEntry<V> best = null;
>                         double bestDistance = Double.MAX_VALUE;
>                         for (SimplePointEntry<V> entry : entries) {
>                                 double d = distance(query, entry.key);
>                                 if (d < bestDistance) {
>                                         bestDistance = d;
>                                         best = entry;
>                                 }
>                         }
>                         return best;
>                 }
> 
>                 private double distance(double[] a, double[] b) {
>                         double dx = a[0] - b[0];
>                         double dy = a[1] - b[1];
>                         double euclidean = Math.sqrt(dx * dx + dy * dy);
>                         double dz = Math.abs(a[2] - b[2]);
>                         return euclidean + dz;
>                 }
>         }
> 
>         public static class SimplePointEntry<V> {
>                 public final double[] key;
>                 public final V value;
> 
>                 public SimplePointEntry(double[] key, V value) {
>                         this.key = key;
>                         this.value = value;
>                 }
>         }
> 
