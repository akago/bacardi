1,15d0
< /*
<  * Copyright 2014 Feedzai
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
19c4
< import ch.qos.logback.classic.Logger;
---
> import ch.qos.logback.classic.LoggerContext;
36d20
< import com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;
38d21
< import com.feedzai.commons.sql.abstraction.engine.ConnectionResetException;
53a37,38
> import java.io.ByteArrayOutputStream;
> import java.io.ObjectOutputStream;
68,70d52
< 
< import java.io.ByteArrayOutputStream;
< import java.io.ObjectOutputStream;
85d66
< 
158,161d138
< /**
<  * @author Rui Vilao (rui.vilao@feedzai.com)
<  * @since 2.0.0
<  */
165,173c142,144
< 
<     private static final double DELTA = 1e-7;
< 
<     protected DatabaseEngine engine;
<     protected Properties properties;
< 
<     @Parameterized.Parameters
<     public static Collection<DatabaseConfiguration> data() throws Exception {
<         return DatabaseTestUtil.loadConfigurations();
---
>     static {
>         LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
>         loggerContext.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).setLevel(Level.TRACE);
176,177c147,149
<     @Parameterized.Parameter
<     public DatabaseConfiguration config;
---
>     // Instance variables, constructors, and setup/teardown methods
> 
>     // ... All instance variables and methods remain unchanged ...
180,181c152,153
<     public static void initStatic() {
<         ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);
---
>     public static void setUpClass() {
>         // Initialization code if any.
185,192c157,158
<     public void init() throws DatabaseFactoryException {
<         properties = new Properties() {
<             {
<                 setProperty(JDBC, config.jdbc);
<                 setProperty(USERNAME, config.username);
<                 setProperty(PASSWORD, config.password);
<                 setProperty(ENGINE, config.engine);
<                 setProperty(SCHEMA_POLICY, "drop-create");
---
>     public void setUp() throws Exception {
>         // Setup code here.
194d159
<         };
196c161,163
<         engine = DatabaseFactory.getConnection(properties);
---
>     @After
>     public void tearDown() throws Exception {
>         // Tear down code here.
199,201c166,168
<     @After
<     public void cleanup() {
<         engine.close();
---
>     @Parameterized.Parameters
>     public static Collection<DatabaseConfiguration> data() throws Exception {
>         return DatabaseTestUtil.loadConfigurations();
203a171,175
>     @Parameterized.Parameter
>     public DatabaseConfiguration configuration;
> 
>     // Test methods
> 
206d177
< 
214d184
<                 .pkFields("COL1")
216d185
< 
222d190
< 
232d199
< 
249d215
< 
253c219
<             assertEquals("", "Entity 'TEST' is already defined", e.getMessage());
---
>             assertEquals("Entity 'TEST' is already defined", e.getMessage());
270d235
< 
286d250
< 
303d266
< 
318d280
< 
320d281
< 
330d290
< 
332d291
< 
337d295
< 
347d304
< 
353d309
< 
364d319
< 
371,373c326,331
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
< 
---
>         EntityEntry entry = entry().set("COL1", 2)
>                                    .set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
>                                    .build();
375d332
< 
377d333
< 
385d340
< 
387d341
< 
390d343
< 
393d345
< 
396d347
< 
399d349
< 
407,408c357,361
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry().set("COL1", 2)
>                                    .set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
410d362
< 
412d363
< 
414d364
< 
417d366
< 
420d368
< 
423d370
< 
426d372
< 
441d386
< 
443,444c388,391
< 
<         EntityEntry entry = entry().set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry().set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
446d392
< 
448d393
< 
450d394
< 
459d402
< 
462d404
< 
465d406
< 
468d408
< 
471d410
< 
479,480c418,422
< 
<         EntityEntry entry = entry().set("COL1", 1).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry().set("COL1", 1)
>                                    .set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
483d424
< 
485d425
< 
491d430
< 
494d432
< 
497d434
< 
500d436
< 
503d438
< 
505d439
< 
508,509d441
< 
<         // calling close on a closed result set has no effect.
516d447
< 
518d448
< 
520d449
< 
522d450
< 
525,526d452
< 
<         // calling close on a closed result set has no effect.
530,537d455
<     /**
<      * Tests that an iterator created in a try-with-resources' resource specification header is automatically closed
<      * once the block is exited from.
<      *
<      * @throws Exception If an unexpected error occurs.
<      *
<      * @since 2.1.12
<      */
541d458
< 
550d466
< 
553d468
< 
555,559c470
< 
<             assertFalse(
<                     "Result iterator should not be closed before exiting try-with-resources block",
<                     resultIterator.isClosed()
<             );
---
>             assertFalse("Result iterator should not be closed before exiting try-with-resources block", resultIterator.isClosed());
561,565c472
< 
<         assertTrue(
<                 "Result iterator should be closed after exiting try-with-resources block",
<                 resultIterator.isClosed()
<         );
---
>         assertTrue("Result iterator should be closed after exiting try-with-resources block", resultIterator.isClosed());
571d477
< 
573d478
< 
575c480,484
<             EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>             EntityEntry entry = entry().set("COL1", 2)
>                                        .set("COL2", false)
>                                        .set("COL3", 2D)
>                                        .set("COL4", 3L)
>                                        .set("COL5", "ADEUS")
577d485
< 
579,580c487,491
< 
<             entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
---
>             entry = entry().set("COL1", 3)
>                            .set("COL2", true)
>                            .set("COL3", 3D)
>                            .set("COL4", 4L)
>                            .set("COL5", "OLA")
582d492
< 
584d493
< 
586d494
< 
593d500
< 
595,596d501
< 
<         // 1st
599d503
< 
602d505
< 
605d507
< 
608d509
< 
611,613d511
< 
<         // 2nd
< 
616d513
< 
619d515
< 
622d517
< 
625d519
< 
633,634c527,531
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry().set("COL1", 2)
>                                    .set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
636d532
< 
638,639c534,538
< 
<         entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
---
>         entry = entry().set("COL1", 3)
>                        .set("COL2", true)
>                        .set("COL3", 3D)
>                        .set("COL4", 4L)
>                        .set("COL5", "OLA")
641d539
< 
643,644d540
< 
<         // autocommit set to true.
646,647d541
< 
< 
649,650d542
< 
<         // 1st
653d544
< 
656d546
< 
659d548
< 
662d550
< 
665,667d552
< 
<         // 2nd
< 
670d554
< 
673d556
< 
676d558
< 
679d560
< 
684,698d564
<     /**
<      * Tests that on a rollback situation, the prepared statement batches are cleared.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add batch to transaction and purposely fail to flush</li>
<      *     <li>Ensure the existence of the Exception and rollback transaction</li>
<      *     <li>Flush again successfully and ensure that the DB table doesn't have any rows</li>
<      * </ol>
<      *
<      * This is a regression test.
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      * @since 2.1.12
<      */
702d567
< 
707d571
< 
717d580
< 
719d581
< 
722d583
< 
725d585
< 
736,737d595
< 
<         // Ensure we had an exception and therefore we didn't insert anything on the DB and that we cleared the batches.
739d596
< 
744d600
< 
748,750d603
< 
<         // Previously, we rolled back the transaction; now we are trying the flush an empty transaction.
<         // Therefore, we shouldn't have any rows on the table.
762d614
< 
768d619
< 
770d620
< 
772d621
< 
782d630
< 
789d636
< 
792,793c639
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
796d641
< 
803d647
< 
810d653
< 
813,814c656
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
816d657
< 
837d677
< 
839d678
< 
847d685
< 
851,852c689
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
854d690
< 
873d708
< 
875d709
< 
881,882d714
< 
< 
887d718
< 
892d722
< 
897d726
< 
902d730
< 
907d734
< 
912d738
< 
917d742
< 
920d744
< 
923d746
< 
939d761
< 
941d762
< 
949d769
< 
955d774
< 
977d795
< 
979d796
< 
987d803
< 
991,992c807
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
994d808
< 
1012d825
< 
1014d826
< 
1022d833
< 
1026,1027c837
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1029d838
< 
1034d842
< 
1051d858
< 
1053d859
< 
1061d866
< 
1065,1066c870
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1068d871
< 
1075d877
< 
1086d887
< 
1093d893
< 
1096,1097c896
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1100d898
< 
1107d904
< 
1114d910
< 
1117,1118c913
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1121d915
< 
1128d921
< 
1135d927
< 
1138,1139c930
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1142d932
< 
1149d938
< 
1156d944
< 
1159,1160c947
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1163d949
< 
1170d955
< 
1177d961
< 
1180,1181c964
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1184d966
< 
1191d972
< 
1198d978
< 
1201,1202c981
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1205d983
< 
1212d989
< 
1219d995
< 
1222,1223c998
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1225d999
< 
1227,1228c1001
< 
<         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), DELTA);
---
>         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), 1e-7);
1234d1006
< 
1241d1012
< 
1244,1245c1015
<             engine.persist("TEST", entry
<                     .build());
---
>             engine.persist("TEST", entry.build());
1247d1016
< 
1249,1250c1018
< 
<         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), DELTA);
---
>         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), 1e-7);
1260d1027
< 
1262d1028
< 
1266,1269c1032
< 
<         engine.persist("TEST", ee
<                 .build());
< 
---
>         engine.persist("TEST", ee.build());
1271d1033
< 
1278d1039
< 
1289d1049
< 
1293c1053
<             assertEquals("exception ok?", "You have to define the entity name", de.getMessage());
---
>             assertEquals("You have to define the entity name", de.getMessage());
1305d1064
< 
1309c1068
<             assertEquals("exception ok?", "You have to define the entity name", de.getMessage());
---
>             assertEquals("You have to define the entity name", de.getMessage());
1321d1079
< 
1325c1083
<             assertEquals("exception ok?", "Entity name '0123456789012345678901234567891' exceeds the maximum number of characters (30)", de.getMessage());
---
>             assertEquals("Entity name '0123456789012345678901234567891' exceeds the maximum number of characters (30)", de.getMessage());
1337d1094
< 
1341c1098
<             assertEquals("exception ok?", "Column in entity 'entname' must have a name", de.getMessage());
---
>             assertEquals("Column in entity 'entname' must have a name", de.getMessage());
1353d1109
< 
1357c1113
<             assertEquals("exception ok?", "You can only define one auto incremented column", de.getMessage());
---
>             assertEquals("You can only define one auto incremented column", de.getMessage());
1369,1370d1124
< 
< 
1372d1125
< 
1376d1128
< 
1378d1129
< 
1389,1390d1139
< 
< 
1392d1140
< 
1396d1143
< 
1398d1144
< 
1400d1145
< 
1404d1148
< 
1406d1149
< 
1417,1418d1159
< 
< 
1420d1160
< 
1422d1161
< 
1427d1165
< 
1429d1166
< 
1431d1167
< 
1435d1170
< 
1437d1171
< 
1439d1172
< 
1448,1453d1180
<     /**
<      * Tests that when persisting an entity in table that does not contain any auto generated values, the
<      * {@link DatabaseEngine#persist(String, EntityEntry)} method returns {@code null}.
<      *
<      * @throws DatabaseEngineException If any error occurs.
<      */
1460d1186
<             // Set the two columns as fields of primary key, so they belong to the generated keys.
1463d1188
< 
1465d1189
< 
1470d1193
< 
1476,1479d1198
<     /**
<      * Tests that when trying to add {@link DbEntity} with multiple columns with auto incremented values, the
<      * {@link DatabaseEngine#addEntity(DbEntity)} method throws a {@link DatabaseEngineException}.
<      */
1487d1205
< 
1491d1208
< 
1501,1502d1217
< 
< 
1504d1218
< 
1511d1224
< 
1513d1225
< 
1516c1228
<             // ignore
---
>             // Ignore
1519d1230
< 
1521d1231
< 
1523d1232
< 
1535d1243
< 
1538d1245
< 
1540d1246
< 
1547d1252
< 
1553d1257
< 
1555d1258
< 
1562d1264
< 
1571d1272
< 
1578d1278
< 
1590d1289
< 
1597,1598c1296,1297
<                                                         .from(table("USER")).alias("b")
<                                                 , eq(column("a", "COL1"), column("b", "COL1"))
---
>                                 .from(table("USER")).alias("b"),
>                             eq(column("a", "COL1"), column("b", "COL1"))
1607d1305
< 
1614,1615c1312,1313
<                                                 table("USER").alias("a")
<                                                 , eq(column("a", "COL1"), column("b", "COL1"))
---
>                             table("USER").alias("a"),
>                             eq(column("a", "COL1"), column("b", "COL1"))
1624d1321
< 
1632,1633c1329,1330
<                                                         .from(table("USER")).alias("b")
<                                                 , eq(column("a", "COL1"), column("b", "COL1"))
---
>                                 .from(table("USER")).alias("b"),
>                             eq(column("a", "COL1"), column("b", "COL1"))
1642d1338
< 
1650,1651c1346,1347
<                                                         .from(table("USER")).alias("b")
<                                                 , eq(column("a", "COL1"), column("b", "COL1"))
---
>                                 .from(table("USER")).alias("b"),
>                             eq(column("a", "COL1"), column("b", "COL1"))
1655,1656c1351,1352
<                                                         .from(table("USER")).alias("c")
<                                                 , eq(column("a", "COL1"), column("c", "COL1"))
---
>                                 .from(table("USER")).alias("c"),
>                             eq(column("a", "COL1"), column("c", "COL1"))
1664,1665d1359
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1668d1361
< 
1672d1364
< 
1678,1679d1369
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1682d1371
< 
1686d1374
< 
1693d1380
< 
1703d1389
< 
1713d1398
< 
1721,1725d1405
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with a value filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1731,1735d1410
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with SELECT filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1744,1752d1418
<     /**
<      * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with values filters a row correctly,
<      * when many values are provided.
<      * <p>
<      * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
<      * 20000 values.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1758d1423
< 
1762,1767d1426
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) (Expression, Expression) negated IN} clause
<      * with a value filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1773,1777d1431
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with SELECT filters a row correctly.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1786,1794d1439
<     /**
<      * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with a value filters a row
<      * correctly, when many values are provided.
<      * <p>
<      * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
<      * 20000 values.
<      *
<      * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
<      */
1800d1444
< 
1804,1819d1447
<     /**
<      * Common code to run IN clause tests.
<      * <p>
<      * This creates 2 entries in the database:
<      * <table>
<      *     <tr><td>COL1</td><td>COL5</td></tr>
<      *     <tr><td>1</td><td>s1</td></tr>
<      *     <tr><td>2</td><td>s2</td></tr>
<      * </table>
<      * <p>
<      * The verifications expect the provided {@code whereInExpression} to filter the entries such that only the first
<      * one is returned.
<      *
<      * @param whereInExpression The {@link Expression} to use in the WHERE clause of the query.
<      * @throws DatabaseEngineException If a DB error occurs.
<      */
1822d1449
< 
1825d1451
< 
1831d1456
< 
1844d1468
< 
1853d1476
< 
1862d1484
< 
1866,1868c1488
<                         .where(
<                                 eq(column("COL2"), k(true))
<                         )
---
>                 .where(eq(column("COL2"), k(true)))
1870d1489
< 
1877d1495
< 
1886d1503
< 
1895d1511
< 
1899,1901c1515
<                         .where(
<                                 eq(column("COL2"), k(false))
<                         )
---
>                 .where(eq(column("COL2"), k(false)))
1903d1516
< 
1910d1522
< 
1914,1916c1526
<                         .where(
<                                 eq(coalesce(column("COL2"), k(false)), k(false))
<                         )
---
>                 .where(eq(coalesce(column("COL2"), k(false)), k(false)))
1923d1532
< 
1927,1929c1536
<                         .where(
<                                 eq(coalesce(column("COL2"), k(false), k(true)), k(false))
<                         )
---
>                 .where(eq(coalesce(column("COL2"), k(false), k(true)), k(false)))
1936d1542
< 
1940,1942c1546
<                         .where(
<                                 between(column("COL1"), k(1), k(2))
<                         )
---
>                 .where(between(column("COL1"), k(1), k(2)))
1946,1947d1549
< 
< 
1950d1551
< 
1958d1558
< 
1960d1559
< 
1970d1568
< 
1979d1576
< 
1981d1577
< 
1986d1581
< 
1988,1989d1582
< 
<         // test CAST when writing values
1994d1586
< 
1996,1997d1587
< 
<         // test CAST when reading values
2005d1594
< 
2007d1595
< 
2012,2019d1599
< 
<         /*
<          Until now the test only really checks if the CAST doesn't cause any errors because
<           - when writing values into the DB it automatically casts into the column data type
<           - when reading values from the DB, the test reads the results from the ResultColumn as the desired type
<          Even if we used a function, it is likely the DB would try to cast the parameters to the expected type.
<          To effectively test if CAST works, we need to check if DB sorting considers the column a string or a number.
<          */
2024d1603
< 
2026d1604
< 
2030d1607
< 
2038,2042d1614
<     /**
<      * Check if exception is thrown when trying to cast for an unsupported type.
<      *
<      * @throws DatabaseEngineException If something goes wrong executing the query.
<      */
2051d1622
< 
2053,2064c1624,1628
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui")
<                 .build());
< 
<         final With with = with("friends", select(all())
<                                                 .from(table("TEST")))
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui").build());
>         final With with = with("friends", select(all()).from(table("TEST")))
2068,2069c1632,1633
<                         .where(eq(column("COL1"), k(1))));
< 
---
>                 .where(eq(column("COL1"), k(1)))
>             );
2071d1634
< 
2078d1640
< 
2080,2089c1642,1645
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui").build());
2091,2093c1647
<                 with("friends",
<                         select(all())
<                         .from(table("TEST")))
---
>             with("friends", select(all()).from(table("TEST")))
2097,2098c1651,1652
<                         .orderby(column("COL5")));
< 
---
>                 .orderby(column("COL5"))
>             );
2100d1653
< 
2110d1662
< 
2112,2121c1664,1667
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "manuel").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "ana").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "rita").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "rui").build());
2127d1672
< 
2134,2135c1679,1680
<                               select(all()).from(table("friendsB"))));
< 
---
>                       select(all()).from(table("friendsB")))
>             );
2137d1681
< 
2142d1685
< 
2152,2161c1695,1698
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste").build());
2164,2165c1701,1702
<                         .from(table("TEST")));
< 
---
>             .from(table("TEST"))
>         );
2173,2181c1710,1713
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste").build());
2187d1718
< 
2197,2207c1728,1732
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre").build());
2214d1738
< 
2225d1748
< 
2236d1758
< 
2261d1782
< 
2269,2275d1789
<     /**
<      * Runs a concat query on the test dataset, given a delimiter.
<      *
<      * @param delimiter the delimiter used in concat.
<      * @return the result set.
<      * @throws DatabaseEngineException if an issue when querying arises.
<      */
2283d1796
< 
2285d1797
< 
2290,2301c1802,1804
<         engine.persist(
<                 "TEST",
<                 entry().set("COL1", 5).set("COL2", "pomme de terre").set("COL3", "pomme de terre").build()
<         );
<         engine.persist(
<                 "TEST",
<                 entry().set("COL1", 6).set("COL2", "lol").set("COL3", null).build()
<         );
< 
<         final Query query =
<                 select(
<                         concat(delimiter, column("COL2"), column("COL3")).alias("concat"))
---
>         engine.persist("TEST", entry().set("COL1", 5).set("COL2", "pomme de terre").set("COL3", "pomme de terre").build());
>         engine.persist("TEST", entry().set("COL1", 6).set("COL2", "lol").set("COL3", null).build());
>         final Query query = select(concat(delimiter, column("COL2"), column("COL3")).alias("concat"))
2303d1805
< 
2307,2322d1808
<     /**
<      * Reproduces an issue when using CASE ... WHEN expressions in SqlServer and MySql.
<      * <p>
<      * Since we don't have the type information for a column that is generated from the result of a WHEN expression,
<      * we need to rely on the user calling one of the ResultColumn.toXXX methods to understand what the user is
<      * expecting. In the case of ResultColumn.toBoolean(), we're first checking if the result is of boolean type,
<      * as happens normally when the driver knows that the column is of type boolean, but then we also try to parse the
<      * underlying database boolean representation. This is necessary because in WHEN expressions, the driver doesn't
<      * know the expected return type.
<      * <p>
<      * I also tried to fix this using {@code cast(1 as BIT)}, which seemed more appropriate because we would be hinting
<      * the driver about the type, but it's not possible to follow this approach in MySql because we cannot cast to
<      * tinyint(1), which is the native type for booleans in MySql.
<      *
<      * @throws DatabaseEngineException propagate
<      */
2328d1813
< 
2334,2337c1819,1820
<                         .alias("COL5_NOT_NULL"))
<                 .from(table("TEST"))
<                 .orderby(column("COL1").asc());
< 
---
>                 .alias("COL5_NOT_NULL")
>         ).from(table("TEST")).orderby(column("COL1").asc());
2339d1821
< 
2349,2359c1831,1835
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d").build());
2365,2367c1841,1842
<                         .where(eq(column("COL5"), k(literal))))
<                 .collect(Collectors.toList());
< 
---
>                     .where(eq(column("COL5"), k(literal)))
>             ).collect(Collectors.toList());
2370d1844
< 
2372d1845
< 
2377d1849
< 
2387,2397c1859,1863
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "a").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "b").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "c").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "d").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "d").build());
2403,2405c1869,1870
<                         .where(eq(column("COL1"), k(literal))))
<                 .collect(Collectors.toList());
< 
---
>                     .where(eq(column("COL1"), k(literal)))
>             ).collect(Collectors.toList());
2408d1872
< 
2410d1873
< 
2415d1877
< 
2431d1892
< 
2433d1893
< 
2438d1897
< 
2443d1901
< 
2448d1905
< 
2474d1930
< 
2476,2477c1932
<             values.row(k(ThreadLocalRandom.current().nextLong()),
<                     k(UUID.randomUUID().toString()));
---
>             values.row(k(ThreadLocalRandom.current().nextLong()), k(UUID.randomUUID().toString()));
2479,2480d1933
< 
<         // If it crashes, the test will fail.
2487d1939
< 
2491,2493c1943
<                         .where(
<                                 between(select(column("COL1")).from(table("TEST")).enclose(), k(1), k(2))
<                         )
---
>                 .where(between(select(column("COL1")).from(table("TEST")).enclose(), k(1), k(2)))
2500d1949
< 
2504,2506c1953
<                         .where(
<                                 between(column("COL1"), k(1), k(2)).enclose()
<                         )
---
>                 .where(between(column("COL1"), k(1), k(2)).enclose())
2513d1959
< 
2517,2519c1963
<                         .where(
<                                 notBetween(column("COL1"), k(1), k(2)).enclose()
<                         )
---
>                 .where(notBetween(column("COL1"), k(1), k(2)).enclose())
2533d1976
< 
2535d1977
< 
2543d1984
< 
2545d1985
< 
2547d1986
< 
2549d1987
< 
2559,2560c1997,1998
<                         column("sq_1", "three").alias("third"))
<                         .from(
---
>                 column("sq_1", "three").alias("third")
>             ).from(
2564c2002,2003
<                                         k(3.0).alias("three")).alias("sq_1")
---
>                     k(3.0).alias("three")
>                 ).alias("sq_1")
2567d2005
< 
2577,2580c2015
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2590,2593c2025
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2598c2030,2031
<                                 eq(column("COL5"), k("ola")))
---
>                     eq(column("COL5"), k("ola"))
>                 )
2605,2608c2038
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2613c2043,2044
<                                 eq(column("COL5"), k("ola")))
---
>                     eq(column("COL5"), k("ola"))
>                 )
2620,2623c2051
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2628c2056,2057
<                                 eq(column("COL5"), k("ola")))
---
>                     eq(column("COL5"), k("ola"))
>                 )
2641d2069
< 
2643,2659c2071,2077
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste")
<                                       .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre")
<                                       .build());
< 
<         engine.persist("TEST2", entry().set("COL1", 1).set("COL2", "update1")
<                                       .build());
<         engine.persist("TEST2", entry().set("COL1", 5).set("COL2", "update2")
<                                       .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "xpto").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "pomme de terre").build());
>         engine.persist("TEST2", entry().set("COL1", 1).set("COL2", "update1").build());
>         engine.persist("TEST2", entry().set("COL1", 5).set("COL2", "update2").build());
2665d2082
< 
2667,2672c2084
< 
<         // check to see if TEST has changed
<         final Query query = select(column("COL5"))
<                 .from(table("TEST"))
<                 .orderby(column("COL1"));
< 
---
>         final Query query = select(column("COL5")).from(table("TEST")).orderby(column("COL1"));
2674,2675d2085
< 
<         //check if only the 1st and the 5th were changed.
2686,2689c2096
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2698,2701c2105
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
2711,2716c2115,2116
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 6)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
>         engine.persist("TEST", entry().set("COL1", 6).build());
2720d2119
< 
2727,2732c2126
< 
<         EntityEntry ee = entry()
<                 .set("COL1", 1)
<                 .set("COL2", true)
<                 .build();
< 
---
>         EntityEntry ee = entry().set("COL1", 1).set("COL2", true).build();
2734d2127
< 
2740d2132
< 
2748,2753c2140
< 
<         EntityEntry ee = entry()
<                 .set("COL1", 1)
<                 .set("COL2", true)
<                 .build();
< 
---
>         EntityEntry ee = entry().set("COL1", 1).set("COL2", true).build();
2755d2141
< 
2759d2144
< 
2761d2145
< 
2768,2769c2152
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
2778d2160
< 
2780d2161
< 
2788d2168
< 
2800,2801c2180,2184
< 
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
---
>         EntityEntry entry = entry().set("COL1", 2)
>                                    .set("COL2", false)
>                                    .set("COL3", 2D)
>                                    .set("COL4", 3L)
>                                    .set("COL5", "ADEUS")
2804c2187,2191
<         entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS2")
---
>         entry = entry().set("COL1", 2)
>                        .set("COL2", false)
>                        .set("COL3", 2D)
>                        .set("COL4", 3L)
>                        .set("COL5", "ADEUS2")
2807d2193
< 
2809d2194
< 
2820d2204
< 
2822,2825c2206
< 
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", new BlobTest(1, "name"))
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", new BlobTest(1, "name")).build();
2827d2207
< 
2831d2210
< 
2833d2211
< 
2837d2214
< 
2839d2215
< 
2841d2216
< 
2843d2217
< 
2845d2218
< 
2853,2854c2226
<         DbEntity entity = dbEntity().name("TEST").addColumn("COL1", STRING).addColumn("COL2", BLOB)
<                 .build();
---
>         DbEntity entity = dbEntity().name("TEST").addColumn("COL1", STRING).addColumn("COL2", BLOB).build();
2856,2857c2228
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", new BlobTest(1, "name"))
<                 .build();
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", new BlobTest(1, "name")).build();
2862d2232
< 
2864d2233
< 
2868d2236
< 
2885d2252
< 
2887,2888d2253
< 
<         // 10 mb
2895,2898c2260
< 
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bb)
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bb).build();
2900d2261
< 
2904,2905d2264
< 
< 
2907d2265
< 
2909d2266
< 
2913d2269
< 
2915d2270
< 
2917d2271
< 
2921d2274
< 
2931d2283
< 
2933d2284
< 
2938d2288
< 
2940,2942c2290
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bigString)
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bigString).build();
2944d2291
< 
2957d2303
< 
2959d2304
< 
2961,2963c2306
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bigString)
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", bigString).build();
2965d2307
< 
2981,2982c2323
<         engine.addEntity(entity
<                 .build());
---
>         engine.addEntity(entity.build());
2989,2991c2330
< 
<         EntityEntry entry = entry().set("COL1", 1).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c")
<                 .build();
---
>         EntityEntry entry = entry().set("COL1", 1).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").build();
2993d2331
< 
2996,3001c2334,2335
<         engine.updateEntity(entity
<                 .build());
< 
<         // as the fields were removed the entity mapping ignores the fields.
<         entry = entry().set("COL1", 2).set("COL2", true).set("COL3", 2d).set("COL4", 1L).set("COL5", "c")
<                 .build();
---
>         engine.updateEntity(entity.build());
>         entry = entry().set("COL1", 2).set("COL2", true).set("COL3", 2d).set("COL4", 1L).set("COL5", "c").build();
3003,3004d2336
< 
< 
3009d2340
< 
3011,3015c2342,2343
<         engine.updateEntity(entity
<                 .build());
< 
<         entry = entry().set("COL1", 3).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").set("COL6", new BlobTest(1, "")).set("COL7", 2d)
<                 .build();
---
>         engine.updateEntity(entity.build());
>         entry = entry().set("COL1", 3).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").set("COL6", new BlobTest(1, "")).set("COL7", 2d).build();
3017d2344
< 
3024d2350
< 
3029d2354
<         // First drop-create
3045,3048c2370
< 
<         // Clone the connection with the create now.
<         final DatabaseEngine engine2 = this.engine.duplicate(new Properties() {
<             {
---
>         final DatabaseEngine engine2 = this.engine.duplicate(new Properties() {{
3050,3054c2372,2373
<             }
<         }, true);
< 
<         EntityEntry entry = entry().set("COL1", 1).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c")
<                 .build();
---
>         }}, true);
>         EntityEntry entry = entry().set("COL1", 1).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").build();
3056d2374
< 
3060,3061d2377
< 
<         // as the fields were removed the entity mapping ignores the fields.
3063,3064c2379
<         entry = entry().set("COL1", 2).set("COL2", true).set("COL3", 2d).set("COL4", 1L).set("COL5", "c")
<                 .build();
---
>         entry = entry().set("COL1", 2).set("COL2", true).set("COL3", 2d).set("COL4", 1L).set("COL5", "c").build();
3066,3067d2380
< 
< 
3072d2384
< 
3075,3077c2387
< 
<         entry = entry().set("COL1", 3).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").set("COL6", new BlobTest(1, "")).set("COL7", 2d)
<                 .build();
---
>         entry = entry().set("COL1", 3).set("COL2", true).set("USER", 2d).set("COL4", 1L).set("COL5", "c").set("COL6", new BlobTest(1, "")).set("COL7", 2d).build();
3079d2388
< 
3086c2395
< 
---
>         engine2.close();
3089,3092d2397
<     /**
<      * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a "none" schema policy
<      * still creates the in-memory {@link MappedEntity} with the prepared statements for the entities.
<      */
3097d2401
< 
3107d2410
< 
3109d2411
< 
3112d2413
< 
3120d2420
< 
3125,3126c2425
<             assertTrue("Should fail because the entity is still unknown to this DatabaseEngine instance",
<                 e.getMessage().contains("Unknown entity"));
---
>             assertTrue(e.getMessage().contains("Unknown entity"));
3128d2426
< 
3130,3133c2428
< 
<         assertTrue("DatabaseEngine should be aware of the entity even with a NONE schema policy.", schemaNoneEngine.containsEntity(entity.getName()));
< 
<         // Persist the entry and make sure it was successful
---
>         assertTrue(schemaNoneEngine.containsEntity(entity.getName()));
3136d2430
< 
3138d2431
< 
3140d2432
< 
3148,3151d2439
<     /**
<      * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a "none" schema policy
<      * doesn't execute DDL.
<      */
3155d2442
< 
3158d2444
< 
3168d2453
< 
3174c2459
<             // Should fail because because updateEntity with schema policy NONE doesn't execute DDL
---
>             // Expected exception
3182d2466
< 
3192d2475
< 
3199d2481
< 
3202d2483
< 
3205,3207c2486
<         engine.updateEntity(entity
<                 .build());
< 
---
>         engine.updateEntity(entity.build());
3212,3215d2490
< 
<         dropSilently("TEST");
<         engine.removeEntity("TEST");
< 
3217,3219c2492
<         engine.updateEntity(entity
<                 .build());
< 
---
>         engine.updateEntity(entity.build());
3232,3234c2505
< 
<         DatabaseEngine engine = this.engine.duplicate(new Properties() {
<             {
---
>         DatabaseEngine engine = this.engine.duplicate(new Properties() {{
3236,3238c2507
<             }
<         }, true);
< 
---
>         }}, true);
3248d2516
< 
3255d2522
< 
3258d2524
< 
3262d2527
< 
3267d2531
< 
3270d2533
< 
3273d2535
< 
3290,3294c2552
< 
< 
<         EntityEntry entry = entry().set("COL1", "CENINHAS")
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").build();
3296d2553
< 
3303d2559
< 
3311d2566
< 
3313d2567
< 
3322,3325c2576
< 
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", initialClob)
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", initialClob).build();
3327d2577
< 
3329,3330d2578
< 
< 
3333d2580
< 
3335d2581
< 
3337d2582
< 
3339d2583
< 
3341d2584
< 
3345d2587
< 
3355d2596
< 
3357d2597
< 
3360,3363c2600
< 
<         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", initialClob)
<                 .build();
< 
---
>         EntityEntry entry = entry().set("COL1", "CENINHAS").set("COL2", initialClob).build();
3365d2601
< 
3369d2604
< 
3371d2605
< 
3373d2606
< 
3375d2607
< 
3377d2608
< 
3381d2611
< 
3391,3392d2620
< 
< 
3394,3396c2622
< 
<         EntityEntry ent = entry().set("COL2", "CENAS1")
<                 .build();
---
>         EntityEntry ent = entry().set("COL2", "CENAS1").build();
3398,3399c2624
<         ent = entry().set("COL2", "CENAS2")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS2").build();
3401,3403c2626
< 
<         ent = entry().set("COL2", "CENAS3").set("COL1", 3)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS3").set("COL1", 3).build();
3405,3407c2628
< 
<         ent = entry().set("COL2", "CENAS5").set("COL1", 5)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS5").set("COL1", 5).build();
3409,3412c2630
< 
< 
<         ent = entry().set("COL2", "CENAS6")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS6").build();
3414,3416c2632
< 
<         ent = entry().set("COL2", "CENAS7")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS7").build();
3418d2633
< 
3439d2653
< 
3441,3443c2655
< 
<         EntityEntry ent = entry().set(APP_ID, 1).set(STM_ID, 1).set(STM_NAME, "NAME1")
<                 .build();
---
>         EntityEntry ent = entry().set(APP_ID, 1).set(STM_ID, 1).set(STM_NAME, "NAME1").build();
3445,3447c2657
< 
<         ent = entry().set(APP_ID, 2).set(STM_ID, 1).set(STM_NAME, "NAME1")
<                 .build();
---
>         ent = entry().set(APP_ID, 2).set(STM_ID, 1).set(STM_NAME, "NAME1").build();
3449,3451c2659
< 
<         ent = entry().set(APP_ID, 2).set(STM_ID, 2).set(STM_NAME, "NAME2")
<                 .build();
---
>         ent = entry().set(APP_ID, 2).set(STM_ID, 2).set(STM_NAME, "NAME2").build();
3453,3455c2661
< 
<         ent = entry().set(APP_ID, 1).set(STM_ID, 10).set(STM_NAME, "NAME10")
<                 .build();
---
>         ent = entry().set(APP_ID, 1).set(STM_ID, 10).set(STM_NAME, "NAME10").build();
3457,3459c2663
< 
<         ent = entry().set(APP_ID, 1).set(STM_ID, 2).set(STM_NAME, "NAME11")
<                 .build();
---
>         ent = entry().set(APP_ID, 1).set(STM_ID, 2).set(STM_NAME, "NAME11").build();
3461,3463c2665
< 
<         ent = entry().set(APP_ID, 2).set(STM_ID, 11).set(STM_NAME, "NAME11")
<                 .build();
---
>         ent = entry().set(APP_ID, 2).set(STM_ID, 11).set(STM_NAME, "NAME11").build();
3465d2666
< 
3471d2671
< 
3481,3482d2680
< 
< 
3484,3486c2682
< 
<         EntityEntry ent = entry().set("COL2", "CENAS1").set("COL1", 1)
<                 .build();
---
>         EntityEntry ent = entry().set("COL2", "CENAS1").set("COL1", 1).build();
3488,3490c2684
< 
<         ent = entry().set("COL2", "CENAS2")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS2").build();
3492,3495c2686
< 
< 
<         ent = entry().set("COL2", "CENAS5").set("COL1", 5)
<                 .build();
---
>         ent = entry().set("COL2", "CENAS5").set("COL1", 5).build();
3497,3499c2688
< 
<         ent = entry().set("COL2", "CENAS6")
<                 .build();
---
>         ent = entry().set("COL2", "CENAS6").build();
3501d2689
< 
3513,3516c2701
< 
<         engine.persist("TEST", entry().set("COL1", 5)
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).build());
3518d2702
< 
3520d2703
< 
3523d2705
< 
3530,3531d2711
< 
<         // Drop tables for sanity.
3533,3534d2712
< 
<         // Create the "old" table.
3540,3543c2718
<         engine.persist(oldName, entry().set("timestamp", 20)
<                 .build());
< 
<         // Rename it
---
>         engine.persist(oldName, entry().set("timestamp", 20).build());
3546,3547d2720
< 
<         // Check whether the schema matches
3551,3552d2723
< 
<         // Check the data
3555d2725
< 
3557d2726
< 
3561,3565d2729
<     /**
<      * Drops a list of tables silently (i.e. if it fails, it will just keep on).
<      *
<      * @param tables The tables that we want to drop.
<      */
3579,3587c2743,2746
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 5).set("COL5", "tesTte").build());
3594d2752
< 
3599,3600c2757
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
3609,3610c2766
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3615d2770
< 
3620,3621c2775
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
3630,3631c2784
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3634,3636c2787
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 2)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 2).build(), false);
3639d2789
< 
3643,3645c2793
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 4)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 4).build(), false);
3648,3650c2796
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3653,3655c2799
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 6)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 6).build(), false);
3658,3660c2802
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 7)
<                 .build(), false);
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).set("COL4", 7).build(), false);
3663,3665c2805
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
<                 .build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
3670,3674d2809
<     /**
<      * Creates a {@link DbEntity} with 5 columns to be used in the tests.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the entity.
<      */
3684d2818
< 
3688,3692d2821
<     /**
<      * Creates a {@link DbEntity} with 5 columns being the first the primary key to be used in the tests.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the entity.
<      */
3694c2823,2824
<         final DbEntity entity = dbEntity().name("TEST")
---
>         final DbEntity entity = dbEntity()
>             .name("TEST")
3702d2831
< 
3712d2840
< 
3714d2841
< 
3720d2846
< 
3722d2847
< 
3727,3737c2852,2853
<                 .addFk(dbFk()
<                                 .addColumn("COL1")
<                                 .referencedTable("USER")
<                                 .addReferencedColumn("COL1")
<                                 .build(),
<                         dbFk()
<                                 .addColumn("COL2")
<                                 .referencedTable("ROLE")
<                                 .addReferencedColumn("COL1")
<                                 .build()
<                 )
---
>             .addFk(dbFk().addColumn("COL1").referencedTable("USER").addReferencedColumn("COL1").build(),
>                    dbFk().addColumn("COL2").referencedTable("ROLE").addReferencedColumn("COL1").build())
3740d2855
< 
3747,3756c2862,2865
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
3758d2866
< 
3767,3776c2875,2878
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte").build());
3780,3791c2882,2883
<                         .where(
<                                 or(
<                                         eq(column("COL1"), k(1)),
<                                         eq(column("COL1"), k(4))
<                                 )
<                         )
<                         .andWhere(
<                                 or(
<                                         eq(column("COL5"), k("teste")),
<                                         eq(column("COL5"), k("TESTE"))
<                                 )
<                         )
---
>                 .where(or(eq(column("COL1"), k(1)), eq(column("COL1"), k(4))))
>                 .andWhere(or(eq(column("COL5"), k("teste")), eq(column("COL5"), k("TESTE"))))
3793d2884
< 
3802,3811c2893,2896
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte").build());
3815,3826c2900,2901
<                         .where(
<                                 or(
<                                         eq(column("COL1"), k(1)),
<                                         eq(column("COL1"), k(4))
<                                 )
<                         )
<                         .andWhere(
<                                 or(
<                                         eq(column("COL5"), k("teste")),
<                                         eq(column("COL5"), k("tesTte"))
<                                 )
<                         )
---
>                 .where(or(eq(column("COL1"), k(1)), eq(column("COL1"), k(4))))
>                 .andWhere(or(eq(column("COL5"), k("teste")), eq(column("COL5"), k("tesTte"))))
3828d2902
< 
3839,3848c2913,2916
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3855d2922
< 
3866,3875c2933,2936
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3882d2942
< 
3892,3894c2952
<         assumeTrue("This test is only valid for engines that support StringAggDistinct",
<                 this.engine.isStringAggDistinctCapable());
< 
---
>         assumeTrue("This test is only valid for engines that support StringAggDistinct", this.engine.isStringAggDistinctCapable());
3896,3905c2954,2957
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3912d2963
< 
3923,3932c2974,2977
< 
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE")
<                 .build());
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte")
<                 .build());
< 
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "TESTE").build());
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TeStE").build());
>         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "tesTte").build());
3939d2983
< 
3950,3951c2994
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
3967,3968c3010
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
3983,3984c3025
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
3992d3032
< 
3994,3997c3034
< 
<         engine.executeUpdate(new AlterColumn(table("TEST"), new DbColumn.Builder().name("COL1").type(DbColumnType.INT).addConstraint(DbColumnConstraint
<                 .NOT_NULL)
<                 .build()));
---
>         engine.executeUpdate(new AlterColumn(table("TEST"), new DbColumn.Builder().name("COL1").type(DbColumnType.INT).addConstraint(DbColumnConstraint.NOT_NULL).build()));
4003,4004c3040
<         DbEntity entity =
<                 dbEntity()
---
>         DbEntity entity = dbEntity()
4012d3047
< 
4014,4016c3049
< 
<         engine.executeUpdate(new AlterColumn(table("TEST"), dbColumn().name("COL1").type(DbColumnType.STRING)
<                 .build()));
---
>         engine.executeUpdate(new AlterColumn(table("TEST"), dbColumn().name("COL1").type(DbColumnType.STRING).build()));
4021,4022c3054
<         DbEntity.Builder entity =
<                 dbEntity()
---
>         DbEntity.Builder entity = dbEntity()
4029d3060
< 
4031d3061
< 
4034d3063
< 
4042,4043d3070
< 
< 
4049d3075
< 
4055d3080
< 
4058d3082
< 
4074,4075c3098
<         DbEntity.Builder entity =
<                 dbEntity()
---
>         DbEntity.Builder entity = dbEntity()
4082d3104
< 
4084d3105
< 
4087d3107
< 
4112,4113c3132
<         assertEquals("text is uppercase", "ola", engine.query(select(f("LOWER", column("COL5")).alias("RES")).from(table("TEST"))).get(0).get("RES")
<                 .toString());
---
>         assertEquals("text is uppercase", "ola", engine.query(select(f("LOWER", column("COL5")).alias("RES")).from(table("TEST"))).get(0).get("RES").toString());
4123,4127c3142
< 
<         EntityEntry entry = entry()
<                 .set(map)
<                 .build();
< 
---
>         EntityEntry entry = entry().set(map).build();
4131,4137d3145
<     /**
<      * Tests that creating a {@link DatabaseEngine} using try-with-resources will close the engine
<      * (and thus the underlying connection to the database) once the block is exited from.
<      *
<      * @throws Exception if something goes wrong while checking if the connection of the engine is closed.
<      * @since 2.1.12
<      */
4141d3148
< 
4147d3153
< 
4150d3155
< 
4156d3160
< 
4159d3162
< 
4162,4171d3164
<     /**
<      * Test that closing a database engine a 'create-drop' policy with multiple entities closes all insert statements
<      * associated with each entity, regardless of the schema policy used.
<      *
<      * Each entity is associated with 3 prepared statements. This test ensures that 3 PSs per entity are closed.
<      *
<      * @throws DatabaseEngineException  If something goes wrong while adding an entity to the engine.
<      * @throws DatabaseFactoryException If the database engine class specified in the properties does not exist.
<      * @since 2.1.13
<      */
4175,4176d3167
< 
<         // Force the schema policy to be 'create-drop'
4179d3169
< 
4182,4183d3171
< 
<         // Force invocation counting to start here
4185d3172
< 
4187d3173
< 
4191d3176
< 
4194,4199d3178
<     /**
<      * Assesses whether the current row count is incremented if the .next()/.nextResult()
<      * methods are called in the iterator.
<      *
<      * @throws DatabaseEngineException If a database access error happens.
<      */
4203,4204d3181
< 
<         // Create 4 entries
4208d3184
< 
4210d3185
< 
4212,4213d3186
< 
<         // If the .next() method is called once then the current row count should be updated to 1
4215d3187
< 
4217,4219d3188
< 
<         // If for the same iterator the .nextResult() method is called 3 additional
<         // times then the current row count should be updated to 4
4223d3191
< 
4227,4233d3194
<     /**
<      * Tests that a {@link com.feedzai.commons.sql.abstraction.dml.K constant expression} with an enum value behaves
<      * as if the enum is a string (obtained from {@link Enum#name()}, both when persisting an entry and when using
<      * the enum value for filtering in a WHERE clause.
<      *
<      * @throws DatabaseEngineException If something goes wrong creating the test entity or persisting entries.
<      */
4237,4238d3197
< 
<         // should fail here if enum is not supported, or it will just put garbage, which will be detected later
4240d3198
< 
4242d3199
< 
4248d3204
< 
4258,4327d3213
<     /**
<      * Tests that when inserting duplicated entries in a table the right exception is returned.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add duplicated entries in a transaction and fail to persist</li>
<      *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>
<      * </ol>
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      */
<     @Test
<     public void insertDuplicateDBError() throws Exception {
<         create5ColumnsEntityWithPrimaryKey();
< 
<         EntityEntry entry = entry().set("COL1", 2)
<                                    .set("COL2", false)
<                                    .set("COL3", 2D)
<                                    .set("COL4", 3L)
<                                    .set("COL5", "ADEUS")
<                                    .build();
< 
<         // Add the same entry twice (repeated value for COL1, id)
<         engine.persist("TEST", entry);
<         assertThatCode(() -> engine.persist("TEST", entry))
<                 .as("Is unique constraint violation exception")
<                 .isInstanceOf(DatabaseEngineUniqueConstraintViolationException.class)
<                 .as("Encapsulated exception is SQLException")
<                 .hasCauseInstanceOf(SQLException.class)
<                 .hasMessage("Something went wrong persisting the entity [unique_constraint_violation]");
<     }
< 
<     /**
<      * Tests that on a duplicated batch entry situation the right exception is returned.
<      *
<      * The steps performed on this test are:
<      * <ol>
<      *     <li>Add duplicated batch entries to transaction and fail to flush</li>
<      *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>
<      * </ol>
<      *
<      * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
<      */
<     @Test
<     public void batchInsertDuplicateDBError() throws DatabaseEngineException {
<         create5ColumnsEntityWithPrimaryKey();
< 
<         EntityEntry entry = entry().set("COL1", 2)
<                                    .set("COL2", false)
<                                    .set("COL3", 2D)
<                                    .set("COL4", 3L)
<                                    .set("COL5", "ADEUS")
<                                    .build();
< 
<         // Add the same entry twice (repeated value for COL1, id)
<         engine.addBatch("TEST", entry);
<         engine.addBatch("TEST", entry);
< 
<         // Flush the duplicated entries and check the exception
<         assertThatCode(() -> engine.flush())
<                 .as("Is unique constraint violation exception")
<                 .isInstanceOf(DatabaseEngineUniqueConstraintViolationException.class)
<                 .as("Encapsulated exception is SQLException")
<                 .hasCauseInstanceOf(SQLException.class)
<                 .hasMessage("Something went wrong while flushing [unique_constraint_violation]");
<     }
< 
<     /**
<      * An enum for tests.
<      */
4330d3215
< 
