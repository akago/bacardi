22d21
< import com.hazelcast.config.MaxSizeConfig;
27c26,29
< import com.hazelcast.core.Cluster;
---
> import com.hazelcast.cluster.Cluster;
> import com.hazelcast.cluster.Member;
> import com.hazelcast.config.EvictionConfig;
> import com.hazelcast.config.EvictionConfig.MaxSizePolicy;
30d31
< import com.hazelcast.core.Member;
288c289,291
<             dynamicConfig.setMaxSizeConfig(new MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE));
---
>             dynamicConfig.setEvictionConfig(new EvictionConfig()
>                     .setMaximumSizePolicy(MaxSizePolicy.USED_HEAP_SIZE)
>                     .setSize(hazelcastMaxCacheSizeInMegaBytes));
294d296
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
378d379
< 
548d548
<         // TODO: Update CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
566d565
<             // Try to determine what plugin loaded the offending class.
583c582
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now());
656c655
<         return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
---
>         return NodeID.getInstance(((String) member.getAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE)).getBytes(StandardCharsets.UTF_8));
684,685d682
<             // Add a listener at the ultimate end of the list of all listeners, to detect that left-cluster event handling
<             // has been invoked for all before proceeding.
701,703d697
< 
< 
< 
