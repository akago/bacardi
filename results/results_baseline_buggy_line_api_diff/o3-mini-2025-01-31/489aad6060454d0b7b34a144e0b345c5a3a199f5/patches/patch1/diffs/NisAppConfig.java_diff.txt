3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
106a109,125
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder)
>                                 .replace("${nem.network}", configuration.getNetworkName());
>                 final String username = prop.getProperty("jdbc.username");
>                 final String password = prop.getProperty("jdbc.password");
> 
>                 ClassicConfiguration config = new ClassicConfiguration();
>                 String[] locationStrings = prop.getProperty("flyway.locations").split(",");
>                 Location[] locations = new Location[locationStrings.length];
>                 for (int i = 0; i < locationStrings.length; i++) {
>                         locations[i] = new Location(locationStrings[i].trim());
>                 }
>                 config.setLocations(locations);
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
>                 config.setDataSource(jdbcUrl, username, password);
108,113c127
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 return new Flyway(config);
