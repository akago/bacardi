18,19c18,19
<  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
<  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
---
>  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
>  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
48c48,51
< import org.hamcrest.Matchers;
---
> import org.hamcrest.CoreMatchers;
> import org.hamcrest.collection.IsIterableContainingInAnyOrder;
> import org.hamcrest.TypeSafeMatcher;
> import org.hamcrest.Description;
50,71d52
< /**
<  * REST response.
<  *
<  * <p>This response decorator is able to make basic assertions on
<  * HTTP response and manipulate with it afterwords, for example:
<  *
<  * <pre> String name = new JdkRequest("http://my.example.com")
<  *   .fetch()
<  *   .as(RestResponse.class)
<  *   .assertStatus(200)
<  *   .assertBody(Matchers.containsString("hello, world!"))
<  *   .assertHeader("Content-Type", Matchers.hasItem("text/plain"))
<  *   .jump(URI.create("/users"))
<  *   .fetch();</pre>
<  *
<  * <p>Method {@link #jump(URI)} creates a new instance of class
<  * {@link Request} with all cookies transferred from the current one.
<  *
<  * <p>The class is immutable and thread-safe.
<  *
<  * @since 0.8
<  */
332a314,347
>     /**
>      * Replacement for the removed org.hamcrest.Matchers.
>      */
>     public static final class Matchers {
>         
>         private Matchers() {
>             // prevent instantiation
>         }
>         
>         public static <T> Matcher<Iterable<? extends T>> hasItems(final T... items) {
>             return IsIterableContainingInAnyOrder.hasItems(items);
>         }
>         
>         public static <T> Matcher<T> not(final Matcher<T> matcher) {
>             return CoreMatchers.not(matcher);
>         }
>         
>         public static <T> Matcher<Iterable<T>> emptyIterableOf(final Class<T> clazz) {
>             return new TypeSafeMatcher<Iterable<T>>() {
>                 @Override
>                 public void describeTo(final Description description) {
>                     description.appendText("an empty iterable");
>                 }
>                 @Override
>                 protected boolean matchesSafely(final Iterable<T> iterable) {
>                     return !iterable.iterator().hasNext();
>                 }
>             };
>         }
>         
>         public static <T> Matcher<T> notNullValue() {
>             return CoreMatchers.notNullValue();
>         }
>     }
