3a4,5
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
> import org.flywaydb.core.api.Location;
108,113c110,128
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder)
>                                 .replace("${nem.network}", configuration.getNetworkName());
> 
>                 ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 flywayConfig.setDataSource(jdbcUrl, prop.getProperty("jdbc.username"), prop.getProperty("jdbc.password"));
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 String locationsStr = prop.getProperty("flyway.locations");
>                 String[] locationArray = locationsStr.split(",");
>                 List<Location> locations = new ArrayList<>();
>                 for (String loc : locationArray) {
>                         locations.add(new Location(loc.trim()));
>                 }
>                 flywayConfig.setLocations(locations.toArray(new Location[0]));
> 
>                 return new Flyway(flywayConfig);
