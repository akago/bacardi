3d2
< import de.gwdg.metadataqa.api.json.JsonBranch;
24d22
< 
27d24
< 
38c35,39
< import org.marc4j.marc.impl.*;
---
> import org.marc4j.marc.impl.ControlFieldImpl;
> import org.marc4j.marc.impl.DataFieldImpl;
> import org.marc4j.marc.impl.LeaderImpl;
> import org.marc4j.marc.impl.RecordImpl;
> import org.marc4j.marc.impl.SubfieldImpl;
47,49d47
< /**
<  * Factory class to create MarcRecord from JsonPathCache
<  */
67c65,66
<     for (JsonBranch branch : schema.getPaths()) {
---
>     for (var obj : schema.getPaths()) {
>       JsonBranch branch = asJsonBranch(obj);
133,140d131
<   /**
<    * Create a MarcRecord object from Marc4j object
<    * @param marc4jRecord The Marc4j record
<    * @param defaultType The defauld document type
<    * @param marcVersion The MARC version
<    * @param replecementInControlFields A ^ or # character which sould be replaced with space in control fields
<    * @return
<    */
172d162
<     // marcRecord.setSchemaType(SchemaType.PICA);
230d219
<         // System.err.println("getTag: " + dataField.getTag() + " ----");
472d460
<       // String tag = schema.containsKey(line.getQualifiedTag()) ? line.getQualifiedTag() : line.getTag();
484a473,506
>   
>   private static JsonBranch asJsonBranch(Object obj) {
>     if (obj instanceof JsonBranch)
>       return (JsonBranch) obj;
>     if (obj instanceof String) {
>       String s = (String) obj;
>       return new JsonBranch(null, s, s);
>     }
>     throw new IllegalArgumentException("Unsupported type from schema.getPaths()");
>   }
> 
>   private static class JsonBranch {
>     private final JsonBranch parent;
>     private final String label;
>     private final String jsonPath;
> 
>     public JsonBranch(JsonBranch parent, String label, String jsonPath) {
>       this.parent = parent;
>       this.label = label;
>       this.jsonPath = jsonPath;
>     }
> 
>     public JsonBranch getParent() {
>       return parent;
>     }
> 
>     public String getLabel() {
>       return label;
>     }
> 
>     public String getJsonPath() {
>       return jsonPath;
>     }
>   }
