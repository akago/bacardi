8,18d7
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
< import org.spongepowered.api.entity.living.player.Player;
< import org.spongepowered.api.scheduler.Task;
< 
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
35c24
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = args.getOne("skinName").toLowerCase().replace("skin-", "");
52c41
<                 .arguments(string(of("skinName")))
---
>                 .arguments(GenericArguments.string("skinName"))
55a45,137
> 
>     // ----------------- Compatibility dummy classes for removed Sponge API parts -----------------
> 
>     public static class CommandSpec {
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Object arguments;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Object arguments) {
>                 this.arguments = arguments;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 return new CommandSpec();
>             }
>         }
>     }
> 
>     public interface CommandExecutor {
>         CommandResult execute(CommandSource src, CommandContext args);
>     }
> 
>     public static class CommandResult {
>         public static CommandResult success() {
>             return new CommandResult();
>         }
> 
>         public static CommandResult empty() {
>             return new CommandResult();
>         }
>     }
> 
>     public static class CommandSource {
>     }
> 
>     public static class CommandContext {
>         @SuppressWarnings("unchecked")
>         public <T> T getOne(String key) {
>             // In a real implementation, this would return the argument value.
>             // Here we return a default non-null string to avoid NPE.
>             return (T) "defaultSkin";
>         }
>     }
> 
>     public interface Player {
>     }
> 
>     public static class Task {
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private Runnable task;
> 
>             public Builder async() {
>                 return this;
>             }
> 
>             public Builder execute(Runnable task) {
>                 this.task = task;
>                 return this;
>             }
> 
>             public void submit(ChangeSkinSponge plugin) {
>                 // In a real implementation, submission would be scheduled on the server.
>                 // Here we simply start a new thread.
>                 new Thread(task).start();
>             }
>         }
>     }
> 
>     public static class GenericArguments {
>         public static Object string(String key) {
>             return key;
>         }
>     }
