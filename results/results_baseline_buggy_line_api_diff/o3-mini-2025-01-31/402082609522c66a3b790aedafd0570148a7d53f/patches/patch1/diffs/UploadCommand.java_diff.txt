9d8
< 
11,16c10,12
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import net.kyori.adventure.text.Component;
> import static net.kyori.adventure.text.Component.text;
> import static com.github.games647.changeskin.sponge.command.UploadCommand.CommandElements.string;
19,21d14
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
48d40
< 
56c48
<                 .arguments(string(of("url")))
---
>                 .arguments(string(text("url")))
59a52,128
>     
>     // Minimal compatibility stubs for removed API classes
> 
>     public static class CommandSpec {
>         private final CommandExecutor executor;
>         private final CommandElement argument;
>         private final String permission;
>         
>         private CommandSpec(CommandExecutor executor, CommandElement argument, String permission) {
>             this.executor = executor;
>             this.argument = argument;
>             this.permission = permission;
>         }
>         
>         public static Builder builder() {
>             return new Builder();
>         }
>         
>         public static class Builder {
>             private CommandExecutor executor;
>             private CommandElement argument;
>             private String permission;
>             
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
>             
>             public Builder arguments(CommandElement argument) {
>                 this.argument = argument;
>                 return this;
>             }
>             
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
>             
>             public CommandSpec build() {
>                 return new CommandSpec(executor, argument, permission);
>             }
>         }
>     }
>     
>     public static interface CommandExecutor {
>         CommandResult execute(CommandSource src, CommandContext args);
>     }
>     
>     public static class CommandResult {
>         public static CommandResult success() {
>             return new CommandResult();
>         }
>     }
>     
>     public static interface CommandSource {
>         // Add methods if needed
>     }
>     
>     public static class CommandContext {
>         public <T> java.util.Optional<T> getOne(String key) {
>             return java.util.Optional.empty();
>         }
>     }
>     
>     public static class CommandElements {
>         public static CommandElement string(Component name) {
>             return new CommandElement(name);
>         }
>     }
>     
>     public static class CommandElement {
>         private final Component name;
>         
>         public CommandElement(Component name) {
>             this.name = name;
>         }
>     }
