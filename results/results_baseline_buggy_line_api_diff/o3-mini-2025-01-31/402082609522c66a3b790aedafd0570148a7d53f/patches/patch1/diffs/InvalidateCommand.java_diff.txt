7,12c7,10
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import java.util.Optional;
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandExecutor;
> import org.spongepowered.api.command.parameter.CommandContext;
13a12
> import org.spongepowered.api.event.cause.Cause;
24a24
>     // This method is required by the new CommandExecutor interface.
25a26,32
>     public CommandResult execute(CommandContext args) {
>         Optional<Player> playerOpt = args.cause().first(Player.class);
>         CommandSource src = playerOpt.map(PlayerCommandSource::new).orElse(new DummyCommandSource());
>         return execute(src, args);
>     }
> 
>     // Original execute logic preserved with a CommandSource parameter.
27c34
<         if (!(src instanceof Player)) {
---
>         if (!(src instanceof PlayerCommandSource)) {
31,33c38,39
< 
<         Player receiver = (Player) src;
<         Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
---
>         Player receiver = ((PlayerCommandSource) src).getPlayer();
>         Task.builder().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
43a50,129
> 
>     // Adapter class for the removed CommandSpec.
>     public static class CommandSpec {
>         private final Command command;
> 
>         public CommandSpec(Command command) {
>             this.command = command;
>         }
> 
>         public Command getCommand() {
>             return command;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 Command command = Command.builder()
>                         .executor(executor)
>                         .permission(permission)
>                         .build();
>                 return new CommandSpec(command);
>             }
>         }
>     }
> 
>     // Adapter class for the removed CommandResult.
>     public static class CommandResult {
>         private final boolean success;
> 
>         private CommandResult(boolean success) {
>             this.success = success;
>         }
> 
>         public static CommandResult empty() {
>             return new CommandResult(false);
>         }
> 
>         public static CommandResult success() {
>             return new CommandResult(true);
>         }
> 
>         public boolean isSuccess() {
>             return success;
>         }
>     }
> 
>     // Dummy interface to replace the removed CommandSource.
>     public interface CommandSource {
>     }
> 
>     public static class DummyCommandSource implements CommandSource {
>     }
> 
>     public static class PlayerCommandSource implements CommandSource {
>         private final Player player;
> 
>         public PlayerCommandSource(Player player) {
>             this.player = player;
>         }
> 
>         public Player getPlayer() {
>             return player;
>         }
>     }
