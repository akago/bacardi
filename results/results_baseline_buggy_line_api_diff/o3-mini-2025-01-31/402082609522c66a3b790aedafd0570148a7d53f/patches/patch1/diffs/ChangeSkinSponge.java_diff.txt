16d15
< 
19d17
< 
21,24d18
< import org.spongepowered.api.Platform.Type;
< import org.spongepowered.api.Sponge;
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
27,34c21,23
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.plugin.Plugin;
< import org.spongepowered.api.text.serializer.TextSerializers;
< 
---
> import org.spongepowered.api.event.lifecycle.ConstructPluginEvent;
> import org.spongepowered.api.event.lifecycle.RegisterCommandEvent;
> import org.spongepowered.api.event.lifecycle.StoppingEngineEvent;
37c26,27
< import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;
---
> import com.github.games647.changeskin.sponge.PomData;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
40,42c30
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
<         url = PomData.URL, description = PomData.DESCRIPTION)
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<ChangeSkinSponge.CommandSource> {
53d40
<     //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
62,63c49
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
<         //load config and database
---
>     public void onPreInit(ConstructPluginEvent event) {
73,96c59,60
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
<             return;
< 
<         CommandManager cmdManager = Sponge.getCommandManager();
< 
<         //command and event register
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
< 
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
< 
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
<         String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
<         String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>     public void onInit(RegisterCommandEvent event) {
>         // Registration code removed due to changes in the dependency API
100c64
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StoppingEngineEvent event) {
114d77
<         //disallow - not whitelisted or blacklisted
145c108
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             receiver.sendMessage(LegacyComponentSerializer.legacyAmpersand().deserialize(message));
147a111,115
> 
>     public static interface CommandSource {
>         boolean hasPermission(String permission);
>         void sendMessage(net.kyori.adventure.text.Component message);
>     }
