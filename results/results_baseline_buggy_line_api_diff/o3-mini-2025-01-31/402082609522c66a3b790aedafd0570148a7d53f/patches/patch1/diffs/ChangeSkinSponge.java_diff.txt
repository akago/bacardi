16d15
< 
19d17
< 
21d18
< import org.spongepowered.api.Platform.Type;
23,25c20
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.config.ConfigDir;
---
> import org.spongepowered.api.command.CommandCause;
27,33c22,29
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.plugin.Plugin;
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.event.lifecycle.ConstructPluginEvent;
> import org.spongepowered.api.event.lifecycle.RegisterChannelEvent;
> import org.spongepowered.api.event.lifecycle.RegisterCommandEvent;
> import org.spongepowered.api.event.lifecycle.StopGameEvent;
> import org.spongepowered.api.registry.ResourceKey;
> import org.spongepowered.plugin.Plugin;
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.identity.Identity;
40,42c36,37
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
<         url = PomData.URL, description = PomData.DESCRIPTION)
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION, url = PomData.URL, description = PomData.DESCRIPTION)
> public class ChangeSkinSponge implements PlatformPlugin<CommandCause> {
53d47
<     //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
55c49
<     ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
---
>     ChangeSkinSponge(Logger logger, @org.spongepowered.api.config.ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
62,63c56
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
<         //load config and database
---
>     public void onPreInit(ConstructPluginEvent event) {
73,74c66,67
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
---
>     public void onInit(RegisterCommandEvent event) {
>         if (!initialized) {
75a69,76
>         }
>         // Obtain the plugin container from the Sponge plugin manager.
>         Object pluginContainer = Sponge.game().pluginManager().plugin(ARTIFACT_ID).get();
>         event.register(pluginContainer, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>         event.register(pluginContainer, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>         event.register(pluginContainer, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>         event.register(pluginContainer, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>         event.register(pluginContainer, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
77,87c78,79
<         CommandManager cmdManager = Sponge.getCommandManager();
< 
<         //command and event register
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
< 
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
---
>         Sponge.game().eventManager().registerListeners(pluginContainer, injector.getInstance(LoginListener.class));
>     }
89,90c81,83
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
---
>     @Listener
>     public void onRegisterChannels(RegisterChannelEvent event) {
>         Object pluginContainer = Sponge.game().pluginManager().plugin(ARTIFACT_ID).get();
93,96c86,87
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         event.register(ResourceKey.resolve(updateChannelName), UpdateSkinListener.class);
>         event.register(ResourceKey.resolve(permissionChannelName), CheckPermissionListener.class);
100c91
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StopGameEvent event) {
108,109c99
<     @Override
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
---
>     public boolean hasSkinPermission(CommandCause invoker, UUID uuid, boolean sendMessage) {
113,114d102
< 
<         //disallow - not whitelisted or blacklisted
118d105
< 
126d112
<     @Override
131d116
<     @Override
136d120
<     @Override
141,142c125
<     @Override
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(CommandCause receiver, String key) {
145c128
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             receiver.sendMessage(Identity.nil(), Component.text(message));
