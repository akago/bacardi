25,31c25,31
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Binding;
> import com.google.api.services.cloudresourcemanager.v3.model.Operation;
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
> import com.google.api.services.cloudresourcemanager.v3.model.Project;
> import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;
69,95d68
< /**
<  * Utility to create a local Resource Manager mock for testing.
<  *
<  * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an
<  * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some
<  * divergences in behavior. The following is a non-exhaustive list of some of those behavioral
<  * differences:
<  *
<  * <ul>
<  *   <li>This mock assumes you have adequate permissions for any action. Related to this,
<  *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in
<  *       the request.
<  *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon
<  *       project creation. The actual service will not have an empty list of bindings and may also
<  *       set your version to 1.
<  *   <li>There is no input validation for the policy provided when replacing a policy or calling
<  *       testIamPermissions.
<  *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to
<  *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link
<  *       #changeLifecycleState}. Similarly, a project is never completely removed without an
<  *       explicit call to the utility method {@link #removeProject}.
<  *   <li>The messages in the error responses given by this mock do not necessarily match the
<  *       messages given by the actual service.
<  * </ul>
<  *
<  * @deprecated v3 GAPIC client of ResourceManager is now available
<  */
285c258,262
<                     jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
---
>                     jsonFactory.toString(
>                         new Operation()
>                             .setDone(true)
>                             .setName("operations/" + project.getProjectId())
>                             .set("response", project)));
449,450c426,427
<       project.setLifecycleState("ACTIVE");
<       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
---
>       project.set("lifecycleState", "ACTIVE");
>       project.set("projectNumber", Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
483c460
<     if (!project.getLifecycleState().equals("ACTIVE")) {
---
>     if (!"ACTIVE".equals(project.get("lifecycleState"))) {
487c464
<       project.setLifecycleState("DELETE_REQUESTED");
---
>       project.set("lifecycleState", "DELETE_REQUESTED");
618c595
<           project.setLifecycleState(fullProject.getLifecycleState());
---
>           project.set("lifecycleState", fullProject.get("lifecycleState"));
630c607
<           project.setProjectNumber(fullProject.getProjectNumber());
---
>           project.set("projectNumber", fullProject.get("projectNumber"));
642c619
<     } else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
---
>     } else if (!"ACTIVE".equals(originalProject.get("lifecycleState"))) {
651c628
<     project.setLifecycleState(originalProject.getLifecycleState());
---
>     project.set("lifecycleState", originalProject.get("lifecycleState"));
653,654c630
<     project.setProjectNumber(originalProject.getProjectNumber());
<     // replace cannot fail because both this method and removeProject are synchronized
---
>     project.set("projectNumber", originalProject.get("projectNumber"));
670c646
<     } else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
---
>     } else if (!"DELETE_REQUESTED".equals(project.get("lifecycleState"))) {
677c653
<       project.setLifecycleState("ACTIVE");
---
>       project.set("lifecycleState", "ACTIVE");
787c763
<       project.setLifecycleState(lifecycleState);
---
>       project.set("lifecycleState", lifecycleState);
802,803d777
<     // Because this method is synchronized, any code that relies on non-atomic read/write operations
<     // should not fail if that code is also synchronized.
