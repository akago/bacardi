37,48c37
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
< 
< import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
---
> 
113,210d101
<         @Override
<         protected void onInitialize() {
<                 super.onInitialize();
< 
<                 Class<?> modelClass = getModel().getObject().getClass();
< 
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
<                 Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();
<                 BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
<                 for(String property : properties){
<                         PropertyDescriptor descriptor;
<                         try {
<                                 descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
<                         } catch (Exception e) {
<                                 throw new RuntimeException("error getting property "+property, e);
<                         }
< 
<                         boolean required = false;
< 
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
<                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
<                                 for(ConstraintDescriptor<?> constraint : constraintsSet){
<                                         if(constraint.getAnnotation() instanceof NotNull ||
<                                            constraint.getAnnotation() instanceof NotEmpty ||
<                                            constraint.getAnnotation() instanceof NotBlank)
<                                                 required = true;
<                                 }
<                         }
< 
<                         objectProperties.add(new ObjectProperties(descriptor, required));
<                 }
<                 
<                 RepeatingView view = new RepeatingView("controlGroup");
<                 for(ObjectProperties objectProperty : objectProperties){
<                         try {
<                                 AbstractControlGroup<?> controlGroup;
<                                 if(!controlGroupProviders.containsKey(objectProperty.type)) {
<                                         Constructor<?> constructor;
<                                         Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
<                                         if(typesControlGroup==null){
<                                                 if(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;
<                                                 else typesControlGroup = ObjectChoiceControlGroup.class;
<                                         }
< 
<                                         constructor = typesControlGroup.getConstructor(String.class, IModel.class);
< 
<                                         controlGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));
<                                         controlGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
<                                         controlGroup.setEnabled(objectProperty.enabled);
< 
< 
<                                         if(typesControlGroup==ObjectChoiceControlGroup.class){
<                                                 IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
<                                                 if(renderer==null){
<                                                         renderer = new IObjectRenderer<Object>() {
<                                                                 private static final long serialVersionUID = -6171655578529011405L;
< 
<                                                                 public String render(Object object) {
<                                                                         return object.toString();
<                                                                 }
<                                                         };
<                                                 }
<                                                 ((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
<                                         } else if(typesControlGroup==CollectionControlGroup.class){
<                                                 ((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
<                                         }
< 
<                                 } else {
<                                         controlGroup = controlGroupProviders
<                                                         .get(objectProperty.type)
<                                                         .createControlGroup(view.newChildId()
<                                                                         , new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
<                                                                         , objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
<                                 }
<                                 view.add(controlGroup);
< 
<                                 fieldComponents.put(objectProperty.name, controlGroup);
<                         } catch (SecurityException e) {
<                                 throw new RuntimeException(e);
<                         } catch (NoSuchMethodException e) {
<                                 throw new RuntimeException(e);
<                         } catch (IllegalArgumentException e) {
<                                 throw new RuntimeException(e);
<                         } catch (InstantiationException e) {
<                                 throw new RuntimeException(e);
<                         } catch (IllegalAccessException e) {
<                                 throw new RuntimeException(e);
<                         } catch (InvocationTargetException e) {
<                                 throw new RuntimeException(e);
<                         }
<                 }
< 
<                 add(view);
<         }
< 
<         @SuppressWarnings("unchecked")
224,226c115,116
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
---
>         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>                 return typesControlGroups;
228c118,121
<                 return null;
---
> 
>         @SuppressWarnings("rawtypes")
>         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
>                 return this.controlGroupProviders;
245,253d137
< 
<         @SuppressWarnings("rawtypes")
<         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
<                 return typesControlGroups;
<         }
<         
<         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
<                 return this.controlGroupProviders;
<         }
