1,16d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
47,51d30
< /**
<  *  LoggingAuditEventSender implementations that dequeue LoggingAuditEvent and send it to Kafka.
<  *
<  *  Each instance of this class should be executed in its own thread.
<  */
60,87c39,43
<   /**
<    *  When sender send audit events to Kafka,  it chooses a random partition and if it fails, it
<    *  will choose another GOOD partition, this retry will happen at most numOfPartitionsToTrySending
<    *  times before dropping the event. Note that, this is different from the retry handled by
<    *  kafka client
<    *  library when sending an event to a certain partition.
<    */
<   private static final int NUM_OF_PARTITIONS_TO_TRY_SENDING = 3;
< 
<   /**
<    *  maximum time to wait when sender tries to dequeue events before returning null.
<    */
<   private static final int DEQUEUE_WAIT_IN_SECONDS = 30;
< 
< 
<   /**
<    *   when gracefully shutting down the Sender, the calling thread sleeps for some time and let
<    *   the sender to send out audit events left in the queue if there are any.
<    *   stopGracePeriodInSeconds is the maximum time reserved and
<    *   stopGracePeriodInSeconds / THREAD_SLEEP_IN_SECONDS is the total rounds the calling thread
<    *   will sleep.
<    */
<   private static final int THREAD_SLEEP_IN_SECONDS = 10;
< 
<   /**
<    *  when gracefully shutting down the Sender, this field specifies maximum time for main thread
<    *  to wait, in order to let the sender send out audit events left in the queue if there are any.
<    */
---
>   private String topic;
>   private LinkedBlockingDeque<LoggingAuditEvent> queue;
>   private LoggingAuditStage stage;
>   private String host;
>   private String name;
89,115d44
< 
< 
<   /**
<    * Logging audit stage, can be THRIFTLOGGER, SINGER, MERCED and so on
<    */
<   private final LoggingAuditStage stage;
< 
<   /**
<    * host name
<    */
<   private final String host;
< 
<   /**
<    *  LinkedBlockingDequeue to store the LoggingAuditEvents.  The max capacity is specified when
<    *  creating this deque in the LoggingAuditClient.java
<    *
<    *  The AuditEventKafkaSender dequeue from the beginning of the deque, if does not send out event
<    *  successfully, it will enqueue this event to the beginning of the queue.  Note that, if enqueue
<    *  the failed event at the end of the queue, this event could be processed with quite some delay
<    *  and this is not the behavior we want.  That's we use LinkedBlockingDequeue,
<    *  not ArrayBlockingQueue.
<    */
<   private final LinkedBlockingDeque<LoggingAuditEvent> queue;
< 
<   /**
<    * KafkaProducer instance to send audit events
<    */
117,120d45
< 
<   /**
<    * Serialize key and value to byte[]
<    */
122,125d46
< 
<   /**
<    *  flag to control the start and stop of the executing thread.
<    */
127,145d47
< 
<   /**
<    *  topic to store the audit events
<    */
<   private String topic;
< 
<   /**
<    *  name of this sender instance
<    */
<   private String name;
< 
<   /**
<    *  executing thread
<    */
<   private Thread thread;
< 
<   /**
<    *  List of PartitionInfo
<    */
147,150d48
< 
<   /**
<    *  last time when partition list was refreshed. we want to refresh partition list every 5 mins.
<    */
152,156d49
< 
<   /**
<    *  If sending out to one partition fails, this partition is added to set;
<    *  If sending out to one partition succeeds, this partition is removed if it was added before.
<    */
158,165d50
< 
<   /**
<    * For each event (identified by LoggingAuditHeaders, key of the map), track the number of tries
<    * for sending to Kafka. Each try will choose a different and partition that is not in the
<    * badPartitions.  When event is send out successfully or dropped, the corresponding entry in
<    * this map is removed.
<    */
< 
167,173d51
< 
<   /**
<    *  currentPartitionId specifies the partition of audit_event topic used to receive audit events.
<    *  The currentPartitionId will be reset in resetCurrentPartitionIdIfNeeded() method. This reduces
<    *  the number of TCP connections from audit client to the Kafka Cluster hosting the audit_event
<    *  topic.
<    */
188d65
< 
198d74
<     // refresh every 30 seconds
205,206c81
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
---
>         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
209,211c84,85
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
<                 "host=" + host, "stage=" + stage.toString());
---
>         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
>             "host=" + host, "stage=" + stage.toString(), "topic=" + topic);
232,233c106
<           OpenTsdbMetricConverter.incr(
<               LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
---
>           OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
240,242c113
<       LOG.warn("After {} trials, set current partition to {}",
<           MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
< 
---
>       LOG.warn("After {} trials, set current partition to {}", MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
246,252d116
<   /**
<    *  Sender dequeues LoggingAuditEvents and sends them to Kafka cluster. If send to one partition
<    *  fails, it will choose another partition. For each event, it will try at most
<    *  NUM_OF_PARTITIONS_TO_TRY_SENDING times (3 times) before dropping this event. Metrics are
<    *  used to track the queue size and usuage, number of events sent out to Kafka successfully, and
<    *  the number of events dropped.
<    */
275,276c139
<             OpenTsdbMetricConverter
<                 .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_SERIALIZATION_EXCEPTION, 1,
---
>             OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_SERIALIZATION_EXCEPTION, 1,
290c153
<         LOG.warn("Exit the while loop and finish the thread execution due to exception: ", e);
---
>         LOG.warn("Exit the while loop and finish the thread execution due to exception: {}", e.getMessage());
292c155
<             "host=" + host, "stage=" + stage.toString());
---
>             "host=" + host, "stage=" + stage.toString(), "topic=" + topic);
298d160
< 
310d171
<       // if exception thrown (i.e. the send failed), the partition is added to badPartitions.
312,319c173,175
<       OpenTsdbMetricConverter
<           .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITION_ERROR, 1,
<               "host=" + host, "stage=" + stage.toString(), "topic=" + topic,
<               "partition=" + this.partition);
< 
<       // retry the failed event by inserting it at the beginning of the deque.
<       // If number of tries reaches 3, meaning that 3 partitions have been tried sending to but
<       // still failed, this event is dropped.
---
>       OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITION_ERROR, 1,
>           "host=" + host, "stage=" + stage.toString(), "topic=" + topic, "partition=" + this.partition);
> 
324,327c180,181
<         OpenTsdbMetricConverter
<             .gauge(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_RETRIED,
<                 eventTriedCount.size(), "host=" + host, "stage=" + stage.toString(),
<                 "topic=" + topic);
---
>         OpenTsdbMetricConverter.gauge(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_RETRIED,
>             eventTriedCount.size(), "host=" + host, "stage=" + stage.toString(), "topic=" + topic);
330,333c184,185
<           OpenTsdbMetricConverter
<               .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_DROPPED, 1,
<                   "host=" + host, "stage=" + stage.toString(),
<                   "logName=" + event.getLoggingAuditHeaders().getLogName());
---
>         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_DROPPED, 1,
>             "host=" + host, "stage=" + stage.toString(), "logName=" + event.getLoggingAuditHeaders().getLogName());
345,346c197
<           LOG.debug("Failed to enqueue LoggingAuditEvent at head of the queue when executing "
<               + "producer send callback. Drop this event.");
---
>           LOG.debug("Failed to enqueue LoggingAuditEvent at head of the queue when executing producer send callback. Drop this event.");
350,352c201
<         LOG.debug(
<             "Enqueuing LoggingAuditEvent at head of the queue was interrupted in callback. "
<                 + "Drop this event");
---
>         LOG.debug("Enqueuing LoggingAuditEvent at head of the queue was interrupted in callback. Drop this event");
361,367c210,211
<           OpenTsdbMetricConverter
<               .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_ACKED, 1,
<                   "host=" + host, "stage=" + stage.toString(),
<                   "logName=" + event.getLoggingAuditHeaders().getLogName());
< 
<           // if send is successful, remove the event from the map eventTriedCount if it was added
<           // LoggingAuditHeaders can uniquely identify an event.
---
>           OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_EVENTS_ACKED, 1,
>               "host=" + host, "stage=" + stage.toString(), "logName=" + event.getLoggingAuditHeaders().getLogName());
369d212
<           // if send out successfully, remove the partition from the badPartitions if it was added.
374,377c217,219
<       } catch (Throwable t) {
<         LOG.warn("Exception throws in the callback. Drop this event {}", event, t);
<         OpenTsdbMetricConverter
<             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CALLBACK_EXCEPTION, 1,
---
>       } catch (Exception t) {
>         LOG.warn("Exception is thrown in the callback. Drop this event {}", event, t);
>         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CALLBACK_EXCEPTION, 1,
383,385d224
<   /**
<    *  start the executing thread and let the Sender run.
<    */
392,393c231
<       LOG.warn(
<           "[{}] created and started [{}] to let it dequeue LoggingAuditEvents and send to Kafka.",
---
>       LOG.warn("[{}] created and started [{}] to let it dequeue LoggingAuditEvents and send to Kafka.",
398,401d235
<   /**
<    *  reserve some time (by default 30 seconds at most)to let AuditEventKafkaSender to send out
<    *  LoggingAuditEvent in the queue and gracefully stop AuditEventKafkaSender.
<    */
403,405c237
<     LOG.warn(
<         "[{}] waits up to {} seconds to let [{}] send out LoggingAuditEvents left in the queue if"
<             + " any.",
---
>     LOG.warn("[{}] waits up to {} seconds to let [{}] send out LoggingAuditEvents left in the queue if any.",
417,418c249,250
<         LOG.warn("[{}] got interrupted while waiting for [{}] to send out LoggingAuditEvents left "
<             + "in the queue.", Thread.currentThread().getName(), name, e);
---
>         LOG.warn("[{}] got interrupted while waiting for [{}] to send out LoggingAuditEvents left in the queue.",
>             Thread.currentThread().getName(), name, e);
427c259
<     } catch (Throwable t) {
---
>     } catch (Exception t) {
433d264
< 
