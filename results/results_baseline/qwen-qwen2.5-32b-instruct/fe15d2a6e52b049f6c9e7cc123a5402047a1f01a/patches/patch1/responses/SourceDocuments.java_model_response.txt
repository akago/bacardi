```java
package com.premiumminds.billy.portugal.services.exportsaftptv1_02_01schema;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "salesInvoices",
    "movementmentOfGoods",
    "workingDocuments"
})
@XmlRootElement(name = "SourceDocuments")
public class SourceDocuments implements ToString2 {

{

    @XmlElement(name = "SalesInvoices")
    protected SourceDocuments.SalesInvoices salesInvoice;
    @XmlElement(name = "MovementOfGoods")
    protected SourceDocuments.MovementOfGoods movementOfGoods;
    @XmlElement(name = "WorkingDocuments")
    protected SourceDocuments.WorkingDocuments workingDocuments;

    public SourceDocuments.SalesInvoice getSalesInvoice() {
        return salesInvoice;
    }

    public void setSalesInvoice(SourceDocuments.SalesInvoice value) {
        this.salesInvoice = value;
    }

    public SourceDocuments.MovementOfGoods getMovementOfGoods() {
        return movementOfGoods;
    }

    public void setMovementOfGoods(SourceDocuments.MovementOfGoods value) {
        this.movementOfGoods = value;
    }

    public SourceDocuments.WorkingDocuments getWorkingDocuments() {
        return workingDocuments;
    }

    public void setWorkingDocuments(SourceDocuments.WorkingDocuments value) {
        this.workingDocuments = value;
    }

    @Override
    public String toString() {
        final ToStringStrategy2 strategy = new JAXBToStringStrategy();
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            SourceDocuments.SalesInvoice theSalesInvoice;
            theSalesInvoice = this.getSalesInvoice();
            strategy.appendField(locator, this, "salesInvoice", buffer, theSalesInvoice, (this.salesInvoice != null));
        }
        {
            SourceDocuments.MovementOfGoods theMovementOfGoods;
            theMovementOfGoods = this.getMovementOfGoods();
            strategy.appendField(locator, this, "movementmentOfGoods", buffer, theMovementOfGoods, (this.movementOfGoods != null);
        }
        {
            SourceDocuments.WorkingDocuments theWorkingDocuments;
            theWorkingDocuments = this.getWorkingDocuments();
            strategy.appendField(locator, this, "workingDocuments", buffer, theWorkingDocuments, (this.workingDocuments != null)
        }
        return buffer;
    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "numberOfMovementLines",
        "totalQuantityIssued",
        "stockMovement"
    })
    public static class MovementOfGoods implements ToString2
    {

        @XmlElement(name = "NumberOfMovementLine", required = true)
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger numberOfMovementLine;
        @XmlElement(name = "TotalQuantityIssued", required = true)
        protected BigDecimal totalQuantityIssued;
        @XmlElement(name = "StockMovement")
        protected List<SourceDocuments.MovementOfGoods.StockMovement> stockMovement;

        public BigInteger getNumberOfMovementLine() {
            return numberOfMovementLine;
        }

        public void setNumberOfMovementLine(BigInteger value) {
            this.numberOfMovementLine = value;
        }

        public BigDecimal getTotalQuantityIssued() {
            return totalQuantityIssued;
        }

        public void setTotalQuantityIssued(BigDecimal value) {
            this.totalQuantityIssued = value;
        }

        public List<SourceDocuments.MovementOfGoods.StockMovement> getStockMovement() {
            if (stockMovement == null) {
                stockMovement = new ArrayList<SourceDocuments.MovementOfGoods.StockMovement>();
            }
            return this.stockMovement;
        }

        @Override
        public String toString() {
            final ToStringStrategy2 strategy = new JAXBToStringStrategy();
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        @Override
        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        @Override
        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                BigInteger theNumberOfMovementLine;
                theNumberOfMovementLine = this.getNumberOfMovementLine();
                strategy.appendField(locator, this, "numberOfMovementLine", buffer, theNumberOfMovementLine, (this.numberOfMovementLine != null);
            }
            {
                BigDecimal theTotalQuantityIssued;
                theTotalQuantityIssued = this.getTotalQuantityIssued();
                strategy.appendField(locator, this, "totalQuantityIssued", buffer, theTotalQuantityIssued, (this.totalQuantityIssued != null)
            }
            {
                List<SourceDocuments.MovementOfGoods.StockMovement> theStockMovement;
                theStockMovement = (((this.stockMovement != null) && (!this.stockMovement.isEmpty())) ? this.getStockMovement() : null);
                strategy.appendField(locator, this, "stockMovement", buffer, theStockMovement, ((this.stockMovement != null) && (!this.stockMovement.isEmpty()));
            }
            return buffer;
        }

    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "numberOfEntry",
        "totalDebit",
        "totalCredit",
        "invoice"
    })
    public static class SalesInvoice implements ToString2
    {

        @XmlElement(name = "NumberOfEntry", required = true)
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger numberOfEntry;
        @XmlElement(name = "TotalDebit", required = true)
        protected BigDecimal totalDebit;
        @XmlElement(name = "TotalCredit", required = true)
        protected BigDecimal totalCredit;
        @XmlElement(name = "Invoice")
        protected List<SourceDocuments.SalesInvoice.Invoice> invoice;

        public BigInteger getNumberOfEntry() {
            return numberOfEntry;
        }

        public void setNumberOfEntry(BigInteger value) {
            this.numberOfEntry = value;
        }

        public BigDecimal getTotalDebit() {
            return totalDebit;
        }

        public void setTotalDebit(BigDecimal value) {
            this.totalDebit = value;
        }

        public BigDecimal getTotalCredit() {
            return totalCredit;
        }

        public void setTotalCredit(BigDecimal value) {
            this.totalCredit = value;
        }

        public List<SourceDocuments.SalesInvoice.Invoice> getInvoice() {
            if (invoice == null) {
                invoice = new ArrayList<SourceDocuments.SalesInvoice Invoice>();
            }
            return this.invoice;
        }

        @Override
        public String toString() {
            final ToStringStrategy2 strategy = new JAXBToStringStrategy();
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        @Override
        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        @Override
        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                BigInteger theNumberOfEntry;
                theNumberOfEntry = this.getNumberOfEntry();
                strategy.appendField(locator, this, "numberOfEntry", buffer, theNumberOfEntry, (this.numberOfEntry != null);
            }
            {
                BigDecimal theTotalDebit;
                theTotalDebit = this.getTotalDebit();
                strategy.appendField(locator, this, "totalDebit", buffer, theTotalDebit, (this.totalDebit != null)
            }
            {
                BigDecimal theTotalCredit;
                theTotalCredit = this.getTotalCredit();
                strategy.appendField(locator, this, "totalCredit", buffer, theTotalCredit, (this.totalCredit != null)
            }
            {
                List<SourceDocuments.SalesInvoice Invoice> theInvoice;
                theInvoice = (((this.invoice != null) && (!this.invoice.isEmpty())) ? this.getInvoice() : null);
                strategy.appendField(locator, this, "invoice", buffer, theInvoice, ((this.invoice != null) && (!this.invoice.isEmpty()));
            }
            return buffer;
        }

    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "numberOfEntry",
        "totalDebit",
        "totalCredit",
        "workDocument"
    })
    public static class WorkingDocuments implements ToString2
    {

        @XmlElement(name = "NumberOfEntry", required = true)
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger numberOfEntry;
        @XmlElement(name = "TotalDebit", required = true)
        protected BigDecimal totalDebit;
        @XmlElement(name = "TotalCredit", required = true)
        protected BigDecimal totalCredit;
        @XmlElement(name = "WorkDocument")
        protected List<SourceDocuments.WorkingDocuments.WorkDocument> workDocument;

        public BigInteger getNumberOfEntry() {
            return numberOfEntry;
        }

        public void setNumberOfEntry(BigInteger value) {
            this.numberOfEntry = value;
        }

        public BigDecimal getTotalDebit() {
            return totalDebit;
        }

        public void setTotalDebit(BigDecimal value) {
            this.totalDebit = value;
        }

        public BigDecimal getTotalCredit() {
            return totalCredit;
        }

        public void setTotalCredit(BigDecimal value) {
            this.totalCredit = value;
        }

        public List<SourceDocuments.WorkingDocuments.WorkDocument> getWorkDocument() {
            if (workDocument == null) {
                workDocument = new ArrayList<SourceDocuments.WorkingDocuments.WorkDocument>();
            }
            return this.workDocument;
        }

        @Override
        public String toString() {
            final ToStringStrategy2 strategy = new JAXBToStringStrategy();
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        @Override
        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        @Override
        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                BigInteger theNumberOfEntry;
                theNumberOfEntry = this.getNumberOfEntry();
                strategy.appendField(locator, this, "numberOfEntry", buffer, theNumberOfEntry, (this.numberOfEntry != null)
            }
            {
                BigDecimal theTotalDebit;
                theTotalDebit = this.getTotalDebit();
                strategy.appendField(locator, this, "totalDebit", buffer, theTotalDebit, (this.totalDebit != null)
            }
            {
                BigDecimal theTotalCredit;
                theTotalCredit = this.getTotalCredit();
                strategy.appendField(locator, this, "totalCredit", buffer, theTotalCredit, (this.totalCredit != null)
            }
            {
                List<SourceDocuments.WorkingDocuments.WorkDocument> theWorkDocument;
                theWorkDocument = (((this.workDocument != null) && (!this.workDocument.isEmpty())) ? this.getWorkDocument() : null);
                strategy.appendField(locator, this, "workDocument", buffer, theWorkDocument, ((this.workDocument != null) && (!this.workDocument.isEmpty()));
            }
            return buffer;
        }

    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "documentNumber",
        "documentStatus",
        "hash",
        "hashControl",
        "period",
        "workDate",
        "workType",
        "sourceID",
        "eacCode",
        "systemEntryDate",
        "customerID",
        "line",
        "documentTotals"
    })
    public static class WorkDocument implements ToString2
    {

        @XmlElement(name = "DocumentNumber", required = true)
        protected String documentNumber;
        @XmlElement(name = "DocumentStatus", required = true)
        protected SourceDocuments.WorkingDocuments.WorkDocument.DocumentStatus documentStatus;
        @XmlElement(name = "Hash", required = true)
        protected String hash;
        @XmlElement(name = "HashControl")
        protected String hashControl;
        @XmlElement(name = "Period")
        protected Integer period;
        @XmlElement(name = "WorkDate", required = true)
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar workDate;
        @XmlElement(name = "WorkType", required = true)
        protected String workType;
        @XmlElement(name = "SourceID", required = true)
        protected String sourceID;
        @XmlElement(name = "EACCode")
        protected String eacCode;
        @XmlElement(name = "SystemEntryDate", required = true)
        @XmlSchemaType(name = "dateTime")
        protected XMLGregorianCalendar systemEntryDate;
        @XmlElement(name = "CustomerID", required = true)
        protected String customerID;
        @XmlElement(name = "Line", required = true)
        protected List<SourceDocuments.WorkingDocuments.WorkDocument.Line> line;
        @XmlElement(name = "DocumentTotals", required = true)
        protected SourceDocuments.WorkingDocuments.WorkDocument.DocumentTotals documentTotals;

        public String getDocumentNumber() {
            return documentNumber;
        }

        public void setDocumentNumber(String value) {
            this.documentNumber = value;
        }

        public SourceDocuments.WorkingDocuments.WorkDocument.DocumentStatus getDocumentStatus() {
            return documentStatus;
        }

        public void setDocumentStatus(SourceDocuments.WorkingDocuments.WorkDocument.DocumentStatus value) {
            this.documentStatus = value;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String value) {
            this.hash = value;
        }

        public String getHashControl() {
            return hashControl;
        }

        public void setHashControl(String value) {
            this.hashControl = value;
        }

        public Integer getPeriod() {
            return period;
        }

        public void setPeriod(Integer value) {
            this.period = value;
        }

        public XMLGregorianCalendar getWorkDate() {
            return workDate;
        }

        public void setWorkDate(XMLGregorianCalendar value) {
            this.workDate = value;
        }

        public String getWorkType() {
            return workType;
        }

        public void setWorkType(String value) {
            this.workType = value;
        }

        public String getSourceID() {
            return sourceID;
        }

        public void setSourceID(String value) {
            this.sourceID = value;
        }

        public String getEACCode() {
            return eacCode;
        }

        public void setEACCode(String value) {
            this.eacCode = value;
        }

        public XMLGregorianCalendar getSystemEntryDate() {
            return systemEntryDate;
        }

        public void setSystemEntryDate(XMLGregorianCalendar value) {
            this.systemEntryDate = value;
        }

        public String getCustomerID() {
            return customerID;
        }

        public void setCustomerID(String value) {
            this.customerID = value;
        }

        public List<SourceDocuments.WorkingDocuments.WorkDocument.Line> getLine() {
            if (line == null) {
                line = new ArrayList<SourceDocuments.WorkingDocuments.WorkDocument.Line>();
            }
            return this.line;
        }

        public SourceDocuments.WorkingDocuments.WorkDocument.DocumentTotals getDocumentTotals() {
            return documentTotals;
        }

        public void setDocumentTotals(SourceDocuments.WorkingDocuments.WorkDocument.DocumentTotals value) {
            this.documentTotals = value;
        }

        @Override
        public String toString() {
            final ToStringStrategy2 strategy = new JAXBToStringStrategy();
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        @Override
        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        @Override
        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
            {
                String theDocumentNumber;
                theDocumentNumber = this.getDocumentNumber();
                strategy.appendField(locator, this, "documentNumber", buffer, theDocumentNumber, (this.documentNumber != null)
            }
            {
                SourceDocuments.WorkingDocuments.WorkDocument.DocumentStatus theDocumentStatus;
                theDocumentStatus = this.getDocumentStatus();
                strategy.appendField(locator, this, "documentStatus", buffer, theDocumentStatus, (this.documentStatus != null)
            }
            {
                String theHash;
                theHash = this.getHash();
                strategy.appendField(locator, this, "hash", buffer, theHash, (this.hash != null)
            }
            {
                String theHashControl;
                theHashControl = this.getHashControl();
                strategy.appendField(locator, this, "hashControl", buffer, theHashControl, (this.hashControl != null)
            }
            {
                Integer thePeriod;
                thePeriod = this.getPeriod();
                strategy.appendField(locator, this, "period", buffer, thePeriod, (this.period != null)
            }
            {
                XMLGregorianCalendar theWorkDate;
                theWorkDate = this.getWorkDate();
                strategy.appendField(locator, this, "workDate", buffer, theWorkDate, (this.workDate != null)
            }
            {
                String theWorkType;
                theWorkType = this.getWorkType();
                strategy.appendField(locator, this, "workType", buffer, theWorkType, (this.workType != null)
            }
            {
                String theSourceID;
                theSourceID = this.getSourceID();
                strategy.appendField(locator, this, "sourceID", buffer, theSourceID, (this.sourceID != null)
            }
            {
                String theEACCode;
                theEACCode = this.getEACCode();
                strategy.appendField(locator, this, "eacCode", buffer, theEACCode, (this.eacCode != null)
            }
            {
                XMLGregorianCalendar theSystemEntryDate;
                theSystemEntryDate = this.getSystemEntryDate();
                strategy.appendField(locator, this, "systemEntryDate", buffer, theSystemEntryDate, (this.systemEntryDate != null)
            }
            {
                String theCustomerID;
                theCustomerID = this.getCustomerID();
                strategy.appendField(locator, this, "customerID", buffer, theCustomerID, (this.customerID != null)
            }
            {
                List<SourceDocuments.WorkingDocuments.WorkDocument.Line> theLine;
                theLine = (((this.line != null) && (!this.line.isEmpty())) ? this.getLine() : null);
                strategy.appendField(locator, this, "line", buffer, theLine, ((this.line != null) && (!this.line.isEmpty()));
            }
            {
                SourceDocuments.WorkingDocuments.WorkDocument.DocumentTotals theDocumentTotals;
                theDocumentTotals = this.getDocumentTotals();
                strategy.appendField(locator, this, "documentTotals", buffer, theDocumentTotals, (this.documentTotals != null)
            }
            return buffer;
        }

    }

    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "taxStatus",
        "
