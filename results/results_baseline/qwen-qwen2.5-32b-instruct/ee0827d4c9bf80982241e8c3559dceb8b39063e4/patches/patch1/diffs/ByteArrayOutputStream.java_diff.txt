1,16d0
< /*
<  * Licensed to the Apache Software Foundation (ASF) under one or more
<  * contributor license agreements.  See the NOTICE file distributed with
<  * this work for additional information regarding copyright ownership.
<  * The ASF licenses this file to You under the Apache License, Version 2.0
<  * (the "License"); you may not use this file except in compliance with
<  * the License.  You may obtain a copy of the License at
<  *
<  *      http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
29d12
< import org.apache.commons.io.input.ClosedInputStream;
31,51c14,15
< /**
<  * This class implements an output stream in which the data is
<  * written into a byte array. The buffer automatically grows as data
<  * is written to it.
<  * <p>
<  * The data can be retrieved using <code>toByteArray()</code> and
<  * <code>toString()</code>.
<  * <p>
<  * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<  * this class can be called after the stream has been closed without
<  * generating an {@code IOException}.
<  * <p>
<  * This is an alternative implementation of the {@link java.io.ByteArrayOutputStream}
<  * class. The original implementation only allocates 32 bytes at the beginning.
<  * As this class is designed for heavy duty it starts at 1024 bytes. In contrast
<  * to the original it doesn't reallocate the whole memory block but allocates
<  * additional buffers. This way no buffers need to be garbage collected and
<  * the contents don't have to be copied to the new buffer. This class is
<  * designed to behave exactly like the original. The only exception is the
<  * deprecated toString(int) method that has been ignored.
<  */
---
> import org.apache.commons.io.IOUtils;
> 
166c130
<     public void write( final byte[] b, final int off, final int len )
---
>     public synchronized void write( final byte[] b, final int off, final int len )
176,179d139
<         else if ( len == 0 )
<         {
<             return;
<         }
219,298d178
<      * Writes the entire contents of the specified input stream to this
<      * byte stream. Bytes from the input stream are read directly into the
<      * internal buffers of this streams.
<      *
<      * @param in the input stream to read from
<      *
<      * @return total number of bytes read from the input stream
<      * (and written to this stream)
<      *
<      * @throws java.io.IOException if an I/O error occurs while reading the input stream
<      * @since 1.4
<      */
<     public synchronized int write( final InputStream in ) throws IOException
<     {
<         int readCount = 0;
<         int inBufferPos = count - filledBufferSum;
<         int n = in.read( currentBuffer, inBufferPos, currentBuffer.length - inBufferPos );
<         while ( n != -1 )
<         {
<             readCount += n;
<             inBufferPos += n;
<             count += n;
<             if ( inBufferPos == currentBuffer.length )
<             {
<                 needNewBuffer( currentBuffer.length );
<                 inBufferPos = 0;
<             }
<             n = in.read( currentBuffer, inBufferPos, currentBuffer.length - inBufferPos );
<         }
<         return readCount;
<     }
< 
<     /**
<      * Return the current size of the byte array.
<      *
<      * @return the current size of the byte array
<      */
<     public synchronized int size()
<     {
<         return count;
<     }
< 
<     /**
<      * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<      * this class can be called after the stream has been closed without
<      * generating an {@code IOException}.
<      *
<      * @throws java.io.IOException never (this method should not declare this exception
<      * but it has to now due to backwards compatibility)
<      */
<     @Override
<     public void close() throws IOException
<     {
<         //nop
<     }
< 
<     /**
<      * @see java.io.ByteArrayOutputStream#reset()
<      */
<     public synchronized void reset()
<     {
<         count = 0;
<         filledBufferSum = 0;
<         currentBufferIndex = 0;
<         if ( reuseBuffers )
<         {
<             currentBuffer = buffers.get( currentBufferIndex );
<         }
<         else
<         {
<             //Throw away old buffers
<             currentBuffer = null;
<             int size = buffers.get( 0 ).length;
<             buffers.clear();
<             needNewBuffer( size );
<             reuseBuffers = true;
<         }
<     }
< 
<     /**
348c228,232
<         return toBufferedInputStream( input, 1024 );
---
>         // It does not matter if a ByteArrayOutputStream is not closed as close() is a no-op
>         @SuppressWarnings( "resource" )
>         final ByteArrayOutputStream output = new ByteArrayOutputStream( 1024 );
>         IOUtils.copy( input, output );
>         return output.toInputStream();
381c265
<         output.write( input );
---
>         IOUtils.copy( input, output );
387,388c271
<      * returned stream is backed by buffers of <code>this</code> stream,
<      * avoiding memory allocation and copy, thus saving space and time.<br>
---
>      * returned stream is backed by buffers of <code>this</code> stream.
401c284
<             return new ClosedInputStream();
---
>             return IOUtils.toInputStream( "", "UTF-8" );
