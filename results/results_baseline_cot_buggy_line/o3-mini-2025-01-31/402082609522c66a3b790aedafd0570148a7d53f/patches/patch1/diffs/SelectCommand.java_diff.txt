7,12c7
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import net.kyori.adventure.text.Component;
14a10,12
> import java.util.Optional;
> import static net.kyori.adventure.text.Component.text;
> import static com.github.games647.changeskin.sponge.command.SelectCommand.GenericArguments.string;
16,17c14,16
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> interface ChangeSkinCommand {
>     CommandSpec buildSpec();
> }
19c18
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements SelectCommand.CommandExecutor, ChangeSkinCommand {
30c29
<         if (!(src instanceof Player)) {
---
>         if (!(((Object) src) instanceof Player)) {
52c51
<                 .arguments(string(of("skinName")))
---
>                 .arguments(string(text("skinName")))
55a55,125
> 
>     public interface CommandExecutor {
>         CommandResult execute(CommandSource src, CommandContext args);
>     }
> 
>     public static class CommandResult {
>         private static final CommandResult SUCCESS = new CommandResult();
>         private static final CommandResult EMPTY = new CommandResult();
> 
>         public static CommandResult success() {
>             return SUCCESS;
>         }
> 
>         public static CommandResult empty() {
>             return EMPTY;
>         }
>     }
> 
>     public interface CommandSource {
>     }
> 
>     public interface CommandContext {
>         <T> Optional<T> getOne(String key);
>     }
> 
>     public static class CommandSpec {
>         private final CommandExecutor executor;
>         private final Object[] arguments;
>         private final String permission;
> 
>         private CommandSpec(CommandExecutor executor, Object[] arguments, String permission) {
>             this.executor = executor;
>             this.arguments = arguments;
>             this.permission = permission;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Object[] arguments;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Object... arguments) {
>                 this.arguments = arguments;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 return new CommandSpec(executor, arguments, permission);
>             }
>         }
>     }
> 
>     public static class GenericArguments {
>         public static Object string(Component component) {
>             return component;
>         }
>     }
