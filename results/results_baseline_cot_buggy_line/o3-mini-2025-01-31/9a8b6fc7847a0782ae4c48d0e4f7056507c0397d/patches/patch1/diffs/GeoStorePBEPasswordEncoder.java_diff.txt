3,22d2
< /*
<  *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.
<  *  http://www.geo-solutions.it
<  *
<  *  GPLv3 + Classpath exception
<  *
<  *  This program is free software: you can redistribute it and/or modify
<  *  it under the terms of the GNU General Public License as published by
<  *  the Free Software Foundation, either version 3 of the License, or
<  *  (at your option) any later version.
<  *
<  *  This program is distributed in the hope that it will be useful,
<  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  *  GNU General Public License for more details.
<  *
<  *  You should have received a copy of the GNU General Public License
<  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
<  */
< 
33c13
< import org.jasypt.spring.security.PBEPasswordEncoder;
---
> 
102,105c82,89
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
< 
<                         return encoder;
---
>                         return new PasswordEncoder() {
>                                 public String encodePassword(String rawPass, Object salt) {
>                                         return stringEncrypter.encrypt(rawPass);
>                                 }
>                                 public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
>                                         return stringEncrypter.decrypt(removePrefix(encPass)).equals(rawPass);
>                                 }
>                         };
127,128c111
<                         public boolean isPasswordValid(String encPass, char[] rawPass,
<                                         Object salt) {
---
>                         public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
145,146c128
<                                         return new String(Base64.getEncoder().encode(byteEncrypter
<                                                         .encrypt(bytes)));
---
>                                         return new String(Base64.getEncoder().encode(byteEncrypter.encrypt(bytes)));
