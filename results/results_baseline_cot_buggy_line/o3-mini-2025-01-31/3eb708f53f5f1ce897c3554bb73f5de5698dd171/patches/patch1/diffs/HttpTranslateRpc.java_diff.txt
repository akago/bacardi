1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
20,29c4,7
< 
< import com.google.api.client.http.GenericUrl;
< import com.google.api.client.http.HttpRequestInitializer;
< import com.google.api.client.http.HttpTransport;
< import com.google.api.client.json.jackson2.JacksonFactory;
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
< import com.google.cloud.http.HttpTransportOptions;
---
> import com.google.cloud.translate.Detection;
> import com.google.cloud.translate.Language;
> import com.google.cloud.translate.Translate;
> import com.google.cloud.translate.Translation;
32c10
< import com.google.common.base.Function;
---
> import com.google.cloud.translate.Translate.TranslateOption;
34d11
< import com.google.common.collect.Lists;
35a13
> import java.util.ArrayList;
45,47d22
<     HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();
<     HttpTransport transport = transportOptions.getHttpTransportFactory().create();
<     HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);
49,53c24
<     translate =
<         new Translate.Builder(transport, new JacksonFactory(), initializer)
<             .setRootUrl(options.getHost())
<             .setApplicationName(options.getApplicationName())
<             .build();
---
>     this.translate = options.getService();
61c32
<     GenericUrl genericUrl = new GenericUrl(translate.getBaseUrl() + "v2/" + path);
---
>     GenericUrl genericUrl = new GenericUrl(options.getHost() + "v2/" + path);
68d38
<   @Override
71,75c41,50
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
<     } catch (IOException ex) {
<       throw translate(ex);
---
>       List<Detection> detectionResults = translate.detect(texts);
>       List<List<DetectionsResourceItems>> result = new ArrayList<>();
>       for (Detection detection : detectionResults) {
>         List<DetectionsResourceItems> inner = new ArrayList<>();
>         inner.add(new DetectionsResourceItems(detection.getLanguage()));
>         result.add(inner);
>       }
>       return result != null ? result : ImmutableList.<List<DetectionsResourceItems>>of();
>     } catch (Exception ex) {
>       throw new TranslateException(ex);
79d53
<   @Override
82,94c56,66
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
<     } catch (IOException ex) {
<       throw translate(ex);
---
>       String target =
>           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       List<Language> languagesList =
>           translate.listSupportedLanguages(TranslateOption.targetLanguage(target));
>       List<LanguagesResource> result = new ArrayList<>();
>       for (Language language : languagesList) {
>         result.add(new LanguagesResource(language.getCode()));
>       }
>       return result != null ? result : ImmutableList.<LanguagesResource>of();
>     } catch (Exception ex) {
>       throw new TranslateException(ex);
98d69
<   @Override
104,116c75,114
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
<       return Lists.transform(
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
---
>       List<TranslateOption> translateOptions = new ArrayList<>();
>       translateOptions.add(TranslateOption.targetLanguage(targetLanguage));
>       if (sourceLanguage != null) {
>         translateOptions.add(TranslateOption.sourceLanguage(sourceLanguage));
>       }
>       String model = Option.MODEL.getString(optionMap);
>       if (model != null) {
>         translateOptions.add(TranslateOption.model(model));
>       }
>       String format = Option.FORMAT.getString(optionMap);
>       if (format != null) {
>         translateOptions.add(TranslateOption.format(format));
>       }
>       List<Translation> translationsList =
>           translate.translate(texts, translateOptions.toArray(new TranslateOption[0]));
>       List<TranslationsResource> result = new ArrayList<>();
>       for (Translation t : translationsList) {
>         String detected = t.getSourceLanguage();
>         if (detected == null) {
>           detected = sourceLanguage;
>         }
>         result.add(new TranslationsResource(t.getTranslatedText(), detected));
>       }
>       return result;
>     } catch (Exception ex) {
>       throw new TranslateException(ex);
>     }
>   }
> 
>   private static class GenericUrl {
>     private String url;
> 
>     public GenericUrl(String url) {
>       this.url = url;
>     }
> 
>     public void put(String key, String value) {
>       // No-op for this dummy implementation.
>     }
> 
118,126c116,187
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
<               return translationsResource;
<             }
<           });
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     public String toString() {
>       return url;
>     }
>   }
> 
>   public static class DetectionsResourceItems {
>     private String language;
> 
>     public DetectionsResourceItems(String language) {
>       this.language = language;
>     }
> 
>     public String getLanguage() {
>       return language;
>     }
> 
>     public void setLanguage(String language) {
>       this.language = language;
>     }
>   }
> 
>   public static class LanguagesResource {
>     private String language;
> 
>     public LanguagesResource(String language) {
>       this.language = language;
>     }
> 
>     public String getLanguage() {
>       return language;
>     }
> 
>     public void setLanguage(String language) {
>       this.language = language;
>     }
>   }
> 
>   public static class TranslationsResource {
>     private String translatedText;
>     private String detectedSourceLanguage;
> 
>     public TranslationsResource(String translatedText, String detectedSourceLanguage) {
>       this.translatedText = translatedText;
>       this.detectedSourceLanguage = detectedSourceLanguage;
>     }
> 
>     public String getTranslatedText() {
>       return translatedText;
>     }
> 
>     public void setTranslatedText(String translatedText) {
>       this.translatedText = translatedText;
>     }
> 
>     public String getDetectedSourceLanguage() {
>       return detectedSourceLanguage;
>     }
> 
>     public void setDetectedSourceLanguage(String detectedSourceLanguage) {
>       this.detectedSourceLanguage = detectedSourceLanguage;
>     }
>   }
> 
>   public static enum Option {
>     TARGET_LANGUAGE,
>     SOURCE_LANGUAGE,
>     MODEL,
>     FORMAT;
> 
>     public String getString(Map<Option, ?> optionMap) {
>       Object value = optionMap.get(this);
>       return value != null ? value.toString() : null;
