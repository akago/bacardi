```java
package com.google.cloud.translate.spi.v2;

import static com.google.common.base.MoreObjects.firstNonNull;
import com.google.cloud.translate.Detection;
import com.google.cloud.translate.Language;
import com.google.cloud.translate.Translate;
import com.google.cloud.translate.Translation;
import com.google.cloud.translate.TranslateException;
import com.google.cloud.translate.TranslateOptions;
import com.google.cloud.translate.Translate.TranslateOption;
import com.google.common.collect.ImmutableList;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class HttpTranslateRpc implements TranslateRpc {

  private final TranslateOptions options;
  private final Translate translate;

  public HttpTranslateRpc(TranslateOptions options) {
    this.options = options;
    this.translate = options.getService();
  }

  private static TranslateException translate(IOException exception) {
    return new TranslateException(exception);
  }

  private GenericUrl buildTargetUrl(String path) {
    GenericUrl genericUrl = new GenericUrl(options.getHost() + "v2/" + path);
    if (options.getApiKey() != null) {
      genericUrl.put("key", options.getApiKey());
    }
    return genericUrl;
  }

  public List<List<DetectionsResourceItems>> detect(List<String> texts) {
    try {
      List<Detection> detectionResults = translate.detect(texts);
      List<List<DetectionsResourceItems>> result = new ArrayList<>();
      for (Detection detection : detectionResults) {
        List<DetectionsResourceItems> inner = new ArrayList<>();
        inner.add(new DetectionsResourceItems(detection.getLanguage()));
        result.add(inner);
      }
      return result != null ? result : ImmutableList.<List<DetectionsResourceItems>>of();
    } catch (Exception ex) {
      throw new TranslateException(ex);
    }
  }

  public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
    try {
      String target =
          firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
      List<Language> languagesList =
          translate.listSupportedLanguages(TranslateOption.targetLanguage(target));
      List<LanguagesResource> result = new ArrayList<>();
      for (Language language : languagesList) {
        result.add(new LanguagesResource(language.getCode()));
      }
      return result != null ? result : ImmutableList.<LanguagesResource>of();
    } catch (Exception ex) {
      throw new TranslateException(ex);
    }
  }

  public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
    try {
      String targetLanguage =
          firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
      final String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
      List<TranslateOption> translateOptions = new ArrayList<>();
      translateOptions.add(TranslateOption.targetLanguage(targetLanguage));
      if (sourceLanguage != null) {
        translateOptions.add(TranslateOption.sourceLanguage(sourceLanguage));
      }
      String model = Option.MODEL.getString(optionMap);
      if (model != null) {
        translateOptions.add(TranslateOption.model(model));
      }
      String format = Option.FORMAT.getString(optionMap);
      if (format != null) {
        translateOptions.add(TranslateOption.format(format));
      }
      List<Translation> translationsList =
          translate.translate(texts, translateOptions.toArray(new TranslateOption[0]));
      List<TranslationsResource> result = new ArrayList<>();
      for (Translation t : translationsList) {
        String detected = t.getSourceLanguage();
        if (detected == null) {
          detected = sourceLanguage;
        }
        result.add(new TranslationsResource(t.getTranslatedText(), detected));
      }
      return result;
    } catch (Exception ex) {
      throw new TranslateException(ex);
    }
  }

  private static class GenericUrl {
    private String url;

    public GenericUrl(String url) {
      this.url = url;
    }

    public void put(String key, String value) {
      // No-op for this dummy implementation.
    }

    @Override
    public String toString() {
      return url;
    }
  }

  public static class DetectionsResourceItems {
    private String language;

    public DetectionsResourceItems(String language) {
      this.language = language;
    }

    public String getLanguage() {
      return language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }
  }

  public static class LanguagesResource {
    private String language;

    public LanguagesResource(String language) {
      this.language = language;
    }

    public String getLanguage() {
      return language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }
  }

  public static class TranslationsResource {
    private String translatedText;
    private String detectedSourceLanguage;

    public TranslationsResource(String translatedText, String detectedSourceLanguage) {
      this.translatedText = translatedText;
      this.detectedSourceLanguage = detectedSourceLanguage;
    }

    public String getTranslatedText() {
      return translatedText;
    }

    public void setTranslatedText(String translatedText) {
      this.translatedText = translatedText;
    }

    public String getDetectedSourceLanguage() {
      return detectedSourceLanguage;
    }

    public void setDetectedSourceLanguage(String detectedSourceLanguage) {
      this.detectedSourceLanguage = detectedSourceLanguage;
    }
  }

  public static enum Option {
    TARGET_LANGUAGE,
    SOURCE_LANGUAGE,
    MODEL,
    FORMAT;

    public String getString(Map<Option, ?> optionMap) {
      Object value = optionMap.get(this);
      return value != null ? value.toString() : null;
    }
  }
}
```
