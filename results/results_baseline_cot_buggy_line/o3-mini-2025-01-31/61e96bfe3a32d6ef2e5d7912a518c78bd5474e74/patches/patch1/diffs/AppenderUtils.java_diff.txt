1,15d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  * 
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  * 
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  * 
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
33a19
> import java.io.ByteArrayOutputStream;
38,40d23
< /**
<  * Utils to create logback appenders
<  */
48,50d30
<   /**
<    * Encoder for LogMessage objects.
<    */
53,56d32
<     private TTransport framedTransport;
<     private TProtocol protocol;
<     private OutputStream os;
< 
58,65c34,35
<     public void init(OutputStream os) {
<       this.os = os;
<       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
<       // log.
<       final int bufferCapacity = 10;
<       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
<           bufferCapacity);
<       protocol = new TBinaryProtocol(framedTransport);
---
>     public void init(OutputStream os) throws IOException {
>       // No initialization needed for this stateless encoder.
69c39,43
<     public void doEncode(LogMessage logMessage) throws IOException {
---
>     public byte[] encode(LogMessage logMessage) throws IOException {
>       ByteArrayOutputStream baos = new ByteArrayOutputStream();
>       final int bufferCapacity = 10;
>       TTransport transport = new TFastFramedTransport(new TIOStreamTransport(baos), bufferCapacity);
>       TProtocol protocol = new TBinaryProtocol(transport);
72c46
<         framedTransport.flush();
---
>         transport.flush();
75a50
>       return baos.toByteArray();
80c55,65
<       framedTransport.close();
---
>       // No resources to clean up.
>     }
>     
>     @Override
>     public byte[] headerBytes() {
>       return null;
>     }
> 
>     @Override
>     public byte[] footerBytes() {
>       return null;
84,92d68
<   /**
<    * Create the basic thrift appender which logs to a file
<    * and rolls the file when it exceeds a certain size.
<    *
<    * @param basePath base directory the files are under.
<    * @param topic the topic name for the current appender.
<    * @param rotateThresholdKBytes threshold in kilobytes to rotate after.
<    * @param context the logback context.
<    */
115d90
<     // Also impose a max size per file policy.
