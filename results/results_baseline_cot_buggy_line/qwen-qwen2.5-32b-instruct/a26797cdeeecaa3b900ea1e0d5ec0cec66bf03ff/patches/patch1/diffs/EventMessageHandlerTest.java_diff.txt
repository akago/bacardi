16a17
> import org.slf4j.Logger;
111,113c112,113
<         Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
<         logger.setLevel(Level.INFO);
<         logger.addAppender(mockLogAppender);
---
>         Logger logger = LoggerFactory.getLogger(EventMessageHandler.class);
>         // Removed the setting of the logging level and adding of appender as these are Logback-specific operations.
120c120
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount));
123c123
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
141c141
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount, "reason", "fraudulent"))
144d143
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
148c147
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
160,175c159,174
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("paymentExternalId"), is("456"));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022"));
<         assertThat(personalisation.get("disputedAmount"), is("210.00"));
< 
<         assertThat(personalisation.get("fraudulent"), is("yes"));
<         assertThat(personalisation.get("duplicate"), is("no"));
<         assertThat(personalisation.get("credit_not_processed"), is("no"));
<         assertThat(personalisation.get("product_not_received"), is("no"));
<         assertThat(personalisation.get("product_unacceptable"), is("no"));
<         assertThat(personalisation.get("subscription_canceled"), is("no"));
<         assertThat(personalisation.get("unrecognized"), is("no"));
<         assertThat(personalisation.get("paymentAmount"), is(nullValue()));
<         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue()));
---
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("paymentExternalId"), is("456");
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022");
>         assertThat(personalisation.get("disputedAmount"), is("210.00");
> 
>         assertThat(personalisation.get("fraudulent"), is("yes");
>         assertThat(personalisation.get("duplicate"), is("no");
>         assertThat(personalisation.get("credit_not_processed"), is("no");
>         assertThat(personalisation.get("product_not_received"), is("no");
>         assertThat(personalisation.get("product_unacceptable"), is("no");
>         assertThat(personalisation.get("subscription_canceled"), is("no");
>         assertThat(personalisation.get("unrecognized"), is("no");
>         assertThat(personalisation.get("paymentAmount"), is(nullValue());
>         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue());
189c188
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccount))
197c196,197
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
208,212c208,212
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(emails.size(), is(2);
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName());
226c226
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
234,235c234,236
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
245,249c246,250
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(emails.size(), is(2);
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName());
263c264
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
271,272c272,274
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
282,286c284,288
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(emails.size(), is(2);
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName());
300c302
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccount))
305c307
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.empty());
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.empty();
317c319
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
322,323c324,325
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.empty());
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.empty();
335c337
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
341,343c343,345
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
<         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(Collections.emptyList());
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
>         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(Collections.emptyList();
