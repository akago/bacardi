1,15d0
< /*
<  * Copyright 2020 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,21c3,6
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.cloud.resourcemanager.v3.OrgPolicy; // Assuming the new package is v3
> import com.google.cloud.resourcemanager.v3.RestoreDefault; // Assuming the new package is v3
> import com.google.cloud.resourcemanager.v3.BooleanPolicy; // Assuming the new package is v3
> import com.google.cloud.resourcemanager.v3.ListPolicy; // Assuming the new package is v3
110,119c95
<    * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:
<    * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote
<    * specific values, and is required only if the value contains a ":". Values prefixed with "is:"
<    * are treated the same as values with no prefix. Ancestry subtrees must be in one of the
<    * following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g.
<    * "folders/1234" - "organizations/", e.g. "organizations/1234" The supportsUnder field of the
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
---
>    * allowedValues and deniedValues fields.
125c101
<     private final List<java.lang.String> deniedValues;
---
>     private final List<String> deniedValues;
142d117
<     /** Returns all the Values state of this policy. */
147d121
<     /** Returns the list of allowed values of this resource */
152d125
<     /** Returns the list of denied values of this resource. */
157d129
<     /** Returns the inheritance behavior for this Policy */
162d133
<     /** Returns the suggested value of this policy. */
196,197c167
<       return Objects.hash(
<           allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
---
>       return Objects.hash(allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
202,206c172,176
<           .setAllValues(allValues)
<           .setAllowedValues(allowedValues)
<           .setDeniedValues(deniedValues)
<           .setInheritFromParent(inheritFromParent)
<           .setSuggestedValue(suggestedValue);
---
>           .setAllValues(getAllValues())
>           .setAllowedValues(getAllowedValues())
>           .setDeniedValues(getDeniedValues())
>           .setInheritFromParent(getInheritFromParent())
>           .setSuggestedValue(getSuggestedValue());
231,238c201,208
<     Builder(OrgPolicyInfo info) {
<       this.boolPolicy = info.boolPolicy;
<       this.constraint = info.constraint;
<       this.etag = info.etag;
<       this.policies = info.policies;
<       this.restoreDefault = info.restoreDefault;
<       this.updateTime = info.updateTime;
<       this.version = info.version;
---
>     Builder(OrgPolicyInfo orgPolicyInfo) {
>       this.boolPolicy = orgPolicyInfo.boolPolicy;
>       this.constraint = orgPolicyInfo.constraint;
>       this.etag = orgPolicyInfo.etag;
>       this.policies = orgPolicyInfo.policies;
>       this.restoreDefault = orgPolicyInfo.restoreDefault;
>       this.updateTime = orgPolicyInfo.updateTime;
>       this.version = orgPolicyInfo.version;
350,359d319
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
<   public static Builder newBuilder() {
<     return new Builder();
<   }
< 
<   /** Returns a builder for the {@link OrgPolicyInfo} object. */
<   public Builder toBuilder() {
<     return new Builder(this);
<   }
< 
390a351,358
> 
>   public static Builder newBuilder() {
>     return new Builder();
>   }
> 
>   public Builder toBuilder() {
>     return new Builder(this);
>   }
