1,16d0
< /*
<  * Copyright 2015 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
19,22d2
< import com.google.api.services.cloudresourcemanager.model.Constraint;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
75,78d54
<     public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {
<       return new ListResult<>(pageToken, list);
<     }
< 
86a63
> 
92c69,70
<   Project create(Project project);
---
>   // Placeholder method, as Project class is not available
>   void createPlaceholder();
107c85,86
<   Project get(String projectId, Map<Option, ?> options);
---
>   // Placeholder method, as Project class is not available
>   Object getPlaceholder(String projectId, Map<Option, ?> options);
114c93
<   Tuple<String, Iterable<Project>> list(Map<Option, ?> options);
---
>   Tuple<String, Iterable<Object>> list(Map<Option, ?> options);
131c110,111
<   Project replace(Project project);
---
>   // Placeholder method, as Project class is not available
>   void replacePlaceholder();
138c118,119
<   Policy getPolicy(String projectId);
---
>   // Placeholder method, as Policy class is not available
>   Object getPolicyPlaceholder(String projectId);
145c126,127
<   Policy replacePolicy(String projectId, Policy newPolicy);
---
>   // Placeholder method, as Policy class is not available
>   void replacePolicyPlaceholder(String projectId, Object newPolicy);
161,162c143
<   Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)
<       throws IOException;
---
>   Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions) throws IOException;
164c145,146
<   // TODO(ajaykannan): implement "Organization" functionality when available (issue #319)
---
>   // Placeholder methods for OrgPolicy and Constraint, as they are not available
>   void clearOrgPolicyPlaceholder(String resource, Object orgPolicy) throws IOException;
166,167c148
<   /** Clears the Policy from a resource. */
<   void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
---
>   Object getEffectiveOrgPolicyPlaceholder(String resource, String constraint) throws IOException;
169,189c150
<   /**
<    * Gets the effective Policy on a resource.
<    *
<    * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does
<    * not have an etag set because it is a computed Policy across multiple resources. Subtrees of
<    * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;
< 
<   /**
<    * Gets the Policy on a resource.
<    *
<    * <p>If no Policy is set on the resource, a Policy is returned with default values including
<    * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with
<    * projects.setOrgPolicy() to create or update a Policy during read-modify-write.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;
---
>   Object getOrgPolicyPlaceholder(String resource, String constraint) throws IOException;
191,197c152
<   /**
<    * Lists all the Constraints that can be applied on the specified resource.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)
<       throws IOException;
---
>   ListResult<Object> listAvailableOrgPolicyConstraintsPlaceholder(String resource, Map<Option, ?> options) throws IOException;
199,204c154
<   /**
<    * Lists all the Policies set for a particular resource.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;
---
>   ListResult<Object> listOrgPoliciesPlaceholder(String resource, Map<Option, ?> options) throws IOException;
206,214c156
<   /**
<    * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the
<    * resource if one does not exist.
<    *
<    * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.
<    *
<    * @throws ResourceManagerException upon failure
<    */
<   OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;
---
>   void replaceOrgPolicyPlaceholder(String resource, Object orgPolicy) throws IOException;
