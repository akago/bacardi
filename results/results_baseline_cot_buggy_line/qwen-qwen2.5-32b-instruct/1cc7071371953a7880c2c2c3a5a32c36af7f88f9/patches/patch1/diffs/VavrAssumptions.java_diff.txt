1,12d0
< /*
<  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
<  * the License. You may obtain a copy of the License at
<  *
<  * http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
<  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
<  * specific language governing permissions and limitations under the License.
<  *
<  * Copyright 2017-2022 the original author or authors.
<  */
24,34c12,25
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
< import org.assertj.core.util.CheckReturnValue;
---
> 
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.Implementation;
> import net.bytebuddy.matcher.ElementMatchers;
> import net.bytebuddy.pool.TypePool;
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
> import net.bytebuddy.implementation.auxiliary.AuxiliaryType;
> import net.bytebuddy.pool.TypePool.Default;
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy.ForClassLoader;
40,42c31,33
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
< import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
---
> import static net.bytebuddy.matcher.ElementMatchers.any;
> 
> import org.assertj.core.util.CheckReturnValue;
46,49d36
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
74,83d60
<     /**
<      * Creates a new instance of <code>{@link EitherAssert}</code> assumption.
<      *
<      * @param <LEFT>  type of the left value contained in the {@link Either}.
<      * @param <RIGHT> type of the right value contained in the {@link Either}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
88,96d64
<     /**
<      * Creates a new instance of <code>{@link LazyAssert}</code> assumption.
<      *
<      * @param <VALUE>    type of the value contained in the {@link Lazy}.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
101,110d68
<     /**
<      * Creates a new instance of <code>{@link MapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the map.
<      * @param <V>    the type of values in the map.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
115,124d72
<     /**
<      * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the multimap.
<      * @param <V>    the type of values in the multimap.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
129,137d76
<     /**
<      * Creates a new instance of <code>{@link OptionAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link Option}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
142,163d80
<     /**
<      * Creates a new instance of <code>{@link SetAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Set}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {
<         return asAssumption(SetAssert.class, Set.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link SeqAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Seq}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
168,190d84
<     /**
<      * Creates a new instance of <code>{@link TryAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.
<      * @param actual    the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {
<         return asAssumption(TryAssert.class, Try.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.
<      *
<      * @param <INVALID> type of the value in the case of the invalid {@link Validation}.
<      * @param <VALID>   type of the value in the case of the valid {@link Validation}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
196,201d89
<                                                               Class<ACTUAL> actualType,
<                                                               Object actual) {
<         return asAssumption(assertionType, array(actualType), array(actual));
<     }
< 
<     private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType,
213d100
<     @SuppressWarnings("unchecked")
226c113
<                 .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))
---
>                 .load(VavrAssumptions.class.getClassLoader(), ForClassLoader.of(VavrAssumptions.class.getClassLoader()))
257d143
<     // for method that change the object under test (e.g. extracting)
259d144
<         // @format:off
268,269d152
<         // @format:on
<         // should not arrive here
272a156,212
>     private static <ASSERTION, ACTUAL> ASSERTION asAssumption(Class<ASSERTION> assertionType,
>                                                               Class<?> actualType,
>                                                               Object actual) {
>         return asAssumption(assertionType, new Class<?>[]{actualType}, new Object[]{actual});
>     }
> 
>     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {
>         SimpleKey cacheKey = new SimpleKey(assertClass);
>         return (Class<ASSERTION>) CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),
>                 cacheKey,
>                 () -> generateAssumptionClass(assertClass));
>     }
> 
>     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {
>         return BYTE_BUDDY.subclass(assertionType)
>                 .method(ElementMatchers.any())
>                 .intercept(ASSUMPTION)
>                 .make()
>                 .load(VavrAssumptions.class.getClassLoader(), ClassLoadingStrategy.ForClassLoader.of(VavrAssumptions.class.getClassLoader()))
>                 .getLoaded();
>     }
> 
>     private static final class SimpleKey {
>         private final Class<?> key;
> 
>         public SimpleKey(Class<?> key) {
>             this.key = key;
>         }
> 
>         @Override
>         public boolean equals(Object o) {
>             if (this == o) return true;
>             if (o == null || getClass() != o.getClass()) return false;
>             SimpleKey that = (SimpleKey) o;
>             return key.equals(that.key);
>         }
> 
>         @Override
>         public int hashCode() {
>             return key.hashCode();
>         }
>     }
> 
>     private static final class TypeCache<K> {
>         private final java.util.Map<K, Object> cache = new java.util.HashMap<>();
> 
>         public Object findOrInsert(ClassLoader classLoader, K key, java.util.function.Supplier<Object> supplier) {
>             return cache.computeIfAbsent(key, k -> supplier.get());
>         }
>     }
> 
>     private static final TypeCache<SimpleKey> CACHE = new TypeCache<>();
> 
>     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)
>             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
> 
>     private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
