23,25d22
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.config.ConfigDir;
27,28c24,25
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
---
> import org.spongepowered.api.event.game.state.GameStartingServerEvent;
> import org.spongepowered.api.event.game.state.GameStartedServerEvent;
30,31c27,28
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
---
> import org.spongepowered.api.network.ChannelBinding;
> import org.spongepowered.api.network.ChannelBinding.ChannelListener;
32a30
> import org.spongepowered.api.text.Text;
37d34
< import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;
40c37
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
---
> @Plugin(id = PomData.ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
42c39
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<org.spongepowered.api.command.CommandSource> {
53d49
<     //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
62,63c58
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
<         //load config and database
---
>     public void onPreInit(GameStartingServerEvent preInitEvent) {
73,74c68,69
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
---
>     public void onInit(GameStartedServerEvent initEvent) {
>         if (!initialized) {
75a71
>         }
77c73
<         CommandManager cmdManager = Sponge.getCommandManager();
---
>         org.spongepowered.api.command.CommandManager cmdManager = Sponge.getCommandManager();
79d74
<         //command and event register
84,85c79
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
---
>         cmdManager.register(this, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
89,96c83,89
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
<         String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
<         String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         ChannelBinding.RawChannel updateChannel = Sponge.getGame().getEventManager().getChannelBuilder(ARTIFACT_ID + ":" + UPDATE_SKIN_CHANNEL, byte[].class)
>                 .createBoundChannel();
>         ChannelBinding.RawChannel permChannel = Sponge.getGame().getEventManager().getChannelBuilder(ARTIFACT_ID + ":" + CHECK_PERM_CHANNEL, byte[].class)
>                 .createBoundChannel();
> 
>         updateChannel.register(this, (ChannelListener<Byte[]>) (source, data) -> injector.getInstance(UpdateSkinListener.class).onData(source, data));
>         permChannel.register(this, (ChannelListener<Byte[]>) (source, data) -> injector.getInstance(CheckPermissionListener.class).onData(source, data);
108,109c101
<     @Override
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
---
>     public boolean hasSkinPermission(org.spongepowered.api.command.CommandSource invoker, UUID uuid, boolean sendMessage) {
114d105
<         //disallow - not whitelisted or blacklisted
126d116
<     @Override
131d120
<     @Override
136d124
<     @Override
141,142c129
<     @Override
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(org.spongepowered.api.command.CommandSource receiver, String key) {
