```java
package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinSelector;
import com.google.inject.Inject;

import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.CommandException;
import org.spongepowered.api.command.Command;
import org.spongepowered.api.command.CommandCallable;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

import java.util.Optional;

public class SelectCommand implements CommandCallable, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    SelectCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult process(CommandSource src, String arguments) throws CommandException {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        Optional<String> skinNameOptional = args.getOne("skinName");
        if (!skinNameOptional.isPresent()) {
            plugin.sendMessage(src, "invalid-skin-name");
            return CommandResult.empty();
        }

        String skinName = skinNameOptional.get().toLowerCase().replace("skin-", "");

        try {
            int targetId = Integer.parseInt(skinName);
            Player receiver = (Player) src;
            Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
        } catch (NumberFormatException numberFormatException) {
            plugin.sendMessage(src, "invalid-skin-name");
        }

        return CommandResult.success();
    }

    @Override
    public List<String> getSuggestions(CommandSource src, String arguments, CommandContext context) throws CommandException {
        return Collections.emptyList();
    }

    @Override
    public boolean testPermission(CommandSource src) {
        return src.hasPermission(PomData.ARTIFACT_ID + ".command.skinselect.base");
    }

    @Override
    public String getHelp(CommandSource src) {
        return "Select a skin by ID.";
    }

    @Override
    public String getShortDescription(CommandSource src) {
        return "Select a skin by ID.";
    }

    @Override
    public String getUsage(CommandSource src) {
        return "/select <skinName>";
    }
}
```
