1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
136,137c120
<         getChangeRequestCall(zoneName, changeRequestId, options)
<             .queue(batch, toJsonCallback(callback));
---
>         getChangeRequestCall(zoneName, changeRequestId, options).queue(batch, toJsonCallback(callback));
211c194
<         .create(this.options.getProjectId(), zone)
---
>         .create(this.options.getProjectId(), this.options.getProjectId(), zone)
232c215
<         .get(this.options.getProjectId(), zoneName)
---
>         .get(this.options.getProjectId(), this.options.getProjectId(), zoneName)
249c232
<         .list(this.options.getProjectId())
---
>         .list(this.options.getProjectId(), this.options.getProjectId())
271c254,270
<     return dns.managedZones().delete(this.options.getProjectId(), zoneName);
---
>     return dns.managedZones()
>         .delete(this.options.getProjectId(), this.options.getProjectId(), zoneName);
>   }
> 
>   @Override
>   public Project getProject(Map<Option, ?> options) throws DnsException {
>     try {
>       return getProjectCall(options).execute();
>     } catch (IOException ex) {
>       throw translate(ex, true);
>     }
>   }
> 
>   private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {
>     return dns.projects()
>         .get(this.options.getProjectId(), this.options.getProjectId())
>         .setFields(Option.FIELDS.getString(options));
289c288
<         .list(this.options.getProjectId(), zoneName)
---
>         .list(this.options.getProjectId(), this.options.getProjectId(), zoneName)
292d290
<         .setMaxResults(Option.PAGE_SIZE.getInt(options))
298c296,297
<   public Project getProject(Map<Option, ?> options) throws DnsException {
---
>   public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)
>       throws DnsException {
300c299,300
<       return getProjectCall(options).execute();
---
>       ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();
>       return ListResult.of(response.getNextPageToken(), response.getChanges());
306,319c306,316
<   private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {
<     return dns.projects()
<         .get(this.options.getProjectId())
<         .setFields(Option.FIELDS.getString(options));
<   }
< 
<   @Override
<   public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)
<       throws DnsException {
<     try {
<       return applyChangeRequestCall(zoneName, changeRequest, options).execute();
<     } catch (IOException ex) {
<       throw translate(ex, false);
<     }
---
>   private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<DnsRpc.Option, ?> options)
>       throws IOException {
>     // options are fields, page token, page size, sort order
>     Dns.Changes.List request =
>         dns.changes()
>             .list(this.options.getProjectId(), this.options.getProjectId(), zoneName)
>             .setFields(Option.FIELDS.getString(options))
>             .setMaxResults(Option.PAGE_SIZE.getInt(options))
>             .setPageToken(Option.PAGE_TOKEN.getString(options));
>     if (Option.SORTING_ORDER.getString(options) != null) {
>       request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));
321,326c318
< 
<   private Dns.Changes.Create applyChangeRequestCall(
<       String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {
<     return dns.changes()
<         .create(this.options.getProjectId(), zoneName, changeRequest)
<         .setFields(Option.FIELDS.getString(options));
---
>     return request;
330,331c322,323
<   public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)
<       throws DnsException {
---
>   public Change getChangeRequest(
>       String zoneName, String changeRequestId, Map<Option, ?> options) throws DnsException {
352c344
<         .get(this.options.getProjectId(), zoneName, changeRequestId)
---
>         .get(this.options.getProjectId(), this.options.getProjectId(), zoneName, changeRequestId)
357,358c349,350
<   public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)
<       throws DnsException {
---
>   public Change applyChangeRequest(
>       String zoneName, Change changeRequest, Map<Option, ?> options) throws DnsException {
360,361c352
<       ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();
<       return ListResult.of(response.getNextPageToken(), response.getChanges());
---
>       return applyChangeRequestCall(zoneName, changeRequest, options).execute();
363c354
<       throw translate(ex, true);
---
>       throw translate(ex, false);
367,380c358,362
<   private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)
<       throws IOException {
<     // options are fields, page token, page size, sort order
<     Dns.Changes.List request =
<         dns.changes()
<             .list(this.options.getProjectId(), zoneName)
<             .setFields(Option.FIELDS.getString(options))
<             .setMaxResults(Option.PAGE_SIZE.getInt(options))
<             .setPageToken(Option.PAGE_TOKEN.getString(options));
<     if (Option.SORTING_ORDER.getString(options) != null) {
<       // todo check and change if more sorting options are implemented, issue #604
<       request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));
<     }
<     return request;
---
>   private Dns.Changes.Create applyChangeRequestCall(
>       String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {
>     return dns.changes()
>         .create(this.options.getProjectId(), this.options.getProjectId(), zoneName, changeRequest)
>         .setFields(Option.FIELDS.getString(options);
