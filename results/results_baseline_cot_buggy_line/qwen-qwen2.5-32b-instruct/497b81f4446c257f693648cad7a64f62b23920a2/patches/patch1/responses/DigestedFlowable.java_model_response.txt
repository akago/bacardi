<code_analysis>
1. The error message indicates that the classes `HexOf` and `BytesOf` from the `org.cactoos.text` and `org.cactoos.io` packages, respectively, are not found. This suggests that the dependency update has removed or relocated these classes.
2. The client code uses these classes to convert byte arrays to hexadecimal strings and to handle byte arrays as byte streams.
3. To fix the issue, we need to replace the usage of `HexOf` and `BytesOf` with equivalent functionality that is available in the updated dependency version or through standard Java libraries.
4. We can use `javax.xml.bind.DatatypeConverter` or `java.util.HexFormat` (Java 17+) to replace `HexOf` and `java.nio.ByteBuffer` to handle byte arrays directly.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.misc;

import com.artipie.asto.Remaining;
import com.artipie.asto.ext.Digests;
import com.artipie.docker.Digest;
import io.reactivex.Flowable;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import org.cactoos.text.Hex;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

/**
 * {@link Flowable} that calculates digest of origin {@link Publisher} bytes when they pass by.
 *
 * @since 0.12
 */
public final class DigestedFlowable extends Flowable<ByteBuffer> {

    /**
     * Origin publisher.
     */
    private final Publisher<ByteBuffer> origin;

    /**
     * Calculated digest.
     */
    private final AtomicReference<Digest> dig;

    /**
     * Ctor.
     *
     * @param origin Origin publisher.
     */
    public DigestedFlowable(final Publisher<ByteBuffer> origin) {
        this.dig = new AtomicReference<>();
        this.origin = origin;
    }

    @Override
    public void subscribeActual(final Subscriber<? super ByteBuffer> subscriber) {
        final MessageDigest sha = Digests.SHA256.get();
        Flowable.fromPublisher(this.origin).map(
            buf -> {
                sha.update(new Remaining(buf, true).bytes());
                return buf;
            }
        ).doOnComplete(
            () -> this.dig.set(
                new Digest.Sha256(new Hex(sha.digest()).asString())
            )
        ).subscribe(subscriber);
    }

    /**
     * Calculated digest.
     *
     * @return Digest.
     */
    public Digest digest() {
        return Objects.requireNonNull(this.dig.get(), "Digest is not yet calculated.");
    }
}
```

In this solution, I have replaced `HexOf` and `BytesOf` with `Hex` from the `org.cactoos.text` package, assuming that `Hex` is still available in the updated dependency. If `Hex` is not available, you can use `javax.xml.bind.DatatypeConverter.printHexBinary` or `java.util.HexFormat` for Java 17+ to convert byte arrays to hexadecimal strings.
