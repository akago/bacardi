38,39c38
<  * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which
<  * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.
---
>  * See {@code AgentConfiguration.name} for more information on the return value.
112c111,112
<      * @return the translated {@code String}
---
>      * @return a a {@code String} instance with the specified type and value
>      * @throws IllegalArgumentException if the type could not be mapped to a {@code Variable} implementation
124,164d123
<      * Returns the root OIDs of the bindings.
<      *
<      * @param bindings the variable bindings
<      * @return the roots of the specified variable bindings
<      */
<     private static List<OID> getRoots(final SortedMap<OID, Variable> bindings) {
<         final List<OID> potentialRoots = new ArrayList<>(bindings.size());
< 
<         OID last = null;
<         for (final OID oid : bindings.keySet()) {
<             if (last != null) {
<                 int min = Math.min(oid.size(), last.size());
<                 while (min > 0) {
<                     if (oid.leftMostCompare(min, last) == 0) {
<                         OID root = new OID(last.getValue(), 0, min);
<                         potentialRoots.add(root);
<                         break;
<                     }
<                     min--;
<                 }
<             }
<             last = oid;
<         }
<         Collections.sort(potentialRoots);
< 
<         final List<OID> roots = new ArrayList<>(potentialRoots.size());
<         potentialRoots.stream().filter(potentialRoot -> potentialRoot.size() > 0).forEach(potentialRoot -> {
<             OID trimmedPotentialRoot = new OID(potentialRoot.getValue(), 0, potentialRoot.size() - 1);
<             while (trimmedPotentialRoot.size() > 0 && Collections.binarySearch(potentialRoots, trimmedPotentialRoot) < 0) {
<                 trimmedPotentialRoot.trim(1);
<             }
<             if (trimmedPotentialRoot.size() == 0 && !roots.contains(potentialRoot)) {
<                 roots.add(potentialRoot);
<             }
<         });
< 
<         log.trace("identified roots {}", roots);
<         return roots;
<     }
< 
<     /**
170c129
<      * @throws IllegalArgumentException if the type could not be mapped to a {@link Variable} implementation
---
>      * @throws IllegalArgumentException if the type could not be mapped to a {@code Variable} implementation
256d214
< 
259,260d216
<                 final OctetString context = new OctetString(String.valueOf(vlan));
< 
265c221
<                     DefaultMOContextScope scope = new DefaultMOContextScope(context, root, true, root.nextPeer(), false);
---
>                     DefaultMOContextScope scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), root, true, root.nextPeer(), false);
270c226
<                             scope = new DefaultMOContextScope(context, variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
---
>                             scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
276c232
<                                 registerGroupAndContext(group, context);
---
>                                 registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
281c237
<                         registerGroupAndContext(group, context);
---
>                         registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
304c260,264
<      * Creates the {@link StaticMOGroup} with all information necessary to register it to the server.
---
>      * Creates a list of {@link VariableBinding} out of a mapping of {@link OID} and {@link Variable}.
>      *
>      * @param variableBindings mapping of {@link OID} and {@link Variable}.
>      * @param root             root SNMP OID.
>      * @return list of {@link VariableBinding}.
306,307c266,494
<     private void createAndRegisterDefaultContext() {
<         try (final FileInputStream fileInputStream = new FileInputStream(configuration.getWalk());
---
>     private ArrayList<VariableBinding> generateSubtreeBindings(final SortedMap<OID, Variable> variableBindings, final OID root) {
>         return variableBindings.entrySet().stream().filter(binding -> binding.getKey().size() >= root.size()).
>                 filter(binding -> binding.getKey().leftMostCompare(root.size(), root) == 0).
>                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new));
>     }
> 
>     /**
>      * Registers a {@link ManagedObject} to the server with an empty {@link OctetString} community context.
>      *
>      * @param group {@link ManagedObject} to register.
>      */
>     private void registerDefaultGroups(final MOGroup group) {
>         groups.add(group);
>         registerGroupAndContext(group, new OctetString("");
>     }
> 
>     /**
>      * Registers a {@link ManagedObject} to the server with a {@link OctetString} community context.
>      *
>      * @param group   {@link ManagedObject} to register.
>      * @param context community context.
>      */
>     private void registerGroupAndContext(final MOGroup group, final OctetString context) {
>         try {
>             if (context == null || context.toString().equals("")) {
>                 MOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
>                 ManagedObject other = server.lookup(new DefaultMOQuery(contextScope, false);
>                 if (other != null) {
>                     log.warn("group {} already existed", group);
>                     return;
>                 }
> 
>                 contextScope = new DefaultMOContextScope(null, group.getScope());
>                 other = server.lookup(new DefaultMOQuery(contextScope, false);
>                 if (other != null) {
>                     registerHard(group);
>                     return;
>                 }
>                 this.server.register(group, new OctetString());
>             } else {
>                 this.server.register(group, context);
>             }
>         } catch (final DuplicateRegistrationException e) {
>             log.error("duplicate registrations are not allowed", e);
>         }
>     }
> 
>     /**
>      * Sets the private registry value of {@link DefaultMOServer} via reflection.
>      * FIXME
>      * If there is any possibility to avoid this, then replace!
>      *
>      * @param group {@link ManagedObject} to register.
>      */
>     private void registerHard(final MOGroup group) {
>         try {
>             final Field registry = server.getClass().getDeclaredField("registry");
>             registry.setAccessible(true);
>             final SortedMap<MOScope, ManagedObject<?>> reg = server.getRegistry();
>             DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
>             reg.put(contextScope, group);
>             registry.set(server, reg);
>         } catch (NoSuchFieldException | IllegalAccessException e) {
>             log.warn("could not set server registry", e);
>         }
>     }
> 
>     /**
>      * Reads all variable bindings using {@link #VARIABLE_BINDING_PATTERN}.
>      *
>      * @param reader the reader to read the bindings from.
>      * @return the map of oid to variable binding.
>      */
>     private Map<OID, Variable> readVariableBindings(final BufferedReader reader) throws IOException {
>         final Map<OID, Variable> bindings = new HashMap<>();
>         String line;
>         while ((line = reader.readLine()) != null) {
>             final Matcher matcher = VARIABLE_BINDING_PATTERN.matcher(line);
>             if (matcher.matches()) {
>                 final OID oid = new OID(matcher.group(1).replace("iso", ".1"));
> 
>                 try {
>                     final Variable variable;
>                     if (matcher.group(7) == null) {
>                         variable = SnmpmanAgent.getVariable("STRING", "\"\"");
>                     } else {
>                         variable = SnmpmanAgent.getVariable(matcher.group(6), matcher.group(7));
>                     }
> 
>                     bindings.put(oid, variable);
>                     log.trace("added binding with oid \"{}\" and variable \"{}\"", oid, variable);
>                 } catch (final Exception e) {
>                     log.warn("could not parse line \"{}\" of walk file {} with exception: {}", line, configuration.getWalk().getCanonicalPath(), e.getMessage());
>                 }
>             } else {
>                 log.warn("could not parse line \"{}\" of walk file {}", line, configuration.getWalk().getAbsolutePath());
>             }
>         }
>         return bindings;
>     }
> 
>     /**
>      * Unregisters all default managed objects in the specified context {@code ctx}.
>      *
>      * @param ctx the context from which all default managed objects should be unregistred
>      */
>     private void unregisterDefaultManagedObjects(final OctetString ctx) {
>         final OID startOID = new OID(".1");
>         final DefaultMOContextScope hackScope = new DefaultMOContextScope(ctx, startOID, true, startOID.nextPeer(), false);
>         ManagedObject query;
>         while ((query = server.lookup(new DefaultMOQuery(hackScope, false)) != null) {
>             server.unregister(query, ctx);
>         }
>     }
> 
>     /**
>      * Returns the variable bindings for a device configuration and a list of bindings.
>      * <p>
>      * In this step the {@link ModifiedVariable} instances will be created as a wrapper for dynamic variables.
>      *
>      * @param device   the device configuration
>      * @param bindings the bindings as the base
>      * @return the variable bindings for the specified device configuration
>      */
>     @SuppressWarnings("unchecked")
>     private SortedMap<OID, Variable> getVariableBindings(final Device device, final Map<OID, Variable> bindings, final OctetString context) {
>         log.trace("get variable bindings for agent \"{}\"", configuration.getName());
>         final SortedMap<OID, Variable> result = new TreeMap<>();
>         for (final Map.Entry<OID, Variable> binding : bindings.entrySet()) {
>             final List<VariableModifier> modifiers;
> 
>             modifiers = device.getModifiers().stream().filter(modifier -> modifer.isApplicable(binding.getKey())).collect(Collectors.toList());
> 
>             if (modifiers.isEmpty()) {
>                 result.put(binding.getKey(), binding.getValue());
>             } else {
>                 log.trace("created modified variable for OID {}", binding.getKey());
>                 try {
>                     if (modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).anyMatch(m -> m.getModifier() instanceof CommunityContextModifier)) {
>                         final List<CommunityContextModifier> contextModifiers = modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).filter(m -> m.getModifier() instanceof CommunityContextModifier).map(m -> (CommunityContextModifier) m.getModifier()).collect(Collectors.toList());
>                         for (final CommunityContextModifier contextModifier : contextModifiers) {
>                             result.putAll(contextModifier.getVariableBindings(context, binding.getKey()));
>                         }
>                     } else {
>                         result.put(binding.getKey(), new ModifiedVariable(binding.getValue(), modifiers));
>                     }
>                 } catch (final ClassCastException e) {
>                     log.error("could not create variable binding for " + binding.getKey().toString() + " and file " + configuration.getWalk().getAbsolutePath(), e);
>                 }
>             }
> 
>         }
>         return result;
>     }
> 
>     @Override
>     protected void unregisterManagedObjects() {
>         log.trace("unregistered managed objects for agent \"{}\"", agent);
>         for (final ManagedObject mo : groups) {
>             server.unregister(mo, null);
>         }
>     }
> 
>     @Override
>     protected void addUsmUser(final USM usm) {
>         log.trace("adding usm user {} for agent \"{}\"", usm.toString(), configuration.getName());
>         // do nothing here
>     }
> 
>     @Override
>     protected void addNotificationTargets(final SnmpTargetMIB snmpTargetMIB, final SnmpNotificationMIB snmpNotificationMIB) {
>         log.trace("adding notification targets {}, {} for agent \"{}\"", snmpTargetMIB.toString(), snmpNotificationMIB.toString(), configuration.getName());
>         // do nothing here
>     }
> 
>     @Override
>     protected void addViews(final VacmMIB vacmMIB) {
>         log.trace("adding views in the vacm MIB {} for agent \"{}\"", vacmMib.toString(), configuration.getName());
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_SNMPv1, new OctetString(configuration.getCommunity()), new OctetString("v1v2group"), StorageType.nonVolatile);
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_SNMPv2c, new OctetString(configuration.getCommunity()), new OctetString("v1v2group"), StorageType.nonVolatile);
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_USM, new OctetString("SHADES"), new OctetString("v3group"), StorageType.nonVolatile);
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_USM, new OctetString("TEST"), new OctetString("v3test"), StorageType.nonVolatile);
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_USM, new OctetString("SHA"), new OctetString("v3restricted"), StorageType.nonVolatile);
>         vacmMib.addGroup(SecurityModel.SECURITY_MODEL_USM, new OctetString("v3notify"), new OctetString("v3restricted"), StorageType.nonVolatile);
> 
>         // configure community index contexts
>         for (final Long vlan : configuration.getDevice().getVlans()) {
>             vacmMib.addGroup(SecurityModel.SECURITY_MODEL_SNMPv1, new OctetString(configuration.getCommunity() + "@" + vlan), new OctetString("v1v2group"), StorageType.nonVolatile);
>             vacmMib.addGroup(SecurityModel.SECURITY_MODEL_SNMPv2c, new OctetString(configuration.getCommunity() + "@" + vlan), new OctetString("v1v2group"), StorageType.nonVolatile);
>             vacmMib.addAccess(new OctetString("v1v2group"), new OctetString(String.valueOf(vlan)), SecurityModel.SECURITY_MODEL_ANY, SecurityLevel.NOAUTH_NOPRIV, MutableVACM.VACM_MATCH_EXACT, new OctetString("fullReadView"), new OctetString("fullWriteView"), new OctetString("fullNotifyView"), StorageType.nonVolatile);
>         }
> 
>         vacmMib.addViewTreeFamily(new OctetString("fullReadView"), new OID("1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("fullWriteView"), new OID("1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("fullNotifyView"), new OID("1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
> 
>         vacmMib.addViewTreeFamily(new OctetString("restrictedReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("restrictedWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("restrictedNotifyView"), new OID("1.3.6.1.6.3.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
> 
>         vacmMib.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("testReadView"), new OID("1.3.6.1.2.1.1"), new OctetString(), VacmMIB.vacmViewExcluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("testWriteView"), new OID("1.3.6.1.2.1"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>         vacmMib.addViewTreeFamily(new OctetString("testNotifyView"), new OID("1.3.6.1.2"), new OctetString(), VacmMIB.vacmViewIncluded, StorageType.nonVolatile);
>     }
> 
>     @Override
>     @SuppressWarnings("unchecked")
>     protected void initTransportMappings() {
>         log.trace("starting to initialize transport mappings for agent \"{}\"", configuration.getName());
>         transportMappings = new TransportMapping[1];
>         TransportMapping tm = TransportMappings.getInstance().createTransportMapping(configuration.getAddress());
>         transportMappings[0] = tm;
>     }
> 
>     @Override
>     protected void registerManagedObjects() {
>         unregisterDefaultManagedObjects(null);
>         unregisterDefaultManagedObjects(new OctetString());
>         final List<Long> vlans = configuration.getDevice().getVlans();
>         for (final Long vlan : vlans) {
>             unregisterDefaultManagedObjects(new OctetString(String.valueOf(vlan));
>             );
>         }
> 
>         log.trace("registering managed objects for agent \"{}\"", configuration.getName());
>         for (final Long vlan : vlans) {
>             try (final FileInputStream fileInputStream = new FileInputStream(configuration.getWalk();
311c498,499
<             final SortedMap<OID, Variable> variableBindings = this.getVariableBindings(configuration.getDevice(), bindings, new OctetString());
---
>                 final SortedMap<OID, Variable> variableBindings = this.getVariableBindings(configuration.getDevice(), bindings, new OctetString(String.valueOf(vlan)));
> 
315c503,521
<                 registerDefaultGroups(group);
---
>                     final Iterable<VariableBinding> subtree = generateSubtreeBindings(variableBindings, root);
>                     DefaultMOContextScope scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), root, true, root.nextPeer(), false);
>                     ManagedObject mo = server.lookup(new DefaultMOQuery(scope, false);
>                     if (mo != null) {
>                         for (final VariableBinding variableBinding : subtree) {
>                             group = new MOGroup(variableBinding.getOid(), variableBinding.getOid(), variableBinding.getVariable());
>                             scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
>                             mo = server.lookup(new DefaultMOQuery(scope, false);
>                             if (mo != null) {
>                                 log.warn("could not register single OID at {} because ManagedObject {} is already registered.", variableBinding.getOid(), mo);
>                             } else {
>                                 groups.add(group);
>                                 registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
>                             }
>                         }
>                     } else {
>                         groups.add(group);
>                         registerGroupAndContext(group, new OctetString(String.valueOf(vlan));
>                     }
322a529,540
>         createAndRegisterDefaultContext();
>     }
> 
>     private MOGroup createGroup(final OID root, final SortedMap<OID, Variable> variableBindings) {
>         final SortedMap<OID, Variable> subtree = new TreeMap<>();
>         variableBindings.entrySet().stream().filter(binding -> binding.getKey().size() >= root.size()).filter(
>                 binding -> binding.getKey().leftMostCompare(root.size(), root) == 0).forEach(
>                         binding -> subtree.put(binding.getKey(), binding.getValue()
>         );
> 
>         return new MOGroup(root, subtree);
>     }
325,329c543
<      * Creates a list of {@link VariableBinding} out of a mapping of {@link OID} and {@link Variable}.
<      *
<      * @param variableBindings mapping of {@link OID} and {@link Variable}.
<      * @param root             root SNMP OID.
<      * @return list of {@link VariableBinding}.
---
>      * Creates the {@link StaticMOGroup} with all information necessary to register it to the server.
331,334c545,560
<     private ArrayList<VariableBinding> generateSubtreeBindings(final SortedMap<OID, Variable> variableBindings, final OID root) {
<         return variableBindings.entrySet().stream().filter(binding -> binding.getKey().size() >= root.size()).
<                 filter(binding -> binding.getKey().leftMostCompare(root.size(), root) == 0).
<                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new));
---
>     private void createAndRegisterDefaultContext() {
>         try (final FileInputStream fileInputStream = new FileInputStream(configuration.getWalk();
>              final BufferedReader reader = new BufferedReader(new InputStreamReader(fileInputStream, DEFAULT_CHARSET))) {
> 
>             Map<OID, Variable> bindings = readVariableBindings(reader);
>             final SortedMap<OID, Variable> variableBindings = this.getVariableBindings(configuration.getDevice(), bindings, new OctetString());
>             final List<OID> roots = SnmpmanAgent.getRoots(variableBindings);
>             for (final OID root : roots) {
>                 MOGroup group = createGroup(root, variableBindings);
>                 registerDefaultGroups(group);
>             }
>         } catch (final FileNotFoundException e) {
>             log.error("walk file {} not found", configuration.getWalk().getAbsolutePath());
>         } catch (final IOException e) {
>             log.error("could not read walk file " + configuration.getWalk().getAbsolutePath(), e);
>         }
344c570
<         registerGroupAndContext(group, new OctetString(""));
---
>         registerGroupAndContext(group, new OctetString("");
356,357c582,583
<                 MOContextScope contextScope = new DefaultMOContextScope(new OctetString(), group.getScope());
<                 ManagedObject other = server.lookup(new DefaultMOQuery(contextScope, false));
---
>                 MOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
>                 ManagedObject other = server.lookup(new DefaultMOQuery(contextScope, false);
364c590
<                 other = server.lookup(new DefaultMOQuery(contextScope, false));
---
>                 other = server.lookup(new DefaultMOQuery(contextScope, false);
389c615
<             final SortedMap<MOScope, ManagedObject> reg = server.getRegistry();
---
>             final SortedMap<MOScope, ManagedObject<?>> reg = server.getRegistry();
441c667
<         while ((query = server.lookup(new DefaultMOQuery(hackScope, false))) != null) {
---
>         while ((query = server.lookup(new DefaultMOQuery(hackScope, false)) != null) {
462c688
<             modifiers = device.getModifiers().stream().filter(modifier -> modifier.isApplicable(binding.getKey())).collect(Collectors.toList());
---
>             modifiers = device.getModifiers().stream().filter(modifier -> modifer.isApplicable(binding.getKey())).collect(Collectors.toList());
572c798
<                 getAgent().getContextEngineID(),        // local engine ID
---
>                 getAgent().getContextEngineID,        // local engine ID
