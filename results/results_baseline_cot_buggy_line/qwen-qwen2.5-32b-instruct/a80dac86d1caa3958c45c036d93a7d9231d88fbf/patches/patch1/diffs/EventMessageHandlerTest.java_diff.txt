3,6d2
< import ch.qos.logback.classic.Level;
< import ch.qos.logback.classic.Logger;
< import ch.qos.logback.classic.spi.ILoggingEvent;
< import ch.qos.logback.core.Appender;
8,9d3
< import com.google.gson.GsonBuilder;
< import org.hamcrest.core.Is;
16a11
> import org.slf4j.Logger;
17a13
> import org.slf4j.event.LoggingEvent;
44d39
< import static org.hamcrest.Matchers.nullValue;
52d46
< import static org.mockito.Mockito.when;
84c78
<     private Appender<ILoggingEvent> mockLogAppender;
---
>     private Appender<LoggingEvent> mockLogAppender;
86c80
<     ArgumentCaptor<ILoggingEvent> loggingEventArgumentCaptor;
---
>     ArgumentCaptor<LoggingEvent> loggingEventArgumentCaptor;
111c105
<         Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
---
>         Logger logger = LoggerFactory.getLogger(EventMessageHandlerTest.class);
120c114
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
123c117
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
141c135
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount, "reason", "fraudulent"))
144d137
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
148,149c141,142
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
162d154
<         assertThat(personalisation.get("paymentExternalId"), is("456"));
163a156
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
173d165
<         assertThat(personalisation.get("unrecognized"), is("no"));
179,181c171,173
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction"));
189c181
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccount))
197,198c189,191
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
212c205
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
216,218c209,211
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction"));
226c219
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
234,251d226
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
<         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
< 
<         eventMessageHandler.processMessages();
< 
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeWonEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
< 
<         var emails = adminEmailsCaptor.getValue();
<         var personalisation = personalisationCaptor.getValue();
< 
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
< 
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
253,272c228,229
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
<     }
< 
<     @Test
<     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
<         var mockQueueMessage = mock(QueueMessage.class);
<         disputeEvent = anEventFixture()
<                 .withEventType(EventType.DISPUTE_EVIDENCE_SUBMITTED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
<                 .withParentResourceExternalId("456")
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
<                 .build();
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
<         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
277c234
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeEvidenceSubmittedEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
---
>         verify(mockNotificationService, atMostOnce()).sendStripeDisputeWonEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
286c243
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
290,292c247,249
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction"));
300c257
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
303a261
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
305c263,264
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.empty());
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.empty());
317c276
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
320a280
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
322c282,283
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
335c296
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
338a300
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
341,342c303,304
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
