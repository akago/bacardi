1,15d0
< /*
<  * Copyright (C) 1999-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
22c7
< import com.hazelcast.map.listener.MapListener;
---
> import com.hazelcast.map.impl.MapEventImpl;
45,48d29
< /**
<  * Clustered implementation of the Cache interface using Hazelcast.
<  *
<  */
55,57d35
<     /**
<      * The map is used for distributed operations such as get, put, etc.
<      */
62,73d39
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
<     private Instant lastPluginClassLoaderWarning = Instant.EPOCH;
<     private final Duration pluginClassLoaderWarningSupression = Duration.ofHours(1);
< 
<     /**
<      * Create a new cache using the supplied named cache as the actual cache implementation
<      *
<      * @param name a name for the cache, which should be unique per vm.
<      * @param cache the cache implementation
<      */
80c46
<     void addEntryListener(final MapListener listener) {
---
>     void addEntryListener(final EntryListener<K, V> listener) {
84,86c50
<     @Override
<     public String addClusteredCacheEntryListener(@Nonnull final ClusteredCacheEntryListener<K, V> clusteredCacheEntryListener, final boolean includeValues, final boolean includeEventsFromLocalNode)
<     {
---
>     public String addClusteredCacheEntryListener(@Nonnull final ClusteredCacheEntryListener<K, V> clusteredCacheEntryListener, final boolean includeValues, final boolean includeEventsFromLocalNode) {
92c56
<                     logger.trace("Processing map evicted event of node '{}'", eventNodeId);
---
>                     logger.trace("Processing map evicted event of node '{}' for key '{}'", eventNodeId, event.getKey());
149d112
<     @Override
156d118
<     @Override
161d122
<     @Override
166d126
<     @Override
174d133
<     @Override
180d138
<     @Override
185d142
<     @Override
190d146
<     @Override
196d151
<     @Override
201d155
<     @Override
206d159
<     @Override
211d163
<     @Override
216d167
<     @Override
221d171
<     @Override
225d174
<         // Instances are likely all loaded by the same class loader. For resource usage optimization, let's test just one, not all.
234d182
<     @Override
239d186
<     @Override
244d190
<     @Override
250d195
<     @Override
255d199
<     @Override
261d204
<     @Override
266d208
<     @Override
271d212
<     @Override
276d216
<     @Override
281d220
<     @Override
316,324d254
<     /**
<      * Clustered caches should not contain instances of classes that are provided by Openfire plugins. These will cause
<      * issues related to class loading when the providing plugin is reloaded. This method verifies if an instance is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
329d258
<             // Try to determine what plugin loaded the offending class.
