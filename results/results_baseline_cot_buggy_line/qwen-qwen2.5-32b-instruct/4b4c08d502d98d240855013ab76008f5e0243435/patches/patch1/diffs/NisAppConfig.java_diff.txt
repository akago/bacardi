65d64
<         @SuppressWarnings("unused")
68,69d66
<         private static final int MAX_AUDIT_HISTORY_SIZE = 50;
< 
84a82,155
>         public Flyway flyway() throws IOException {
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 Flyway flyway = Flyway.configure()
>                                 .dataSource(this.dataSource())
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .classLoader(NisAppConfig.class.getClassLoader())
>                                 .validateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")))
>                                 .load();
> 
>                 return flyway;
>         }
> 
>         @Bean
>         public DataSource dataSource() throws IOException {
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 // replace url parameters with values from configuration
>                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
>                                 configuration.getNetworkInfo().getNetworkName());
> 
>                 final DriverManagerDataSource dataSource = new DriverManagerDataSource();
>                 dataSource.setDriverClassName(prop.getProperty("jdbc.driverClassName"));
>                 dataSource.setUrl(jdbcUrl);
>                 dataSource.setUsername(prop.getProperty("jdbc.username"));
>                 dataSource.setPassword(prop.getProperty("jdbc.password"));
>                 return dataSource;
>         }
> 
>         @Bean
>         @DependsOn("flyway")
>         public SessionFactory sessionFactory() throws IOException {
>                 return SessionFactoryLoader.load(this.dataSource());
>         }
> 
>         @Bean
>         public BlockChain blockChain() {
>                 return new BlockChain(this.blockDao, this.blockChainUpdater());
>         }
> 
>         @Bean
>         public BlockChainServices blockChainServices() {
>                 return new DefaultBlockChainServices(this.blockDao, this.blockTransactionObserverFactory()::createExecuteCommitObserver,
>                                 this.timeProvider(), this.lastBlockHeight(), this.nisConfiguration().getBlockChainConfiguration().getMaxTransactionsPerBlock(),
>                                 this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public BlockChainUpdater blockChainUpdater() {
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public BlockChainContextFactory blockChainContextFactory() {
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
>                                 this.unconfirmedTransactions());
>         }
> 
>         @Bean
>         public NisMain nisMain() {
>                 // initialize network info
>                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
> 
>                 // initialize other globals
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
>                                 this.nisConfiguration());
>         }
> 
>         @Bean
93c164
<                                 configuration.getNetworkName());
---
>                                 configuration.getNetworkInfo().getNetworkName());
103c174
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,112c179,185
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
---
>                 Flyway flyway = Flyway.configure()
>                                 .dataSource(this.dataSource())
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .classLoader(NisAppConfig.class.getClassLoader())
>                                 .validateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")))
>                                 .load();
> 
124c197
<                 return new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());
---
>                 return new BlockChain(this.blockDao, this.blockChainUpdater());
129,130c202,204
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new DefaultBlockChainServices(this.blockDao, this.blockTransactionObserverFactory()::createExecuteCommitObserver,
>                                 this.timeProvider(), this.lastBlockHeight(), this.nisConfiguration().getBlockChainConfiguration().getMaxTransactionsPerBlock(),
>                                 this.nisConfiguration().getForkConfiguration());
306,320d379
<                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
<                 if (this.nisConfiguration().ignoreFees()) {
<                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
<                 } else {
<                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
<                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
<                                                         new BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),
<                                                         new BlockHeight(
<                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
<                                         }));
<                 }
< 
<                 NemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());
<                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
< 
324a384
>         @Bean
326,327c386,387
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
<                 final Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {
---
>         public ImportanceCalculator importanceCalculator() {
>                 final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {
329,330c389,391
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
>                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
>                                 this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);
334,372c395,396
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
<                                 "weighted balance scheme", featureSupplierMap);
<         }
< 
<         @Bean
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
<         public NisConfiguration nisConfiguration() {
<                 return new NisConfiguration();
---
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
>                                 featureSupplierMap);
376,377c400,402
<         public TimeProvider timeProvider() {
<                 return CommonStarter.TIME_PROVIDER;
---
>         public UnlockedAccounts unlockedAccounts() {
>                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
>                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
381,385c406,407
<         public TrustProvider trustProvider() {
<                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
<                 final int TRUST_CACHE_TIME = 15 * 60;
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
<                                 this.timeProvider());
---
>         public CanHarvestPredicate canHarvestPredicate() {
>                 return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);
388,390c410,411
<         @Bean
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
---
>         private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {
>                 return getBlockDependentPoiOptions(height).getMinHarvesterBalance();
393,395c414,415
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
---
>         private static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {
>                 return new PoiOptionsBuilder(height).create();
399,400c419,420
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
---
>         public Supplier<BlockHeight> lastBlockHeight() {
>                 return this.blockChainLastBlockLayer::getLastBlockHeight;
404,405c424,431
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
---
>         public UnconfirmedTransactions unconfirmedTransactions() {
>                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
>                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
>                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
>                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
>                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
>                                 this.nisCache());
>                 return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);
409,410c435,436
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
---
>         public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {
>                 return this.unconfirmedTransactions().asFilter();
414,415c440,441
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
---
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
419,431c445,447
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
<         }
---
>         public NisMain nisMain() {
>                 // initialize network info
>                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
433,435c449,451
<         @Bean
<         public Function<Address, Collection<Address>> cosignatoryLookup() {
<                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
---
>                 // initialize other globals
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
>                                 this.nisConfiguration(), this.blockAnalyzer(), System::exit);
438,441c454
<         @Bean
<         public MosaicIdCache mosaicIdCache() {
<                 return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());
<         }
---
>         // ... (rest of the class remains unchanged)
