<code_analysis>
1. Examine the error message:
   - The error messages indicate that the classes `BytesOf` and `HexOf` from the `org.cactoos.io` and `org.cactoos.text` packages, respectively, are not found. This suggests that the dependency update has removed or changed the location of these classes.
   
2. Review the client code:
   - The problematic areas are the imports and the usage of `HexOf` and `BytesOf` in the `digest()` method.
   - The `HexOf` and `BytesOf` classes are used to convert the byte array to a hexadecimal string representation.

3. Consider potential fixes:
   - Since the classes `HexOf` and `BytesOf` are not available, we need to replace their functionality with standard Java methods.
   - We can use `javax.xml.bind.DatatypeConverter` to convert byte arrays to hexadecimal strings, or use a custom method if the dependency is not available.

4. Plan the necessary changes:
   - Remove the imports for `BytesOf` and `HexOf`.
   - Replace the usage of `HexOf` and `BytesOf` with a method that converts byte arrays to hexadecimal strings.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.misc;

import com.artipie.asto.Remaining;
import com.artipie.asto.ext.Digests;
import com.artipie.docker.Digest;
import io.reactivex.Flowable;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import org.cactoos.text.Hex;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

/**
 * {@link Flowable} that calculates digest of origin {@link Publisher} bytes when they pass by.
 *
 * @since 0.12
 */
public final class DigestedFlowable extends Flowable<ByteBuffer> {

    /**
     * Origin publisher.
     */
    private final Publisher<ByteBuffer> origin;

    /**
     * Calculated digest.
     */
    private final AtomicReference<Digest> dig;

    /**
     * Ctor.
     *
     * @param origin Origin publisher.
     */
    public DigestedFlowable(final Publisher<ByteBuffer> origin) {
        this.dig = new AtomicReference<>();
        this.origin = origin;
    }

    @Override
    public void subscribeActual(final Subscriber<? super ByteBuffer> subscriber) {
        final MessageDigest sha = Digests.SHA256.get();
        Flowable.fromPublisher(this.origin).map(
            buf -> {
                sha.update(new Remaining(buf, true).bytes());
                return buf;
            }
        ).doOnComplete(
            () -> this.dig.set(
                new Digest.Sha256(new Hex(sha.digest()).asString())
            )
        ).subscribe(subscriber);
    }

    /**
     * Calculated digest.
     *
     * @return Digest.
     */
    public Digest digest() {
        return Objects.requireNonNull(this.dig.get(), "Digest is not yet calculated.");
    }
}
```

In this solution, I have replaced the `HexOf` and `BytesOf` classes with the `Hex` class from the `org.cactoos.text` package, which is assumed to be available and provides similar functionality. If `Hex` is also not available, a custom method to convert byte arrays to hexadecimal strings would need to be implemented.
