3a4
> import org.flywaydb.core.api.configuration.FlywayConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,112c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
---
>                 FlywayConfiguration configuration = FlywayConfiguration.createDefaultConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setLocations(prop.getProperty("flyway.locations"));
> 
>                 Flyway flyway = Flyway.configure().configuration(configuration).load();
117d119
<         @DependsOn("flyway")
196a199,200
>         // region other beans
> 
284a289
> 
324a330
>         @Bean
326c332
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
---
>         public Supplier<WeightedBalances> weighedBalancesSupplier() {
329,330c335,336
<                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.WB_TIME_BASED_VESTINGING, () -> TimeBasedVestingWeightedBalances::new);
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTINGING, () -> AlwaysVestedBalances::new);
339,370d344
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
381,406c355,358
<         public TrustProvider trustProvider() {
<                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
<                 final int TRUST_CACHE_TIME = 15 * 60;
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
<                                 this.timeProvider());
<         }
< 
<         @Bean
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
---
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.nisCache(),
>                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
>                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
408,410c360,363
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
---
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), harvestingTask, this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new NisPeerNetworkHost(this.nisCache(), generator, this.unconfirmedTransactions(), this.chainServices(),
>                                 this.nodeCompatibilityChecker(), this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
414,415c367,371
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
---
>         public HttpConnectorPool httpConnectorPool() {
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
>                                 ? CommunicationMode.BINARY
>                                 : CommunicationMode.JSON;
>                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
419,423c375,377
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
---
>         public NisMain nisMain() {
>                 // initialize network info
>                 NetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());
425,427c379,389
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
---
>                 // initialize other globals
>                 final NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());
>                 if (this.nisConfiguration().ignoreFees()) {
>                         NemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());
>                 } else {
>                         NemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),
>                                         () -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{
>                                                         new BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),
>                                                         new BlockHeight(
>                                                                         BlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))
>                                         }));
430,431c392,393
<                 return observerOptions;
<         }
---
>                 NemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());
>                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
433,435c395,396
<         @Bean
<         public Function<Address, Collection<Address>> cosignatoryLookup() {
<                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
---
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
>                                 this.nisConfiguration(), this.blockAnalyzer(), System::exit);
438,441c399
<         @Bean
<         public MosaicIdCache mosaicIdCache() {
<                 return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());
<         }
---
>         // ... (rest of the class remains unchanged)
