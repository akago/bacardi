1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
33,34c10,11
< import org.cactoos.func.IoCheckedFunc;
< import org.cactoos.io.Directory;
---
> import org.cactoos.Func;
> import org.cactoos.IterableOf;
37,38d13
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.SolidScalar;
40d14
< import org.cactoos.text.JoinedText;
53c27
<     private final IoCheckedScalar<Path> path;
---
>     private final Scalar<Path> path;
58c32
<     private final IoCheckedFunc<Path, Boolean> filter;
---
>     private final Func<Path, Boolean> filter;
103,107c77,78
<         this.path = new IoCheckedScalar<>(
<             new SolidScalar<>(pth)
<         );
<         this.filter = new IoCheckedFunc<Path, Boolean>(
<             (file) -> file.toFile().isFile()
---
>         this.path = pth;
>         this.filter = (file) -> file.toFile().isFile()
110,111c81
<                 .matches(file)
<         );
---
>                 .matches(file);
119,123c89
<             new JoinedText(
<                 ".",
<                 Long.toHexString(this.random.nextLong()),
<                 this.ext
<             ).asString()
---
>             String.format("%s.%s", Long.toHexString(this.random.nextLong()), this.ext)
156c122
<                 new Filtered<>(this.filter, new Directory(this.path.value()))
---
>                 new Filtered<>(this.filter, new IterableOf<>(Files.list(this.path.value()).iterator()))
