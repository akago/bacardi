3,6d2
< import ch.qos.logback.classic.Level;
< import ch.qos.logback.classic.Logger;
< import ch.qos.logback.classic.spi.ILoggingEvent;
< import ch.qos.logback.core.Appender;
8,9d3
< import com.google.gson.GsonBuilder;
< import org.hamcrest.core.Is;
16a11
> import org.slf4j.Logger;
17a13,14
> import org.slf4j.event.Level;
> import org.slf4j.event.LoggingEvent;
52d48
< import static org.mockito.Mockito.when;
82a79
> 
84c81,82
<     private Appender<ILoggingEvent> mockLogAppender;
---
>     private LoggingEvent mockLoggingEvent;
> 
86c84
<     ArgumentCaptor<ILoggingEvent> loggingEventArgumentCaptor;
---
>     ArgumentCaptor<LoggingEvent> loggingEventArgumentCaptor;
111c109
<         Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
---
>         Logger logger = LoggerFactory.getLogger(EventMessageHandler.class);
113d110
<         logger.addAppender(mockLogAppender);
141c138
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
144,147d140
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
<         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
< 
151a145,147
>         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
>         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
> 
160,175c156,171
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("paymentExternalId"), is("456"));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022"));
<         assertThat(personalisation.get("disputedAmount"), is("210.00"));
< 
<         assertThat(personalisation.get("fraudulent"), is("yes"));
<         assertThat(personalisation.get("duplicate"), is("no"));
<         assertThat(personalisation.get("credit_not_processed"), is("no"));
<         assertThat(personalisation.get("product_not_received"), is("no"));
<         assertThat(personalisation.get("product_unacceptable"), is("no"));
<         assertThat(personalisation.get("subscription_canceled"), is("no"));
<         assertThat(personalisation.get("unrecognized"), is("no"));
<         assertThat(personalisation.get("paymentAmount"), is(nullValue()));
<         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue()));
---
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("paymentExternalId"), is("456");
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022");
>         assertThat(personalisation.get("disputedAmount"), is("210.00");
> 
>         assertThat(personalisation.get("fraudulent"), is("yes");
>         assertThat(personalisation.get("duplicate"), is("no");
>         assertThat(personalisation.get("credit_not_processed"), is("no");
>         assertThat(personalisation.get("product_not_received"), is("no");
>         assertThat(personalisation.get("product_unacceptable"), is("no");
>         assertThat(personalisation.get("subscription_canceled"), is("no");
>         assertThat(personalisation.get("unrecognized"), is("no");
>         assertThat(personalisation.get("paymentAmount"), is(nullValue());
>         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue());
179,181c175,177
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]");
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction");
189c185
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId))
196a193
> 
205c202
<         var emails = adminEmailsCaptor.getValue();
---
>         var emails = adminEmailCaptor.getValue();
208,212c205,209
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(emails.size(), is(2);
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName());
216,218c213,215
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]");
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction");
226c223
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId))
234,240d230
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
<         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
< 
<         eventMessageHandler.processMessages();
< 
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeWonEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
242,270d231
<         var emails = adminEmailsCaptor.getValue();
<         var personalisation = personalisationCaptor.getValue();
< 
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
< 
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
<     }
< 
<     @Test
<     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
<         var mockQueueMessage = mock(QueueMessage.class);
<         disputeEvent = anEventFixture()
<                 .withEventType(EventType.DISPUTE_EVIDENCE_SUBMITTED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
<                 .withParentResourceExternalId("456")
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
<                 .build();
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
<         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
272c233
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
277c238
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeEvidenceSubmittedEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
---
>         verify(mockNotificationService, atMostOnce()).sendStripeDisputeWonEmail(adminEmailCaptor.capture(), personalisationCaptor.capture());
279c240
<         var emails = adminEmailsCaptor.getValue();
---
>         var emails = adminEmailCaptor.getValue();
282,286c243,247
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(emails.size(), is(2);
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk");
>         assertThat(personalisation.get("serviceName"), is(service.getName());
>         assertThat(personalisation.get("serviceReference"), is("tx ref");
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName());
290,292c251,253
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
---
>         List<LoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]");
>         assertThat(logStatement.get(1).getFormattedMessage(), is("Processed notification email for disputed transaction");
300c261
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId))
303a265
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
304a267
> 
317c280
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId))
320a284
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
321a286
> 
335c300
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId))
338a304
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
341,342c307,308
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
