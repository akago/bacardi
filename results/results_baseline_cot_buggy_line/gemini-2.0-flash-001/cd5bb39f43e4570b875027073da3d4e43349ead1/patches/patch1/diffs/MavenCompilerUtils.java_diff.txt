21c21,27
< import org.codehaus.plexus.util.xml.Xpp3Dom;
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
> 
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
> import org.xml.sax.InputSource;
22a29
> import java.io.StringReader;
70,71c77,79
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
---
>         if (config instanceof org.codehaus.plexus.util.xml.Xpp3Dom) {
>             org.codehaus.plexus.util.xml.Xpp3Dom xpp3DomConfig = (org.codehaus.plexus.util.xml.Xpp3Dom) config;
>             return stream(xpp3DomConfig.getChildren("annotationProcessorPaths"))
83a92,121
>         } else if (config instanceof String) {
>             try {
>                 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
>                 DocumentBuilder builder = factory.newDocumentBuilder();
>                 InputSource is = new InputSource(new StringReader((String) config));
>                 org.w3c.dom.Document doc = builder.parse(is);
>                 NodeList annotationProcessorPathsList = doc.getElementsByTagName("annotationProcessorPaths");
>                 if (annotationProcessorPathsList == null || annotationProcessorPathsList.getLength() == 0) {
>                     return emptySet();
>                 }
> 
>                 return stream(iterable(annotationProcessorPathsList))
>                         .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                         .map(node -> (Element) node)
>                         .flatMap(aggregate -> stream(iterable(aggregate.getElementsByTagName("path"))))
>                         .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                         .map(node -> (Element) node)
>                         .map(processor -> system.createArtifact(
>                                 extractChildValue((Element) processor, "groupId"),
>                                 extractChildValue((Element) processor, "artifactId"),
>                                 extractChildValue((Element) processor, "version"),
>                                 PACKAGING))
>                         .filter(a -> !a.getGroupId().isEmpty())
>                         .filter(a -> !a.getArtifactId().isEmpty())
>                         .filter(a -> !a.getVersion().isEmpty())
>                         .collect(Collectors.toSet());
> 
>             } catch (Exception e) {
>                 throw new RuntimeException("Failed to parse configuration XML", e);
>             }
91a130,155
>     private static <T> Iterable<T> iterable(NodeList nodeList) {
>         return () -> new NodeListIterator(nodeList);
>     }
> 
>     private static class NodeListIterator implements java.util.Iterator<Node> {
>         private final NodeList list;
>         private int index = 0;
> 
>         public NodeListIterator(NodeList list) {
>             this.list = list;
>         }
> 
>         @Override
>         public boolean hasNext() {
>             return index < list.getLength();
>         }
> 
>         @Override
>         public Node next() {
>             if (!hasNext()) {
>                 throw new java.util.NoSuchElementException();
>             }
>             return list.item(index++);
>         }
>     }
> 
99,100c163,164
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
---
>     private static String extractChildValue(org.codehaus.plexus.util.xml.Xpp3Dom node, String name) {
>         final org.codehaus.plexus.util.xml.Xpp3Dom child = node.getChild(name);
102a167,175
> 
>     private static String extractChildValue(Element node, String name) {
>         NodeList children = node.getElementsByTagName(name);
>         if (children == null || children.getLength() == 0) {
>             return "";
>         }
>         Node child = children.item(0);
>         return child == null ? "" : child.getTextContent();
>     }
