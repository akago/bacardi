25,31d24
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
68a62,71
> import com.google.cloud.resourcemanager.v3.Project;
> import com.google.cloud.resourcemanager.v3.Policy;
> import com.google.cloud.resourcemanager.v3.Binding;
> import com.google.cloud.resourcemanager.v3.TestIamPermissionsResponse;
> import com.google.cloud.resourcemanager.v3.TestIamPermissionsRequest;
> import com.google.cloud.resourcemanager.v3.SetIamPolicyRequest;
> import com.google.longrunning.Operation;
> import com.google.protobuf.InvalidProtocolBufferException;
> import com.google.protobuf.util.JsonFormat;
> 
218c221
<                 replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));
---
>                 replace(projectIdFromUri(path), fromJson(requestBody, Project.newBuilder()).build());
238c241
<       return create(jsonFactory.fromString(requestBody, Project.class));
---
>       return create(fromJson(requestBody, Project.newBuilder()).build());
245a249,250
>           SetIamPolicyRequest.Builder setIamPolicyRequestBuilder = SetIamPolicyRequest.newBuilder();
>           JsonFormat.parser().merge(requestBody, setIamPolicyRequestBuilder);
248c253
<               jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());
---
>               setIamPolicyRequestBuilder.getPolicy());
249a255,256
>           TestIamPermissionsRequest.Builder testIamPermissionsRequestBuilder = TestIamPermissionsRequest.newBuilder();
>           JsonFormat.parser().merge(requestBody, testIamPermissionsRequestBuilder);
252,254c259
<               jsonFactory
<                   .fromString(requestBody, TestIamPermissionsRequest.class)
<                   .getPermissions());
---
>               testIamPermissionsRequestBuilder.getPermissionsList());
285c290
<                     jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
---
>                     jsonFactory.toString(new Operation().setDone(true).setResponse(com.google.protobuf.Any.pack(project))));
289c294
<                     "Error when serializing project " + project.getProjectId());
---
>                     "Error when serializing project " + project.getName());
389c394
<     if (project.getProjectId() == null) {
---
>     if (project.getName() == null) {
392c397,398
<     if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {
---
>     String projectId = project.getName();
>     if (!isValidIdOrLabel(projectId, 6, 30)) {
394c400
<           + project.getProjectId()
---
>           + projectId
401,402c407,409
<     if (project.getName() != null) {
<       for (char c : project.getName().toCharArray()) {
---
>     String displayName = project.getDisplayName();
>     if (displayName != null) {
>       for (char c : displayName.toCharArray()) {
405c412
<               + project.getProjectId()
---
>               + projectId
413,415c420,423
<     if (project.getLabels() != null) {
<       if (project.getLabels().size() > 256) {
<         return "Project " + project.getProjectId() + " exceeds the limit of 256 labels.";
---
>     Map<String, String> labelsMap = project.getLabels();
>     if (labelsMap != null) {
>       if (labelsMap.size() > 256) {
>         return "Project " + projectId + " exceeds the limit of 256 labels.";
417c425
<       for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {
---
>       for (Map.Entry<String, String> entry : labelsMap.entrySet()) {
421c429
<               + project.getProjectId()
---
>               + projectId
432a441
>     if (value == null) return false;
449,451c458,461
<       project.setLifecycleState("ACTIVE");
<       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
<       project.setCreateTime(
---
>       String projectId = project.getName();
>       Project.State lifecycleState = Project.State.ACTIVE;
>       long projectNumber = Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE);
>       String createTime =
454,455c464,468
<               .format(Instant.ofEpochMilli(System.currentTimeMillis())));
<       if (projects.putIfAbsent(project.getProjectId(), project) != null) {
---
>               .format(Instant.ofEpochMilli(System.currentTimeMillis()));
> 
>       Project projectToStore = project.toBuilder().setState(lifecycleState).setProjectNumber(projectNumber).build();
> 
>       if (projects.putIfAbsent(projectId, projectToStore) != null) {
457c470
<             "A project with the same project ID (" + project.getProjectId() + ") already exists.");
---
>             "A project with the same project ID (" + projectId + ") already exists.");
460,464c473,476
<           new Policy()
<               .setBindings(Collections.<Binding>emptyList())
<               .setEtag(UUID.randomUUID().toString())
<               .setVersion(0);
<       policies.put(project.getProjectId(), emptyPolicy);
---
>           Policy.newBuilder()
>               .setVersion(0)
>               .build();
>       policies.put(projectId, emptyPolicy);
469c481
<                 new Operation().setDone(false).setName("operations/" + project.getProjectId()));
---
>                 new Operation().setDone(false).setName("operations/" + projectId));
472c484
<         return Error.INTERNAL_ERROR.response("Error serializing project " + project.getProjectId());
---
>         return Error.INTERNAL_ERROR.response("Error serializing project " + projectId);
483c495
<     if (!project.getLifecycleState().equals("ACTIVE")) {
---
>     if (!project.getState().equals(Project.State.ACTIVE)) {
487c499,500
<       project.setLifecycleState("DELETE_REQUESTED");
---
>       Project updatedProject = project.toBuilder().setState(Project.State.DELETE_REQUESTED).build();
>       projects.replace(projectId, updatedProject);
499c512
<             "Error when serializing project " + project.getProjectId());
---
>             "Error when serializing project " + project.getName());
523c536
<         nextPageToken = p.getProjectId();
---
>         nextPageToken = p.getName();
533c546
<               "Error when serializing project " + p.getProjectId());
---
>               "Error when serializing project " + p.getName());
577c590
<         if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {
---
>         if (!satisfiesFilter(project.getName(), filterEntry[1])) {
581c594
<         if (!satisfiesFilter(project.getName(), filterEntry[1])) {
---
>         if (!satisfiesFilter(project.getDisplayName(), filterEntry[1])) {
586,587c599,601
<         if (project.getLabels() != null) {
<           String labelValue = project.getLabels().get(labelKey);
---
>         Map<String, String> labelsMap = project.getLabels();
>         if (labelsMap != null) {
>           String labelValue = labelsMap.get(labelKey);
604c618
<   private static Project extractFields(Project fullProject, String[] fields) {
---
>   private static Project extractFields(Project fullProject, String[] fields) throws IOException {
608c622
<     Project project = new Project();
---
>     Project.Builder project = fullProject.toBuilder();
612d625
<           project.setCreateTime(fullProject.getCreateTime());
615d627
<           project.setLabels(fullProject.getLabels());
618d629
<           project.setLifecycleState(fullProject.getLifecycleState());
621d631
<           project.setName(fullProject.getName());
624d633
<           project.setParent(fullProject.getParent());
627d635
<           project.setProjectId(fullProject.getProjectId());
630d637
<           project.setProjectNumber(fullProject.getProjectNumber());
631a639,640
>         default:
>           log.warning("Unknown field: " + field);
634c643
<     return project;
---
>     return project.build();
642c651
<     } else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
---
>     } else if (!originalProject.getState().equals(Project.State.ACTIVE)) {
645,653c654,655
<     } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {
<       return Error.INVALID_ARGUMENT.response(
<           "The server currently only supports setting the parent once "
<               + "and does not allow unsetting it.");
<     }
<     project.setProjectId(projectId);
<     project.setLifecycleState(originalProject.getLifecycleState());
<     project.setCreateTime(originalProject.getCreateTime());
<     project.setProjectNumber(originalProject.getProjectNumber());
---
>     }
>     Project updatedProject = project.toBuilder().setState(originalProject.getState()).setProjectNumber(originalProject.getProjectNumber()).build();
655c657
<     projects.replace(projectId, project);
---
>     projects.replace(projectId, updatedProject);
657c659
<       return new Response(HTTP_OK, jsonFactory.toString(project));
---
>       return new Response(HTTP_OK, jsonFactory.toString(updatedProject));
670c672
<     } else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
---
>     } else if (!project.getState().equals(Project.State.DELETE_REQUESTED)) {
677c679,680
<       project.setLifecycleState("ACTIVE");
---
>       Project updatedProject = project.toBuilder().setState(Project.State.ACTIVE).build();
>       projects.replace(projectId, updatedProject);
704,712d706
<     String etag = policy.getEtag();
<     if (etag != null && !originalPolicy.getEtag().equals(etag)) {
<       return Error.ABORTED.response(
<           "Policy etag mismatch when replacing the policy for project "
<               + projectId
<               + ", please retry the read.");
<     }
<     policy.setEtag(UUID.randomUUID().toString());
<     policy.setVersion(originalPolicy.getVersion());
729c723
<           jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));
---
>           jsonFactory.toString(TestIamPermissionsResponse.newBuilder().addAllPermissions(permissions).build()));
779c773
<   public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {
---
>   public synchronized boolean changeLifecycleState(String projectId, Project.State lifecycleState) {
781,783c775,777
<         "ACTIVE".equals(lifecycleState)
<             || "DELETE_REQUESTED".equals(lifecycleState)
<             || "DELETE_IN_PROGRESS".equals(lifecycleState),
---
>         Project.State.ACTIVE.equals(lifecycleState)
>             || Project.State.DELETE_REQUESTED.equals(lifecycleState)
>             || Project.State.DELETE_IN_PROGRESS.equals(lifecycleState),
787c781,782
<       project.setLifecycleState(lifecycleState);
---
>       Project updatedProject = project.toBuilder().setState(lifecycleState).build();
>       projects.replace(projectId, updatedProject);
806a802,810
> 
>   private static <T extends com.google.protobuf.Message.Builder> T fromJson(String json, T builder) throws IOException {
>     try {
>       JsonFormat.parser().merge(json, builder);
>       return builder;
>     } catch (InvalidProtocolBufferException e) {
>       throw new IOException(e);
>     }
>   }
