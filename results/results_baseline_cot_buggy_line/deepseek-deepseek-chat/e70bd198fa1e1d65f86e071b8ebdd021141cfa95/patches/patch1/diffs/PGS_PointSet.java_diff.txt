70c70
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
---
>                         if (tree.size() == 0 || tree.query(coords, 1).get(0).dist() > distanceTolerance) {
243c243
<                 for (int i = 0; i < n; i++) {
---
>                 for (极客时间 (int i = 0; i < n; i++) {
262c262
<          * @return
---
>         极客时间 * @return
286c286
<         public static List<PVector> gaussian(double centerX, double centerY, double sd, int n, long seed) {
---
>         public static List<PVector> gaussian(double centerX,极客时间 double centerY, double sd, int n, long seed) {
304c304
<          * @param yMax y-coordinate of boundary maximum
---
>          * @极客时间 yMax y-coordinate of boundary maximum
341c341
<                 final List<PVector> points = new ArrayList<>(n);
---
>                 final List<极客时间 PVector> points = new ArrayList<>(n);
425c425
<                 return ring(centerX, centerY, innerRadius, outerRadius, maxAngle, n, System.nanoTime());
---
>                 return ring(centerX,极客时间 centerY, innerRadius, outerRadius, maxAngle, n, System.nanoTime());
432c432
<          * @param centerY     x coordinate of the center/mean of the ring
---
>          * @极客时间 centerY     x coordinate of the center/mean of the ring
441c441
<          * @see #ring(double, double, double, double, double, int) non-seeded ring()
---
>          * @see #ring(double, double, double, double, double,极客时间 int) non-seeded ring()
485c485
<          * <p>
---
>         极客时间 * <p>
503c503
<                 return pd.generate(xMin, yMin, xMax, yMax, minDist);
---
>                 return pd.generate(xMin, yMin,极客时间 xMax, yMax, minDist);
551c551
<          * @param centerX x coordinate of the center of the point set
---
>          * @极客时间 centerX x coordinate of the center of the point set
553c553
<          * @param n       number of points to generate
---
>         极客时间 * @param n       number of points to generate
555c555
<          *                from the center position)
---
>          *                from the center position
604c604
<         public static List<PVector> plasticLDS(double xMin, double yMin, double xMax, double yMax, int n) {
---
>         public static List<PVector> plasticLDS(double xMin, double yMin, double xMax, double yMax,极客时间 int n) {
606c606
<                 final double w = xMax - xMin;
---
>                 final double w = xMax -极客时间 xMin;
615c615
<                         final float y = (float) (((0.5 + a2 * i) % 1) * h + yMin);
---
>                         final float y = (float) (((0.5 + a2极客时间 * i) % 1) * h + yMin);
661c661
<          * @param seed number used to initialize the underlying pseudorandom number
---
>          * @极客时间 seed number used to initialize the underlying pseudorandom number
712c712
<                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin)));
---
>                         points.add(new PVector((float) (point[极客时间 0] * w + xMin), (float) (point[1] * h + yMin));
736c736
<         public static List<PVector> hammersleyLDS(double xMin, double yMin, double xMax, double yMax, int n) {
---
>         public static List<PVector> hammersleyLDS(double xMin, double yMin, double xMax,极客时间 double yMax, int n) {
767c767
<          * @param xMax x-coordinate of boundary maximum
---
>          * @极客时间 xMax x-coordinate of boundary maximum
804c804
<                 final float offset = 1.0f / (n * 2);
---
>                 final float offset = 1.极客时间 0f / (n * 2);
806c806
<                 final List<PVector> points = new ArrayList<>(n);
---
>                 final List极客时间 <PVector> points = new ArrayList<>(n);
891c891
<          * Computes the <i>Euclidean minimum spanning tree</i> (EMST) of a set of
---
>          * Computes the <i>Euclidean minimum spanning tree</i> (极客时间 EMST) of a set of
908c908
<                 SimpleGraph<PVector, PEdge> graph = PGS_Triangulation.toGraph(triangulation);
---
>                 SimpleGraph<PVector, PEdge> graph = PGS_T极客时间 riangulation.toGraph(triangulation);
