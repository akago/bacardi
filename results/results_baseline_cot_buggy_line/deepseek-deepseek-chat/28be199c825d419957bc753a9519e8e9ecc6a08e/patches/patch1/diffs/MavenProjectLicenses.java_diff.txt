44,49d43
< /**
<  * Helper class for building Artifact/License mappings from a maven project
<  * (multi module or single).
<  *
<  * @author Royce Remer
<  */
60,66d53
<   /**
<    * @param projects       the Set of {@link MavenProject} to scan
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    * @param filters        the list of {@link ArtifactFilter} to scope analysis to
<    * @param log            the log to sync to
<    */
80,88d66
<   /**
<    * @param session        the current {@link MavenSession}
<    * @param graph          the {@link DependencyGraphBuilder} implementation
<    * @param projectBuilder the maven {@link ProjectBuilder} implementation
<    * @param scope          String to filter artifacts to,
<    *                       {@link org.apache.maven.artifact.ArtifactScopeEnum}
<    * @param exclusions     List<String> of exclusion expressions,
<    *                       {@link org.apache.maven.shared.artifact.filter.AbstractStrictPatternArtifactFilter}
<    */
105,107d82
<   /**
<    * Return a set of licenses attributed to a single artifact.
<    */
120,126d94
<   /**
<    * Get mapping of Licenses to a set of artifacts presenting that license.
<    *
<    * @param dependencies Set<Artifact> to collate License entries from
<    * @return Map<License, Set < Artifact>> the same artifacts passed in, keyed by
<    * License.
<    */
130,132d97
<     // license:artifact is a many-to-many relationship.
<     // Each artifact may have several licenses.
<     // Each artifact may appear multiple times in the map.
148,150d112
<   /**
<    * Return the Set of all direct and transitive Artifact dependencies.
<    */
155,156d116
<     // build the set of maven dependencies for each module in the reactor (might
<     // only be the single one) and all its transitives
160c120,122
<         dependencies.addAll(getGraph().buildDependencyGraph(project, getFilter()).getChildren());
---
>         ProjectBuildingRequest request = new DefaultProjectBuildingRequest(getBuildingRequest());
>         request.setProject(project);
>         dependencies.addAll(getGraph().buildDependencyGraph(request, getFilter()).getChildren());
168,169d129
<     // build the complete set of direct+transitive dependent artifacts in all
<     // modules in the reactor
174,177d133
< 
<     // tempting, but does not resolve dependencies after the scope in which this
<     // plugin is invoked
<     // return project.getArtifacts();
