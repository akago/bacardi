5d4
< import org.apache.commons.codec.digest.DigestUtils;
8d6
< 
12a11,13
> import java.security.MessageDigest;
> import java.security.NoSuchAlgorithmException;
> import java.nio.charset.StandardCharsets;
14,16d14
< /**
<  * The email information for the transaction.
<  */
25d22
<             // gmail.com
33d29
<             // outlook.com
46,49d41
<     /**
<      * {@code Builder} creates instances of {@code Email}
<      * from values set by the builder's methods.
<      */
56,60d47
<         /**
<          * The constructor for the builder.
<          * <p>
<          * By default, validation will be enabled.
<          */
65,69d51
<         /**
<          * The constructor for the builder.
<          *
<          * @param enableValidation Whether validation should be enabled.
<          */
74,88d55
<         /**
<          * Set the email address and domain fields for the request. If
<          * you set the email address from this method, you do <em>not</em>
<          * need to set the domain separately. The domain will be set to
<          * the domain of the email address and the address field will be
<          * set to the email address passed.
<          * <p>
<          * The email address will be sent in plain text unless you also call
<          * {@link #hashAddress()} to instead send it as an MD5 hash.
<          *
<          * @param address The valid email address used in the transaction.
<          * @return The builder object.
<          * @throws IllegalArgumentException when address is not a valid email
<          *                                  address.
<          */
104,112d70
<         /**
<          * Send the email address as its MD5 hash.
<          * <p>
<          * By default, the email address set by {@link #address(String)} will be
<          * sent in plain text. Enable sending it as an MD5 hash instead by
<          * calling this method.
<          *
<          * @return The builder object.
<          */
118,123d75
<         /**
<          * @param domain The domain of the email address. This only needs
<          *               to be set if the email address is not set.
<          * @return The builder object.
<          * @throws IllegalArgumentException when domain is not a valid domain.
<          */
132,135d83
<         /**
<          * @return An instance of {@code Email} created from the
<          * fields set on this builder.
<          */
141,146d88
<     /**
<      * @return The email address field to use in the transaction. This will be
<      * a valid email address if you used {@link Builder#address(String)}, an MD5
<      * hash if you used {@link Builder#hashAddress()} as well, or null if you
<      * did not set an email address.
<      */
153c95
<             return DigestUtils.md5Hex(cleanAddress(address));
---
>             return md5Hex(cleanAddress(address));
205,207d146
<     /**
<      * @return The domain of the email address used in the transaction.
<      */
211a151,164
> 
>     private static String md5Hex(String input) {
>         try {
>             MessageDigest md = MessageDigest.getInstance("MD5");
>             byte[] digest = md.digest(input.getBytes(StandardCharsets.UTF_8));
>             StringBuilder sb = new StringBuilder();
>             for (byte b : digest) {
>                 sb.append(String.format("%02x", b));
>             }
>             return sb.toString();
>         } catch (NoSuchAlgorithmException e) {
>             throw new RuntimeException(e);
>         }
>     }
