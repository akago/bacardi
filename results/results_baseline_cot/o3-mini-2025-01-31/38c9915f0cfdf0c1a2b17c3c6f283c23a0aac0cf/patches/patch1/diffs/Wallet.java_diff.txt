30c30,31
< import org.cactoos.collection.Filtered;
---
> import java.util.ArrayList;
> import java.util.List;
36d36
< import org.cactoos.scalar.CheckedScalar;
38d37
< import org.cactoos.scalar.UncheckedScalar;
40d38
< import org.cactoos.text.SplitText;
166c164,205
<             return other;
---
>             try {
>                 if (other.id() != this.id()) {
>                     throw new IOException(
>                         new UncheckedText(
>                             new FormattedText(
>                                 "Wallet ID mismatch, ours is %d, theirs is %d",
>                                 other.id(),
>                                 this.id()
>                             )
>                         ).asString()
>                     );
>                 }
>                 final Iterable<Transaction> ledger = this.ledger();
>                 List<Transaction> candidates = new ArrayList<>();
>                 for (Transaction incoming : other.ledger()) {
>                     boolean found = false;
>                     for (Transaction origin : ledger) {
>                         boolean condition;
>                         try {
>                             condition = incoming.equals(origin)
>                                 || (incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf()))
>                                 || (incoming.id() == origin.id() && incoming.amount() < 0L)
>                                 || incoming.prefix().equals(origin.prefix());
>                         } catch (Exception ex) {
>                             throw new IOException(ex);
>                         }
>                         if (condition) {
>                             found = true;
>                             break;
>                         }
>                     }
>                     if (!found) {
>                         candidates.add(incoming);
>                     }
>                 }
>                 return new Wallet.Fake(
>                     this.id(),
>                     new Joined<Transaction>(ledger, candidates)
>                 );
>             } catch (IOException ex) {
>                 throw new RuntimeException(ex);
>             }
201,213c240,249
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
<                     16
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             try {
>                 String content = new TextOf(this.path).asString();
>                 String[] lines = content.split("\n");
>                 if (lines.length <= 2) {
>                     throw new IOException("Not enough lines in wallet file");
>                 }
>                 return Long.parseUnsignedLong(lines[2], 16);
>             } catch (Exception e) {
>                 throw new IOException(e);
>             }
247,262c283,304
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
<             );
---
>             List<Transaction> candidates = new ArrayList<>();
>             for (Transaction incoming : other.ledger()) {
>                 boolean found = false;
>                 for (Transaction origin : ledger) {
>                     boolean condition;
>                     try {
>                         condition = incoming.equals(origin)
>                             || (incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf()))
>                             || (incoming.id() == origin.id() && incoming.amount() < 0L)
>                             || incoming.prefix().equals(origin.prefix());
>                     } catch (Exception ex) {
>                         throw new IOException(ex);
>                     }
>                     if (condition) {
>                         found = true;
>                         break;
>                     }
>                 }
>                 if (!found) {
>                     candidates.add(incoming);
>                 }
>             }
270a313,319
>             try {
>                 String content = new TextOf(this.path).asString();
>                 String[] parts = content.split("\\n");
>                 List<org.cactoos.text.Text> texts = new ArrayList<>();
>                 for (int i = 5; i < parts.length; i++) {
>                     texts.add(new TextOf(parts[i]));
>                 }
273,282c322
<                 new Skipped<>(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
<                     ),
<                     // @checkstyle MagicNumberCheck (1 line)
<                     5
<                 )
---
>                     new ListOf<>(texts)
283a324,326
>             } catch (Exception ex) {
>                 throw new RuntimeException(ex);
>             }
