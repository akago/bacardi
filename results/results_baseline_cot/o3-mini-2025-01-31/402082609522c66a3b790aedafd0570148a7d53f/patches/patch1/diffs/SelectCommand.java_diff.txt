9,12c9,13
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.CommandExecutor;
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.source.CommandSource;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.GenericArguments;
16,17c17,19
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import net.kyori.adventure.text.Component;
> import static org.spongepowered.api.command.parameter.GenericArguments.string;
> import static net.kyori.adventure.text.Component.text;
24c26
<     SelectCommand(ChangeSkinSponge plugin) {
---
>     public SelectCommand(ChangeSkinSponge plugin) {
48d49
<     @Override
50c51
<         return CommandSpec.builder()
---
>         Command.Parameterized command = Command.builder()
52,53c53,54
<                 .arguments(string(of("skinName")))
<                 .permission(PomData.ARTIFACT_ID + ".command.skinselect.base")
---
>                 .addParameter(string(text("skinName")))
>                 .addRequirement(src -> src.hasPermission(PomData.ARTIFACT_ID + ".command.skinselect.base"))
54a56,74
>         return new CommandSpecImpl(command);
>     }
> 
>     public static interface CommandSpec {
>         Command.Parameterized toParameterized();
>     }
> 
>     private static class CommandSpecImpl implements CommandSpec {
> 
>         private final Command.Parameterized parameterized;
> 
>         CommandSpecImpl(Command.Parameterized parameterized) {
>             this.parameterized = parameterized;
>         }
> 
>         @Override
>         public Command.Parameterized toParameterized() {
>             return parameterized;
>         }
