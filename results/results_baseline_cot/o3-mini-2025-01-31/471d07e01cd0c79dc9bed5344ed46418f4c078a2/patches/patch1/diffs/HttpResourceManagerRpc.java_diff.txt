1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
19,53c3,5
< import static com.google.cloud.RetryHelper.runWithRetries;
< import static com.google.common.base.MoreObjects.firstNonNull;
< import static java.net.HttpURLConnection.HTTP_FORBIDDEN;
< import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
< 
< import com.google.api.client.http.HttpRequestInitializer;
< import com.google.api.client.http.HttpTransport;
< import com.google.api.client.json.JsonFactory;
< import com.google.api.client.json.gson.GsonFactory;
< import com.google.api.core.ApiClock;
< import com.google.api.gax.retrying.ResultRetryAlgorithm;
< import com.google.api.gax.retrying.RetrySettings;
< import com.google.api.gax.retrying.TimedAttemptSettings;
< import com.google.api.services.cloudresourcemanager.CloudResourceManager;
< import com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.Constraint;
< import com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;
< import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;
< import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;
< import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;
< import com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.Status;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
< import com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;
< import com.google.cloud.RetryHelper;
---
> import com.google.api.gax.longrunning.OperationFuture;
> import com.google.api.gax.rpc.ApiException;
> import com.google.api.gax.rpc.StatusCode;
55,56d6
< import com.google.cloud.http.BaseHttpServiceException;
< import com.google.cloud.http.HttpTransportOptions;
58c8,27
< import com.google.cloud.resourcemanager.ResourceManagerOptions;
---
> import com.google.cloud.resourcemanager.spi.v1beta1.Option;
> import com.google.cloud.resourcemanager.spi.v1beta1.ListResult;
> import com.google.cloud.resourcemanager.v3.ClearOrgPolicyRequest;
> import com.google.cloud.resourcemanager.v3.Constraint;
> import com.google.cloud.resourcemanager.v3.CreateProjectMetadata;
> import com.google.cloud.resourcemanager.v3.FoldersClient;
> import com.google.cloud.resourcemanager.v3.GetEffectiveOrgPolicyRequest;
> import com.google.cloud.resourcemanager.v3.GetOrgPolicyRequest;
> import com.google.cloud.resourcemanager.v3.ListAvailableOrgPolicyConstraintsRequest;
> import com.google.cloud.resourcemanager.v3.ListAvailableOrgPolicyConstraintsResponse;
> import com.google.cloud.resourcemanager.v3.ListOrgPoliciesRequest;
> import com.google.cloud.resourcemanager.v3.ListOrgPoliciesResponse;
> import com.google.cloud.resourcemanager.v3.OrgPolicy;
> import com.google.cloud.resourcemanager.v3.Project;
> import com.google.cloud.resourcemanager.v3.ProjectsClient;
> import com.google.cloud.resourcemanager.v3.SetIamPolicyRequest;
> import com.google.cloud.resourcemanager.v3.SetOrgPolicyRequest;
> import com.google.cloud.resourcemanager.v3.OrganizationsClient;
> import com.google.iam.v1.Policy;
> import com.google.iam.v1.TestIamPermissionsResponse;
66,67c35
< import java.util.concurrent.Callable;
< import org.threeten.bp.Duration;
---
> import java.util.concurrent.ExecutionException;
69d36
< /** @deprecated v3 GAPIC client of ResourceManager is now available */
73,134d39
<   private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();
< 
<   // See doc of create() for more details:
<   // https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/java/latest/com/google/api/services/cloudresourcemanager/CloudResourceManager.Projects.html#create(com.google.api.services.cloudresourcemanager.model.Project)
<   private static final RetrySettings CREATE_RETRY_SETTINGS =
<       RetrySettings.newBuilder()
<           // SLO permits 30s at 90th percentile, 4x it for total limit.
<           // Observed latency is much lower: 11s at 95th percentile.
<           .setTotalTimeout(Duration.ofMinutes(2))
<           // Linked doc recommends polling at 5th second.
<           .setInitialRetryDelay(Duration.ofSeconds(5))
<           .setRetryDelayMultiplier(1.5)
<           // Observed P95 latency is 11s. We probably shouldn't sleep longer than this.
<           .setMaxRetryDelay(Duration.ofSeconds(11))
<           .setJittered(true)
<           .setInitialRpcTimeout(Duration.ofSeconds(5))
<           .setMaxRpcTimeout(Duration.ofSeconds(5))
<           .build();
< 
<   // reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
<   private static final ImmutableMap<Integer, Integer> RPC_TO_HTTP_CODES =
<       ImmutableMap.<Integer, Integer>builder()
<           .put(0, 200)
<           .put(1, 499)
<           .put(2, 500)
<           .put(3, 400)
<           .put(4, 504)
<           .put(5, 404)
<           .put(6, 409)
<           .put(7, 403)
<           .put(16, 401)
<           .put(8, 429)
<           .put(9, 400)
<           .put(10, 409)
<           .put(11, 400)
<           .put(12, 501)
<           .put(13, 500)
<           .put(14, 503)
<           .put(15, 500)
<           .build();
< 
<   private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER =
<       new ResultRetryAlgorithm<Operation>() {
<         @Override
<         public TimedAttemptSettings createNextAttempt(
<             Throwable prevThrowable, Operation prevResponse, TimedAttemptSettings prevSettings) {
<           return null;
<         }
< 
<         @Override
<         public boolean shouldRetry(Throwable prevThrowable, Operation prevOp) {
<           if (prevThrowable == null) {
<             return prevOp.getDone() == null || !prevOp.getDone();
<           }
<           return prevThrowable instanceof ResourceManagerException
<               && ((ResourceManagerException) prevThrowable).isRetryable();
<         }
<       };
< 
<   private final CloudResourceManager resourceManager;
<   private final ApiClock clock;
< 
136,156c41
<     HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();
<     HttpTransport transport = transportOptions.getHttpTransportFactory().create();
<     HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);
<     resourceManager =
<         new CloudResourceManager.Builder(transport, JSON_FACTORY, initializer)
<             .setRootUrl(options.getHost())
<             .setApplicationName(options.getApplicationName())
<             .build();
<     clock = options.getClock();
<   }
< 
<   private static ResourceManagerException translate(IOException exception) {
<     return new ResourceManagerException(exception);
<   }
< 
<   private static ResourceManagerException translate(Status status) {
<     Integer code = RPC_TO_HTTP_CODES.get(status.getCode());
<     if (code == null) {
<       code = BaseHttpServiceException.UNKNOWN_CODE;
<     }
<     return new ResourceManagerException(code, status.getMessage());
---
>     // No initialization needed for the new GAPIC clients.
161,197c46,51
<     final Operation operation;
<     try {
<       operation = resourceManager.projects().create(project).execute();
<     } catch (IOException ex) {
<       throw translate(ex);
<     }
< 
<     Operation finishedOp =
<         runWithRetries(
<             new Callable<Operation>() {
<               @Override
<               public Operation call() {
<                 try {
<                   return resourceManager.operations().get(operation.getName()).execute();
<                 } catch (IOException ex) {
<                   throw translate(ex);
<                 }
<               }
<             },
<             CREATE_RETRY_SETTINGS,
<             OPERATION_HANDLER,
<             clock);
<     if (finishedOp.getError() != null) {
<       throw translate(finishedOp.getError());
<     }
< 
<     // NOTE(pongad): Operation.getResponse() returns a Map<String, Object>.
<     // 1. `(Project) finishedOp.getResponse()` doesn't work,
<     // because JSON deserializer in execute() didn't know to create a Project object.
<     // 2. `new Project().putAll(finishedOp.getResponse())` doesn't work either.
<     // 64-bit integers are sent as strings in JSON,
<     // so execute(), not knowing the type, parses it as String, not Long.
<     try {
<       String responseTxt = JSON_FACTORY.toString(finishedOp.getResponse());
<       return JSON_FACTORY.fromString(responseTxt, Project.class);
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       OperationFuture<Project, CreateProjectMetadata> op =
>           projectsClient.createProjectAsync(project);
>       return op.get();
>     } catch (InterruptedException | ExecutionException | IOException ex) {
>       throw new ResourceManagerException(ex);
203,206c57,60
<     try {
<       resourceManager.projects().delete(projectId).execute();
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       projectsClient.deleteProjectAsync("projects/" + projectId).get();
>     } catch (InterruptedException | ExecutionException | IOException ex) {
>       throw new ResourceManagerException(ex);
212,221c66,70
<     try {
<       return resourceManager
<           .projects()
<           .get(projectId)
<           .setFields(Option.FIELDS.getString(options))
<           .execute();
<     } catch (IOException ex) {
<       ResourceManagerException translated = translate(ex);
<       if (translated.getCode() == HTTP_FORBIDDEN || translated.getCode() == HTTP_NOT_FOUND) {
<         // Service can return either 403 or 404 to signify that the project doesn't exist.
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       return projectsClient.getProject("projects/" + projectId);
>     } catch (ApiException ex) {
>       StatusCode.Code code = ex.getStatusCode().getCode();
>       if (code == StatusCode.Code.PERMISSION_DENIED || code == StatusCode.Code.NOT_FOUND) {
223,224d71
<       } else {
<         throw translated;
225a73,75
>       throw new ResourceManagerException(ex);
>     } catch (IOException ex) {
>       throw new ResourceManagerException(ex);
231,242c81,97
<     try {
<       ListProjectsResponse response =
<           resourceManager
<               .projects()
<               .list()
<               .setFields(Option.FIELDS.getString(options))
<               .setFilter(Option.FILTER.getString(options))
<               .setPageSize(Option.PAGE_SIZE.getInt(options))
<               .setPageToken(Option.PAGE_TOKEN.getString(options))
<               .execute();
<       return Tuple.<String, Iterable<Project>>of(
<           response.getNextPageToken(), response.getProjects());
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       com.google.cloud.resourcemanager.v3.ListProjectsRequest.Builder reqBuilder =
>           com.google.cloud.resourcemanager.v3.ListProjectsRequest.newBuilder();
>       if (options.get(Option.FILTER) != null) {
>         reqBuilder.setFilter((String) options.get(Option.FILTER));
>       }
>       if (options.get(Option.PAGE_SIZE) != null) {
>         reqBuilder.setPageSize((Integer) options.get(Option.PAGE_SIZE));
>       }
>       if (options.get(Option.PAGE_TOKEN) != null) {
>         reqBuilder.setPageToken((String) options.get(Option.PAGE_TOKEN));
>       }
>       ProjectsClient.ListProjectsPagedResponse response =
>           projectsClient.listProjects(reqBuilder.build());
>       String nextPageToken = response.getPage().getNextPageToken();
>       Iterable<Project> projects = response.iterateAll();
>       return Tuple.of(nextPageToken, projects);
244c99
<       throw translate(ex);
---
>       throw new ResourceManagerException(ex);
250,253c105,108
<     try {
<       resourceManager.projects().undelete(projectId, new UndeleteProjectRequest()).execute();
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       projectsClient.undeleteProjectAsync("projects/" + projectId).get();
>     } catch (InterruptedException | ExecutionException | IOException ex) {
>       throw new ResourceManagerException(ex);
259,262c114,117
<     try {
<       return resourceManager.projects().update(project.getProjectId(), project).execute();
<     } catch (IOException ex) {
<       throw translate(ex);
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       return projectsClient.updateProjectAsync(project).get();
>     } catch (InterruptedException | ExecutionException | IOException ex) {
>       throw new ResourceManagerException(ex);
268,276c123,126
<     try {
<       return resourceManager
<           .projects()
<           .getIamPolicy(projectId, new GetIamPolicyRequest())
<           .execute();
<     } catch (IOException ex) {
<       ResourceManagerException translated = translate(ex);
<       if (translated.getCode() == HTTP_FORBIDDEN) {
<         // Service returns permission denied if policy doesn't exist.
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       return projectsClient.getIamPolicy("projects/" + projectId);
>     } catch (ApiException ex) {
>       if (ex.getStatusCode().getCode() == StatusCode.Code.PERMISSION_DENIED) {
278,279d127
<       } else {
<         throw translated;
280a129,131
>       throw new ResourceManagerException(ex);
>     } catch (IOException ex) {
>       throw new ResourceManagerException(ex);
286,290c137,140
<     try {
<       return resourceManager
<           .projects()
<           .setIamPolicy(projectId, new SetIamPolicyRequest().setPolicy(newPolicy))
<           .execute();
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
>       SetIamPolicyRequest req =
>           SetIamPolicyRequest.newBuilder().setPolicy(newPolicy).build();
>       return projectsClient.setIamPolicy("projects/" + projectId, req);
292c142
<       throw translate(ex);
---
>       throw new ResourceManagerException(ex);
299c149
<     try {
---
>     try (ProjectsClient projectsClient = ProjectsClient.create()) {
301,307c151,152
<           resourceManager
<               .projects()
<               .testIamPermissions(
<                   projectId, new TestIamPermissionsRequest().setPermissions(permissions))
<               .execute();
<       Set<String> permissionsOwned =
<           ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));
---
>           projectsClient.testIamPermissions("projects/" + projectId, permissions);
>       Set<String> permissionsOwned = ImmutableSet.copyOf(response.getPermissionsList());
314c159
<       throw translate(ex);
---
>       throw new ResourceManagerException(ex);
321c166
<     try {
---
>     try (OrganizationsClient organizationsClient = OrganizationsClient.create()) {
323,329c168,169
<           resourceManager
<               .organizations()
<               .testIamPermissions(
<                   resource, new TestIamPermissionsRequest().setPermissions(permissions))
<               .execute();
<       Set<String> permissionsOwned =
<           ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));
---
>           organizationsClient.testIamPermissions(resource, permissions);
>       Set<String> permissionsOwned = ImmutableSet.copyOf(response.getPermissionsList());
335c175
<     } catch (RetryHelper.RetryHelperException ex) {
---
>     } catch (Exception ex) {
342,347c182,184
<     try {
<       resourceManager
<           .folders()
<           .clearOrgPolicy(
<               resource,
<               new ClearOrgPolicyRequest()
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       ClearOrgPolicyRequest request =
>           ClearOrgPolicyRequest.newBuilder()
349,351c186,189
<                   .setEtag(orgPolicy.getEtag()))
<           .execute();
<     } catch (RetryHelper.RetryHelperException ex) {
---
>               .setEtag(orgPolicy.getEtag())
>               .build();
>       foldersClient.clearOrgPolicy(resource, request);
>     } catch (Exception ex) {
358,364c196,200
<     try {
<       return resourceManager
<           .folders()
<           .getEffectiveOrgPolicy(
<               resource, new GetEffectiveOrgPolicyRequest().setConstraint(constraint))
<           .execute();
<     } catch (RetryHelper.RetryHelperException ex) {
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       GetEffectiveOrgPolicyRequest request =
>           GetEffectiveOrgPolicyRequest.newBuilder().setConstraint(constraint).build();
>       return foldersClient.getEffectiveOrgPolicy(resource, request);
>     } catch (Exception ex) {
371,376c207,211
<     try {
<       return resourceManager
<           .folders()
<           .getOrgPolicy(resource, new GetOrgPolicyRequest().setConstraint(constraint))
<           .execute();
<     } catch (RetryHelper.RetryHelperException ex) {
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       GetOrgPolicyRequest request =
>           GetOrgPolicyRequest.newBuilder().setConstraint(constraint).build();
>       return foldersClient.getOrgPolicy(resource, request);
>     } catch (Exception ex) {
384c219,227
<     try {
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       ListAvailableOrgPolicyConstraintsRequest.Builder reqBuilder =
>           ListAvailableOrgPolicyConstraintsRequest.newBuilder();
>       if (options.get(Option.PAGE_SIZE) != null) {
>         reqBuilder.setPageSize((Integer) options.get(Option.PAGE_SIZE));
>       }
>       if (options.get(Option.PAGE_TOKEN) != null) {
>         reqBuilder.setPageToken((String) options.get(Option.PAGE_TOKEN));
>       }
386,395c229,231
<           resourceManager
<               .folders()
<               .listAvailableOrgPolicyConstraints(
<                   resource,
<                   new ListAvailableOrgPolicyConstraintsRequest()
<                       .setPageSize(Option.PAGE_SIZE.getInt(options))
<                       .setPageToken(Option.PAGE_TOKEN.getString(options)))
<               .execute();
<       return ListResult.of(response.getNextPageToken(), response.getConstraints());
<     } catch (RetryHelper.RetryHelperException ex) {
---
>           foldersClient.listAvailableOrgPolicyConstraints(resource, reqBuilder.build());
>       return ListResult.of(response.getNextPageToken(), response.getConstraintsList());
>     } catch (Exception ex) {
403c239,246
<     try {
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       ListOrgPoliciesRequest.Builder reqBuilder = ListOrgPoliciesRequest.newBuilder();
>       if (options.get(Option.PAGE_SIZE) != null) {
>         reqBuilder.setPageSize((Integer) options.get(Option.PAGE_SIZE));
>       }
>       if (options.get(Option.PAGE_TOKEN) != null) {
>         reqBuilder.setPageToken((String) options.get(Option.PAGE_TOKEN));
>       }
405,414c248,250
<           resourceManager
<               .folders()
<               .listOrgPolicies(
<                   resource,
<                   new ListOrgPoliciesRequest()
<                       .setPageSize(Option.PAGE_SIZE.getInt(options))
<                       .setPageToken(Option.PAGE_TOKEN.getString(options)))
<               .execute();
<       return ListResult.of(response.getNextPageToken(), response.getPolicies());
<     } catch (RetryHelper.RetryHelperException ex) {
---
>           foldersClient.listOrgPolicies(resource, reqBuilder.build());
>       return ListResult.of(response.getNextPageToken(), response.getPoliciesList());
>     } catch (Exception ex) {
421,426c257,261
<     try {
<       return resourceManager
<           .folders()
<           .setOrgPolicy(resource, new SetOrgPolicyRequest().setPolicy(orgPolicy))
<           .execute();
<     } catch (RetryHelper.RetryHelperException ex) {
---
>     try (FoldersClient foldersClient = FoldersClient.create()) {
>       SetOrgPolicyRequest request =
>           SetOrgPolicyRequest.newBuilder().setPolicy(orgPolicy).build();
>       return foldersClient.setOrgPolicy(resource, request);
>     } catch (Exception ex) {
