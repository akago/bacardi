1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
20a3
> import java.beans.Introspector;
38,44c21,27
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.Validator;
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
46d28
< import org.apache.commons.beanutils.PropertyUtils;
62d43
< 
64d44
< 
67d46
< 
74d52
< 
90d67
< 
98d74
< 
109d84
< 
118d92
< 
120d93
< 
122d94
< 
132d103
< 
134d104
< 
145d114
< 
148d116
<                 
157,158c125,128
<                                                 if(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;
<                                                 else typesControlGroup = ObjectChoiceControlGroup.class;
---
>                                                 if (objectProperty.type.isEnum())
>                                                         typesControlGroup = EnumControlGroup.class;
>                                                 else
>                                                         typesControlGroup = ObjectChoiceControlGroup.class;
160d129
< 
162d130
< 
166,167d133
< 
< 
173d138
< 
183d147
< 
185,189c149,151
<                                         controlGroup = controlGroupProviders
<                                                         .get(objectProperty.type)
<                                                         .createControlGroup(view.newChildId()
<                                                                         , new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
<                                                                         , objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
---
>                                         controlGroup = controlGroupProviders.get(objectProperty.type).createControlGroup(
>                                                         view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name),
>                                                         objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
192d153
< 
208d168
< 
228c188,189
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
---
>                         if (type.isAssignableFrom(mapType))
>                                 return typesControlGroups.get(mapType);
255a217,239
>         
>         private static class PropertyUtils {
>                 public static PropertyDescriptor[] getPropertyDescriptors(Class<?> beanClass) {
>                         try {
>                                 return Introspector.getBeanInfo(beanClass).getPropertyDescriptors();
>                         } catch (Exception e) {
>                                 throw new RuntimeException("Failed to get property descriptors for " + beanClass, e);
>                         }
>                 }
>                 
>                 public static PropertyDescriptor getPropertyDescriptor(Object bean, String name) {
>                         if (bean == null) {
>                                 throw new IllegalArgumentException("Null bean provided");
>                         }
>                         PropertyDescriptor[] descriptors = getPropertyDescriptors(bean.getClass());
>                         for (PropertyDescriptor descriptor : descriptors) {
>                                 if (descriptor.getName().equals(name)) {
>                                         return descriptor;
>                                 }
>                         }
>                         return null;
>                 }
>         }
