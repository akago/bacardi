1,17d0
< /*
<  *  Licensed to the Apache Software Foundation (ASF) under one or more
<  *  contributor license agreements.  See the NOTICE file distributed with
<  *  this work for additional information regarding copyright ownership.
<  *  The ASF licenses this file to You under the Apache License, Version 2.0
<  *  (the "License"); you may not use this file except in compliance with
<  *  the License.  You may obtain a copy of the License at
<  *
<  *      http://www.apache.org/licenses/LICENSE-2.0
<  *
<  *  Unless required by applicable law or agreed to in writing, software
<  *  distributed under the License is distributed on an "AS IS" BASIS,
<  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  *  See the License for the specific language governing permissions and
<  *  limitations under the License.
<  *
<  */
19a3,4
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
27,32c12
< import org.apache.commons.io.output.ThresholdingOutputStream;
< 
< /**
<  * Offloads to disk when a given memory consumption has been reacehd
<  */
< class OffloadingOutputStream extends ThresholdingOutputStream
---
> class OffloadingOutputStream extends OutputStream
34d13
< 
38c17
<      * The output stream to which data will be written prior to the theshold
---
>      * The output stream to which data will be written prior to the threshold
45,46c24
<      * will always be one of <code>memoryOutputStream</code> or
<      * <code>diskOutputStream</code>.
---
>      * will always be one of <code>memoryOutputStream</code> or a disk-based stream.
74a53,67
>     /**
>      * The threshold of bytes to keep in memory.
>      */
>     private final int threshold;
> 
>     /**
>      * The number of bytes written so far.
>      */
>     private long written = 0;
>     
>     /**
>      * Flag indicating if the threshold has been reached.
>      */
>     private boolean thresholdTriggered = false;
> 
109c102
<         super( threshold );
---
>         this.threshold = threshold;
111,113c104,106
< 
<         memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );
<         currentOutputStream = memoryOutputStream;
---
>         // Initialize the memory output stream with an initial size of threshold/10 (at least 1)
>         this.memoryOutputStream = new ByteArrayOutputStream(Math.max(1, threshold / 10));
>         this.currentOutputStream = memoryOutputStream;
119,120d111
<     // --------------------------------------- ThresholdingOutputStream methods
< 
127c118
<      * @exception java.io.IOException if an error occurs.
---
>      * @exception IOException if an error occurs.
129d119
<     @Override
137c127
<      * that is backed by disk. This is the point at which we realise that too
---
>      * that is backed by disk. This is the point at which we realize that too
141c131
<      * @exception java.io.IOException if an error occurs.
---
>      * @exception IOException if an error occurs.
143d132
<     @Override
145a135,136
>         if (!thresholdTriggered)
>         {
150a142,143
>             thresholdTriggered = true;
>         }
152a146,152
>     /**
>      * Returns the current data as an input stream.
>      *
>      * @return An input stream constructed from the written data.
>      *
>      * @exception IOException if an error occurs.
>      */
155,156c155
< 
<         InputStream memoryAsInput = memoryOutputStream.toInputStream();
---
>         InputStream memoryAsInput = new ByteArrayInputStream(memoryOutputStream.toByteArray());
164,165d162
<     // --------------------------------------------------------- Public methods
< 
185,192c182
<      * the temporary file created or null.
<      * <p>
<      * If the constructor specifying the file is used then it returns that
<      * same output file, even when threshold has not been reached.
<      * <p>
<      * If constructor specifying a temporary file prefix/suffix is used
<      * then the temporary file created once the threshold is reached is returned
<      * If the threshold was not reached then <code>null</code> is returned.
---
>      * the temporary file created, or null.
203c193
<      * Closes underlying output stream, and mark this as closed
---
>      * Closes the underlying output stream, and marks this as closed.
205c195
<      * @exception java.io.IOException if an error occurs.
---
>      * @exception IOException if an error occurs.
210,211c200,201
<         super.close();
<         closed = true;
---
>         if (!closed)
>         {
212a203,204
>             closed = true;
>         }
214a207,295
>     /**
>      * Flushes the underlying output stream.
>      *
>      * @exception IOException if an error occurs.
>      */
>     @Override
>     public void flush() throws IOException
>     {
>         if (!closed)
>         {
>             currentOutputStream.flush();
>         }
>     }
>     
>     /**
>      * Writes a single byte to this output stream.
>      *
>      * @param b the byte.
>      *
>      * @exception IOException if an error occurs.
>      */
>     @Override
>     public void write(int b) throws IOException
>     {
>         if (closed)
>         {
>             throw new IOException("Stream already closed");
>         }
>         if (!thresholdTriggered && (written + 1 > threshold))
>         {
>             thresholdReached();
>         }
>         currentOutputStream.write(b);
>         written++;
>     }
>     
>     /**
>      * Writes <code>len</code> bytes from the specified byte array starting at
>      * offset <code>off</code> to this output stream.
>      *
>      * @param b the data.
>      * @param off the start offset in the data.
>      * @param len the number of bytes to write.
>      *
>      * @exception IOException if an error occurs.
>      */
>     @Override
>     public void write(byte[] b, int off, int len) throws IOException
>     {
>         if (closed)
>         {
>             throw new IOException("Stream already closed");
>         }
>         if (!thresholdTriggered && (written + len > threshold))
>         {
>             int remain = (int) (threshold - written);
>             if (remain > 0)
>             {
>                 currentOutputStream.write(b, off, remain);
>                 written += remain;
>                 off += remain;
>                 len -= remain;
>             }
>             thresholdReached();
>             if (len > 0)
>             {
>                 currentOutputStream.write(b, off, len);
>                 written += len;
>             }
>         }
>         else
>         {
>             currentOutputStream.write(b, off, len);
>             written += len;
>         }
>     }
> 
>     /**
>      * Writes the specified byte array to this output stream.
>      *
>      * @param b the data.
>      *
>      * @exception IOException if an error occurs.
>      */
>     @Override
>     public void write(byte[] b) throws IOException
>     {
>         write(b, 0, b.length);
>     }
