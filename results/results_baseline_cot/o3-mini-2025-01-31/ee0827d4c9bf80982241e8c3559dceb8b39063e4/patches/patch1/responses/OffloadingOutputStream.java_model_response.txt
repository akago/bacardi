```java
package org.codehaus.plexus.archiver.zip;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.file.Files;

class OffloadingOutputStream extends OutputStream
{
    // ----------------------------------------------------------- Data members

    /**
     * The output stream to which data will be written prior to the threshold
     * being reached.
     */
    private ByteArrayOutputStream memoryOutputStream;

    /**
     * The output stream to which data will be written at any given time. This
     * will always be one of <code>memoryOutputStream</code> or a disk-based stream.
     */
    private OutputStream currentOutputStream;

    /**
     * The file to which output will be directed if the threshold is exceeded.
     */
    private File outputFile = null;

    /**
     * The temporary file prefix.
     */
    private final String prefix;

    /**
     * The temporary file suffix.
     */
    private final String suffix;

    /**
     * The directory to use for temporary files.
     */
    private final File directory;

    /**
     * True when close() has been called successfully.
     */
    private boolean closed = false;

    /**
     * The threshold of bytes to keep in memory.
     */
    private final int threshold;

    /**
     * The number of bytes written so far.
     */
    private long written = 0;
    
    /**
     * Flag indicating if the threshold has been reached.
     */
    private boolean thresholdTriggered = false;

    // ----------------------------------------------------------- Constructors

    /**
     * Constructs an instance of this class which will trigger an event at the
     * specified threshold, and save data to a temporary file beyond that point.
     *
     * @param threshold The number of bytes at which to trigger an event.
     * @param prefix Prefix to use for the temporary file.
     * @param suffix Suffix to use for the temporary file.
     * @param directory Temporary file directory.
     *
     * @since 1.4
     */
    public OffloadingOutputStream(int threshold, String prefix, String suffix, File directory)
    {
        this(threshold, null, prefix, suffix, directory);
        if (prefix == null)
        {
            throw new IllegalArgumentException("Temporary file prefix is missing");
        }
    }

    /**
     * Constructs an instance of this class which will trigger an event at the
     * specified threshold, and save data either to a file beyond that point.
     *
     * @param threshold The number of bytes at which to trigger an event.
     * @param outputFile The file to which data is saved beyond the threshold.
     * @param prefix Prefix to use for the temporary file.
     * @param suffix Suffix to use for the temporary file.
     * @param directory Temporary file directory.
     */
    private OffloadingOutputStream(int threshold, File outputFile, String prefix, String suffix, File directory)
    {
        this.threshold = threshold;
        this.outputFile = outputFile;
        // Initialize the memory output stream with an initial size of threshold/10 (at least 1)
        this.memoryOutputStream = new ByteArrayOutputStream(Math.max(1, threshold / 10));
        this.currentOutputStream = memoryOutputStream;
        this.prefix = prefix;
        this.suffix = suffix;
        this.directory = directory;
    }

    /**
     * Returns the current output stream. This may be memory based or disk
     * based, depending on the current state with respect to the threshold.
     *
     * @return The underlying output stream.
     *
     * @exception IOException if an error occurs.
     */
    protected OutputStream getStream() throws IOException
    {
        return currentOutputStream;
    }

    /**
     * Switches the underlying output stream from a memory based stream to one
     * that is backed by disk. This is the point at which we realize that too
     * much data is being written to keep in memory, so we elect to switch to
     * disk-based storage.
     *
     * @exception IOException if an error occurs.
     */
    protected void thresholdReached() throws IOException
    {
        if (!thresholdTriggered)
        {
            if (prefix != null)
            {
                outputFile = File.createTempFile(prefix, suffix, directory);
            }
            currentOutputStream = Files.newOutputStream(outputFile.toPath());
            thresholdTriggered = true;
        }
    }

    /**
     * Returns the current data as an input stream.
     *
     * @return An input stream constructed from the written data.
     *
     * @exception IOException if an error occurs.
     */
    public InputStream getInputStream() throws IOException
    {
        InputStream memoryAsInput = new ByteArrayInputStream(memoryOutputStream.toByteArray());
        if (outputFile == null)
        {
            return memoryAsInput;
        }
        return new SequenceInputStream(memoryAsInput, Files.newInputStream(outputFile.toPath()));
    }

    /**
     * Returns the data for this output stream as an array of bytes, assuming
     * that the data has been retained in memory. If the data was written to
     * disk, this method returns <code>null</code>.
     *
     * @return The data for this output stream, or <code>null</code> if no such
     * data is available.
     */
    public byte[] getData()
    {
        if (memoryOutputStream != null)
        {
            return memoryOutputStream.toByteArray();
        }
        return null;
    }

    /**
     * Returns either the output file specified in the constructor or
     * the temporary file created, or null.
     *
     * @return The file for this output stream, or <code>null</code> if no such
     * file exists.
     */
    public File getFile()
    {
        return outputFile;
    }

    /**
     * Closes the underlying output stream, and marks this as closed.
     *
     * @exception IOException if an error occurs.
     */
    @Override
    public void close() throws IOException
    {
        if (!closed)
        {
            currentOutputStream.close();
            closed = true;
        }
    }
    
    /**
     * Flushes the underlying output stream.
     *
     * @exception IOException if an error occurs.
     */
    @Override
    public void flush() throws IOException
    {
        if (!closed)
        {
            currentOutputStream.flush();
        }
    }
    
    /**
     * Writes a single byte to this output stream.
     *
     * @param b the byte.
     *
     * @exception IOException if an error occurs.
     */
    @Override
    public void write(int b) throws IOException
    {
        if (closed)
        {
            throw new IOException("Stream already closed");
        }
        if (!thresholdTriggered && (written + 1 > threshold))
        {
            thresholdReached();
        }
        currentOutputStream.write(b);
        written++;
    }
    
    /**
     * Writes <code>len</code> bytes from the specified byte array starting at
     * offset <code>off</code> to this output stream.
     *
     * @param b the data.
     * @param off the start offset in the data.
     * @param len the number of bytes to write.
     *
     * @exception IOException if an error occurs.
     */
    @Override
    public void write(byte[] b, int off, int len) throws IOException
    {
        if (closed)
        {
            throw new IOException("Stream already closed");
        }
        if (!thresholdTriggered && (written + len > threshold))
        {
            int remain = (int) (threshold - written);
            if (remain > 0)
            {
                currentOutputStream.write(b, off, remain);
                written += remain;
                off += remain;
                len -= remain;
            }
            thresholdReached();
            if (len > 0)
            {
                currentOutputStream.write(b, off, len);
                written += len;
            }
        }
        else
        {
            currentOutputStream.write(b, off, len);
            written += len;
        }
    }

    /**
     * Writes the specified byte array to this output stream.
     *
     * @param b the data.
     *
     * @exception IOException if an error occurs.
     */
    @Override
    public void write(byte[] b) throws IOException
    {
        write(b, 0, b.length);
    }
}
```
