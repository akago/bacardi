1,29d0
< /*
<  * Copyright (c) 2011-2022, jcabi.com
<  * All rights reserved.
<  *
<  * Redistribution and use in source and binary forms, with or without
<  * modification, are permitted provided that the following conditions
<  * are met: 1) Redistributions of source code must retain the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer. 2) Redistributions in binary form must reproduce the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer in the documentation and/or other materials provided
<  * with the distribution. 3) Neither the name of the jcabi.com nor
<  * the names of its contributors may be used to endorse or promote
<  * products derived from this software without specific prior written
<  * permission.
<  *
<  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
<  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
<  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
<  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
<  * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
<  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
<  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
<  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
<  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
<  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
<  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
<  * OF THE POSSIBILITY OF SUCH DAMAGE.
<  */
37a9
> import java.util.Arrays;
48d19
< import org.hamcrest.Matchers;
327d297
<         @Override
332a303,361
>     private static final class Matchers {
>         static <T> Matcher<Iterable<T>> hasItems(final T... items) {
>             return new CustomMatcher<Iterable<T>>(
>                 "iterable containing items " + Arrays.toString(items)
>             ) {
>                 @Override
>                 public boolean matches(final Object item) {
>                     if (!(item instanceof Iterable)) {
>                         return false;
>                     }
>                     Iterable<?> iterable = (Iterable<?>) item;
>                     for (T element : items) {
>                         boolean found = false;
>                         for (Object actual : iterable) {
>                             if ((element == null && actual == null) ||
>                                 (element != null && element.equals(actual))) {
>                                 found = true;
>                                 break;
>                             }
>                         }
>                         if (!found) {
>                             return false;
>                         }
>                     }
>                     return true;
>                 }
>             };
>         }
> 
>         static <T> Matcher<Iterable<T>> emptyIterableOf(final Class<T> clazz) {
>             return new CustomMatcher<Iterable<T>>("an empty iterable") {
>                 @Override
>                 public boolean matches(final Object item) {
>                     if (!(item instanceof Iterable)) {
>                         return false;
>                     }
>                     return !((Iterable<?>) item).iterator().hasNext();
>                 }
>             };
>         }
> 
>         static <T> Matcher<T> notNullValue() {
>             return new CustomMatcher<T>("not null") {
>                 @Override
>                 public boolean matches(final Object item) {
>                     return item != null;
>                 }
>             };
>         }
> 
>         static <T> Matcher<T> not(final Matcher<T> matcher) {
>             return new CustomMatcher<T>("not " + matcher.toString()) {
>                 @Override
>                 public boolean matches(final Object item) {
>                     return !matcher.matches(item);
>                 }
>             };
>         }
>     }
