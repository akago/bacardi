120c120
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount)))
123c123
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
141c141
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount, "reason", "fraudulent")))
148c148
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
162d161
<         assertThat(personalisation.get("paymentExternalId"), is("456"));
164,175c163
<         assertThat(personalisation.get("sendEvidenceToPayDueDate"), is("4 March 2022"));
<         assertThat(personalisation.get("disputedAmount"), is("210.00"));
< 
<         assertThat(personalisation.get("fraudulent"), is("yes"));
<         assertThat(personalisation.get("duplicate"), is("no"));
<         assertThat(personalisation.get("credit_not_processed"), is("no"));
<         assertThat(personalisation.get("product_not_received"), is("no"));
<         assertThat(personalisation.get("product_unacceptable"), is("no"));
<         assertThat(personalisation.get("subscription_canceled"), is("no"));
<         assertThat(personalisation.get("unrecognized"), is("no"));
<         assertThat(personalisation.get("paymentAmount"), is(nullValue()));
<         assertThat(personalisation.get("disputeEvidenceDueDate"), is(nullValue()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
189c177
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccount))
197c185,186
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
212c201
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
226c215
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
234c223,224
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
242c232
<         var emails = adminEmailsCaptor.getValue();
---
>         var emails = adminEmailCaptor.getValue();
249c239
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
259c249
<     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
---
>     void shouldNotCallNotificationServiceWhenServiceDoesNotExist() throws QueueException {
262,263c252,253
<                 .withEventType(EventType.DISPUTE_EVIDENCE_SUBMITTED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventType(EventType.DISPUTE_CREATED.name())
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
265,266d254
<                 .withServiceId(service.getExternalId())
<                 .withLive(true)
271c259,260
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.empty());
277,308d265
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeEvidenceSubmittedEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
< 
<         var emails = adminEmailsCaptor.getValue();
<         var personalisation = personalisationCaptor.getValue();
< 
<         assertThat(emails.size(), is(2));
<         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
<         assertThat(personalisation.get("serviceName"), is(service.getName()));
<         assertThat(personalisation.get("serviceReference"), is("tx ref"));
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
< 
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
<         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
<         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
<     }
< 
<     @Test
<     void shouldNotCallNotificationServiceWhenServiceDoesNotExist() throws QueueException {
<         var mockQueueMessage = mock(QueueMessage.class);
<         disputeEvent = anEventFixture()
<                 .withEventType(EventType.DISPUTE_CREATED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
<                 .withParentResourceExternalId("456")
<                 .build();
<         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.empty());
< 
<         eventMessageHandler.processMessages();
< 
317c274
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
320a278
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
322c280,281
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
323a283
>         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
335c295
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
338a299
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
341c302
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
