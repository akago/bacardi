25d24
< import org.tinfour.common.IIncrementalTin;
26a26
> import org.tinspin.index.kdtree.NNResult;
36,43d35
< /**
<  * Generation of random sets of 2D points having a variety of different
<  * distributions and constraints (and associated functions).
<  * 
<  * @author Michael Carleton
<  * @since 1.2.0
<  *
<  */
45a38
> {
53,64d45
<         /**
<          * Returns a filtered copy of the input, containing no points that are within
<          * the <code>distanceTolerance</code> of each other.
<          * <p>
<          * This method can be used to convert a random point set into a blue-noise-like
<          * (poisson) point set.
<          * 
<          * @param points            list of points to filter
<          * @param distanceTolerance a point that is within this distance of a previously
<          *                          included point is not included in the output
<          * @return
<          */
70c51
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
---
>             if (tree.size() == 0 || tree.nearestNeighbour(coords).getDistance() > distanceTolerance) {
78,87d58
<         /**
<          * Sorts a list of points according to the Hilbert space-filling curve to ensure
<          * a high-degree of spatial locality in the sequence of points.
<          * 
<          * @param points list of points to sort. a list requires at least 24 points to
<          *               be sorted.
<          * @return a sorted <b>copy</b> of the input list, having a different order
<          *         according to points' Hilbert ranking of their (x, y) coordinate
<          * @since 1.3.0
<          */
94d64
<                 // find bounds
129d98
<                 // could also use SortedMap<index -> point>
132d100
<                 // scale coordinates to 2^n - 1
144,156d111
<         /**
<          * Clusters points into N groups, using k-means clustering.
<          * <p>
<          * K-means finds the N cluster centers and assigns points to the nearest cluster
<          * center, such that the squared (euclidean) distances from the cluster are
<          * minimised.
<          * 
<          * @param points list of points to cluster
<          * @param groups desired number of clustered groups
<          * @since 1.4.0
<          * @see #cluster(Collection, int, long)
<          * @return list of groups, where each group is a list of PVectors
<          */
161,174d115
<         /**
<          * Clusters points into N groups, using k-means clustering.
<          * <p>
<          * K-means finds the N cluster centers and assigns points to the nearest cluster
<          * center, such that the squared (euclidean) distances from the cluster are
<          * minimised.
<          * 
<          * @param points list of points to cluster
<          * @param groups desired number of clustered groups
<          * @param seed   random seed
<          * @since 1.4.0
<          * @return list of groups, where each group is a list of PVectors
<          * @see #cluster(Collection, int)
<          */
188,202d128
<         /**
<          * Finds the geometric median point of a set of weighted sample points.
<          * <p>
<          * The median point is the point that minimises the sum of (weighted) distances
<          * to the sample points.
<          * <p>
<          * Points are expressed as PVectors; the z coordinate is used as the weight for
<          * each point. Weights must be positive. If every point has a weight of 0 (z=0),
<          * the function returns the median as if each point had an equal non-zero weight
<          * (set to 1).
<          * 
<          * @param points list of points, where the z coordinate is point weight
<          * @since 1.4.0
<          * @return 2D median point
<          */
210,221d135
<         /**
<          * Generates a set of random (uniform) points that lie within a bounding
<          * rectangle.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          * @see #random(double, double, double, double, int, long) seeded random()
<          */
226,239d139
<         /**
<          * Generates a set of random (uniform) points that lie within a bounding
<          * rectangle, using the specified seed.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @param seed number used to initialize the underlying pseudorandom number
<          *             generator
<          * @return
<          * @see #random(double, double, double, double, int) non-seeded random()
<          */
251,264d150
<         /**
<          * Generates a set of random points having a gaussian/normal distribution. The
<          * point set is centered around the given center, given by mean coordinates.
<          * 
<          * @param centerX x coordinate of the center/mean of the point set
<          * @param centerY x coordinate of the center/mean of the point set
<          * @param sd      standard deviation, which specifies how much the values can
<          *                vary from the mean. 68% of point samples have a value within
<          *                one standard deviation of the mean; three standard deviations
<          *                account for 99.7% of the sample population
<          * @param n       number of points to generate
<          * @return
<          * @see #gaussian(double, double, double, int, long) seeded gaussian()
<          */
269,285d154
<         /**
<          * Generates a set of random points having a gaussian/normal distribution, using
<          * the specified seed. The point set is centered around the given center, given
<          * by mean coordinates.
<          * 
<          * @param centerX x coordinate of the center/mean of the point set
<          * @param centerY x coordinate of the center/mean of the point set
<          * @param sd      standard deviation, which specifies how much the values can
<          *                vary from the mean. 68% of point samples have a value within
<          *                one standard deviation of the mean; three standard deviations
<          *                account for 99.7% of the sample population
<          * @param n       number of points to generate
<          * @param seed    number used to initialize the underlying pseudorandom number
<          *                generator
<          * @return
<          * @see #gaussian(double, double, double, int) non-seeded gaussian()
<          */
292c161
<                         points.add(new PVector(x, y));
---
>             points.add(new PVector(x, y);
297,308c166
<         /**
<          * Generates a square grid/lattice of points that lie within a bounding
<          * rectangle.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @return
<          */
<         public static List<PVector> squareGrid(final double xMin, final double yMin, final double xMax, final double yMax,
<                         final double pointDistance) {
---
>     public static List<PVector> squareGrid(final double xMin, final double yMin, final double xMax, final double yMax, final double pointDistance) {
316c174
<                                 points.add(new PVector((float) (x + xMin), (float) (y + yMin)));
---
>                 points.add(new PVector((float) (x + xMin), (float) (y + yMin));
322,334d179
<         /**
<          * Generates a hexagon grid/lattice of points that lie within a bounding
<          * rectangle.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          * @see #hexGrid(double, double, double, double, double) hexGrid() where
<          *      inter-point distance is specified
<          */
339,340c184,185
<                 final float h = (float) Math.sqrt((width * height * (Math.sqrt(5) / 2)) / n);
<                 final float v = (float) (h * (2 / Math.sqrt(5)));
---
>         final float h = (float) Math.sqrt((width * height * (Math.sqrt(5) / 2)) / n;
>         final float v = (float) (h * (2 / Math.sqrt(5));
345c190
<                                 points.add(new PVector((i - (j % 2) / 2f) * h + (float) xMin, j * v + (float) yMin));
---
>                 points.add(new PVector((float) ((i - (j % 2) / 2f) * h + xMin, (float) (j * v + yMin));
351,364c196
<         /**
<          * Generates a hexagon grid of points that lie within a bounding rectangle.
<          * 
<          * @param xMin          x-coordinate of boundary minimum
<          * @param yMin          y-coordinate of boundary minimum
<          * @param xMax          x-coordinate of boundary maximum
<          * @param yMax          y-coordinate of boundary maximum
<          * @param pointDistance inter-point distance
<          * @return
<          * @see #hexGrid(double, double, double, double, int) hexGrid() where number of
<          *      points is specified
<          */
<         public static List<PVector> hexGrid(final double xMin, final double yMin, final double xMax, final double yMax,
<                         final double pointDistance) {
---
>     public static List<PVector> hexGrid(final double xMin, final double yMin, final double xMax, final double yMax, final double pointDistance) {
372c204
<                                 points.add(new PVector((float) ((i - (j % 2) / 2f) * pointDistance + xMin), (float) (j * pointDistance + yMin)));
---
>                 points.add(new PVector((float) ((i - (j % 2) / 2f) * pointDistance + xMin, (float) (j * pointDistance + yMin);
378,386d209
<         /**
<          * Generates a hexagonal grid of points <b>arranged in a hexagon pattern</b>.
<          * 
<          * @param centerX x coordinate of the hexagon center point
<          * @param centerY y coordinate of the hexagon center point
<          * @param length  layers/no. of points on each hexagon side
<          * @distance inter-point distance
<          * @return
<          */
394,396d216
<                 /*
<                  * PVector .z is set to length so hexagon layer can be easily identified.
<                  */
401c221
<                                 points.add(new PVector(x + xOffset, y + yOffset, length));
---
>                 points.add(new PVector(x + xOffset, y + yOffset, length);
403c223
<                                         points.add(new PVector(x + xOffset, -y + yOffset, length));
---
>                     points.add(new PVector(x + xOffset, -y + yOffset, length);
410,423d229
<         /**
<          * Generates a set of n points that are randomly distributed on a ring
<          * (annulus).
<          * 
<          * @param centerX     x coordinate of the center/mean of the ring
<          * @param centerY     x coordinate of the center/mean of the ring
<          * @param innerRadius radius of the ring's hole
<          * @param outerRadius outer radius of the ring
<          * @param maxAngle    angle of the ring (in radians). Can be negative
<          * @param n           the number of random points to generate
<          * @return a list of PVector objects representing the (x, y) coordinates of the
<          *         random points
<          * @see #ring(double, double, double, double, double, int, long) seeded ring()
<          */
428,444c234
<         /**
<          * Generates a set of points that are randomly distributed on a ring (annulus).
<          * 
<          * @param centerX     x coordinate of the center/mean of the ring
<          * @param centerY     x coordinate of the center/mean of the ring
<          * @param innerRadius radius of the ring's hole
<          * @param outerRadius outer radius of the ring
<          * @param maxAngle    angle of the ring (in radians). Can be negative
<          * @param n           the number of random points to generate
<          * @param seed        number used to initialize the underlying pseudorandom
<          *                    number generator
<          * @return a list of PVector objects representing the (x, y) coordinates of the
<          *         random points
<          * @see #ring(double, double, double, double, double, int) non-seeded ring()
<          */
<         public static List<PVector> ring(double centerX, double centerY, double innerRadius, double outerRadius, double maxAngle, int n,
<                         long seed) {
---
>     public static List<PVector> ring(double centerX, double centerY, double innerRadius, double outerRadius, double maxAngle, int n, long seed) {
451c241
<                         double randomAngle = (maxAngle < 0 ? -1 : 1) * random.nextDouble(Math.abs(maxAngle));
---
>             double randomAngle = (maxAngle < 0 ? -1 : 1) * random.nextDouble(Math.abs(maxAngle);
456c246
<                         points.add(new PVector((float) (x + centerX), (float) (y + centerY)));
---
>             points.add(new PVector((float) (x + centerX), (float) (y + centerY);
461,477d250
<         /**
<          * Generates a set of random points (constrained within a rectangular region)
<          * via Poisson Disk Sampling.
<          * <p>
<          * Poisson-disc sampling produces points that are tightly-packed, but no closer
<          * to each other than a specified minimum distance, resulting in a more natural
<          * and desirable pattern for many applications. This distribution is also
<          * described as blue noise.
<          * 
<          * @param xMin    x-coordinate of boundary minimum
<          * @param yMin    y-coordinate of boundary minimum
<          * @param xMax    x-coordinate of boundary maximum
<          * @param yMax    y-coordinate of boundary maximum
<          * @param minDist minimum euclidean distance between any two points
<          * @return
<          * @see #poisson(double, double, double, double, double, long) seeded poisson()
<          */
482,500d254
<         /**
<          * Generates a set of random points (constrained within a rectangular region)
<          * via Poisson Disk Sampling, using the specified seed.
<          * <p>
<          * Poisson-disc sampling produces points that are tightly-packed, but no closer
<          * to each other than a specified minimum distance, resulting in a more natural
<          * and desirable pattern for many applications. This distribution is also
<          * described as blue noise.
<          * 
<          * @param xMin    x-coordinate of boundary minimum
<          * @param yMin    y-coordinate of boundary minimum
<          * @param xMax    x-coordinate of boundary maximum
<          * @param yMax    y-coordinate of boundary maximum
<          * @param minDist minimum euclidean distance between any two points
<          * @param seed    number used to initialize the underlying pseudorandom number
<          *                generator
<          * @return
<          * @see #poisson(double, double, double, double, double) non-seeded poisson()
<          */
506,523d259
<         /**
<          * Generates a poisson point set having N points constrained within a
<          * rectangular region.
<          * <p>
<          * Poisson-disc sampling produces points that are tightly-packed, but no closer
<          * to each other than a specified minimum distance, resulting in a more natural
<          * and desirable pattern for many applications. This distribution is also
<          * described as blue noise.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    target size of poisson point set
<          * @param seed number used to initialize the underlying pseudorandom number
<          *             generator
<          * @return
<          */
529,772d264
<         /**
<          * Generates a set of points arranged in a phyllotaxis pattern (an arrangement
<          * similar to the florets in the head of a sunflower), using the golden ratio
<          * (the most irrational number) to position points with the least possible
<          * aliasing (which is arguably the "best" arrangement).
<          * 
<          * @param centerX x coordinate of the center of the point set
<          * @param centerY y coordinate of the center of the point set
<          * @param n       number of points to generate
<          * @param radius  radius of circular phyllotaxis extent (max distance of a point
<          *                from the center position)
<          * @return
<          */
<         public static List<PVector> phyllotaxis(double centerX, double centerY, int n, double radius) {
<                 return phyllotaxis(centerX, centerY, n, radius, 2 * Math.PI - GOLDEN_ANGLE);
<         }
< 
<         /**
<          * Generates a set of points arranged in a phyllotaxis pattern (an arrangement
<          * similar to the florets in the head of a sunflower), using a user-defined
<          * theta.
<          * 
<          * @param centerX x coordinate of the center of the point set
<          * @param centerY y coordinate of the center of the point set
<          * @param n       number of points to generate
<          * @param radius  radius of circular phyllotaxis extent (max distance of a point
<          *                from the center position)
<          * @param theta   angle (in radians) to turn after each point placement
<          * @return
<          */
<         public static List<PVector> phyllotaxis(double centerX, double centerY, int n, double radius, double theta) {
<                 final double fillArea = radius * radius * Math.PI; // calculate area to be filled
<                 final double circleSpace = (fillArea / n); // area per circle
<                 final double fudge = 0.7; // Fudge factor: breathing space between circles
<                 final float circleRadius = (float) (Math.sqrt(circleSpace / Math.PI) * fudge);
< 
<                 float cumArea = 0; // cumulative circle area
< 
<                 final List<PVector> outList = new ArrayList<>();
<                 for (int i = 1; i <= n; ++i) {
<                         final double angle = i * theta; // rotation per circle
<                         cumArea += circleSpace; // add sm_area to cum_area every loop
< 
<                         final double spiralR = Math.sqrt(cumArea / Math.PI); // expansion of spiral (distance of circle) per loop
< 
<                         float pX = (float) (centerX + Math.cos(angle) * spiralR); // spiral rotation of golden angle per loop on X
<                         float pY = (float) (centerY + Math.sin(angle) * spiralR); // spiral rotation of golden angle per loop on Y
< 
<                         outList.add(new PVector(pX, pY, circleRadius));
<                 }
<                 return outList;
<         }
< 
<         /**
<          * Generates a set of deterministic stratified points (bounded by a rectangle)
<          * from a low discrepancy sequence (LDS) based on an irrational number (the
<          * plastic constant).
<          * <p>
<          * The <i>plastic LDS</i> has been <a href=
<          * "http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/">shown</a>
<          * to have superior low discrepancy properties amongst the quasirandom
<          * sequences, and is therefore recommended.
<          * <p>
<          * Low discrepancy sequences are deterministic (not randomized) number sequences
<          * that are low discrepancy - meaning the points tend not to clump together and
<          * leave holes; the resulting point set is more evenly spaced than a simple
<          * random distribution but less regular than lattices.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          */
<         public static List<PVector> plasticLDS(double xMin, double yMin, double xMax, double yMax, int n) {
<                 // https://github.com/Atrix256/SampleZoo/blob/master/src/families/_2d/samples/irrational_numbers/irrational_numbers.cpp
<                 final double w = xMax - xMin;
<                 final double h = yMax - yMin;
<                 final double p = 1.32471795724474602596; // plastic constant
<                 final double a1 = 1.0 / p; // inverse of plastic number
<                 final double a2 = 1.0 / (p * p);
< 
<                 final List<PVector> points = new ArrayList<>(n);
<                 for (int i = 0; i < n; i++) {
<                         final float x = (float) (((0.5 + a1 * i) % 1) * w + xMin);
<                         final float y = (float) (((0.5 + a2 * i) % 1) * h + yMin);
<                         points.add(new PVector(x, y));
<                 }
<                 return points;
<         }
< 
<         /**
<          * Generates a set of deterministic stratified points (bounded by a rectangle)
<          * from a low discrepancy sequence (LDS) based on an irrational number. In this
<          * method, a random jitter is added to points to give the point set
<          * blue-noise-like properties.
<          * <p>
<          * Low discrepancy sequences are deterministic (not randomized) number sequences
<          * that are low discrepancy - meaning the points tend not to clump together and
<          * leave holes; the resulting point set is more evenly spaced than a simple
<          * random distribution but less regular than lattices.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          * @see #plasticJitteredLDS(double, double, double, double, int, long) seeded
<          *      irrationalJitteredLDS()
<          */
<         public static List<PVector> plasticJitteredLDS(double xMin, double yMin, double xMax, double yMax, int n) {
<                 return plasticJitteredLDS(xMin, yMin, xMax, yMax, n, System.nanoTime());
<         }
< 
<         /**
<          * Generates a set of deterministic stratified points (bounded by a rectangle)
<          * from a low discrepancy sequence (LDS) based on an irrational number. In this
<          * method, a random jitter is added to points to give the point set
<          * blue-noise-like properties.
<          * <p>
<          * Low discrepancy sequences are deterministic (not randomized) number sequences
<          * that are low discrepancy - meaning the points tend not to clump together and
<          * leave holes; the resulting point set is more evenly spaced than a simple
<          * random distribution but less regular than lattices.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @param seed number used to initialize the underlying pseudorandom number
<          *             generator
<          * @return
<          * @see #plasticJitteredLDS(double, double, double, double, int) non-seeded
<          *      irrationalJitteredLDS()
<          */
<         public static List<PVector> plasticJitteredLDS(double xMin, double yMin, double xMax, double yMax, int n, long seed) {
<                 // https://github.com/Atrix256/SampleZoo/blob/master/src/families/_2d/samples/irrational_numbers/irrational_numbers.cpp
<                 final double w = xMax - xMin;
<                 final double h = yMax - yMin;
< 
<                 final SplittableRandom random = new SplittableRandom(seed);
<                 final double p = 1.32471795724474602596; // plastic constant
<                 final double a1 = 1.0 / p;
<                 final double a2 = 1.0 / (p * p);
<                 final double c_magicNumber = 0.732;
< 
<                 final List<PVector> points = new ArrayList<>(n);
<                 for (int i = 0; i < n; i++) {
<                         final float x = (float) (((random.nextDouble() * c_magicNumber / Math.sqrt(i + 1d) + a1 * i) % 1) * w + xMin);
<                         final float y = (float) (((random.nextDouble() * c_magicNumber / Math.sqrt(i + 1d) + a2 * i) % 1) * h + yMin);
<                         points.add(new PVector(x, y));
<                 }
<                 return points;
<         }
< 
<         /**
<          * Generates a set of deterministic stratified points (bounded by a rectangle)
<          * from a low discrepancy sequence (LDS) based on a Halton sequence.
<          * <p>
<          * Low discrepancy sequences are deterministic (not randomized) number sequences
<          * that are low discrepancy - meaning the points tend not to clump together and
<          * leave holes; the resulting point set is more evenly spaced than a simple
<          * random distribution but less regular than lattices.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          */
<         public static List<PVector> haltonLDS(double xMin, double yMin, double xMax, double yMax, int n) {
<                 final double w = xMax - xMin;
<                 final double h = yMax - yMin;
<                 float[][] values = new float[n][2];
<                 vanDerCorput(values, 2, 0, true, 0);
<                 vanDerCorput(values, 3, 1, true, 0);
< 
<                 final List<PVector> points = new ArrayList<>(n);
<                 for (float[] point : values) {
<                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin)));
<                 }
<                 return points;
<         }
< 
<         /**
<          * Generates a set of deterministic stratified points (bounded by a rectangle)
<          * from a low discrepancy sequence (LDS) based on a Hammersley sequence.
<          * <p>
<          * The Hammersley sequence in 2D is just the 1d Van Der Corput sequence on one
<          * axis, and regular sampling on the other axis.
<          * <p>
<          * Low discrepancy sequences are deterministic (not randomized) number sequences
<          * that are low discrepancy - meaning the points tend not to clump together and
<          * leave holes; the resulting point set is more evenly spaced than a simple
<          * random distribution but less regular than lattices.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          */
<         public static List<PVector> hammersleyLDS(double xMin, double yMin, double xMax, double yMax, int n) {
<                 final double w = xMax - xMin;
<                 final double h = yMax - yMin;
< 
<                 float[][] values = new float[n][2];
<                 vanDerCorput(values, 2, 0, false, 0);
< 
<                 final float offset = 1.0f / (n * 2);
<                 for (int i = 0; i < n; ++i) {
<                         values[i][1] = offset + (i / (float) n);
<                 }
< 
<                 final List<PVector> points = new ArrayList<>(n);
<                 for (float[] point : values) {
<                         points.add(new PVector((float) (point[0] * w + xMin), (float) (point[1] * h + yMin)));
<                 }
<                 return points;
<         }
< 
<         /**
<          * Generates a set of random stratified points (bounded by a rectangle) based on
<          * the "N-Rooks" sampling pattern.
<          * <p>
<          * N-Rooks is a sampling pattern where you treat the boundary as if it were a
<          * chess board. Every sampling position is a rook that could move horizontally
<          * or vertically, and should be placed such that none of these rooks could
<          * capture/"see" any of the other rooks. In other words, every column has a
<          * single sample point in it, and every row has a single sample point in it.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @return
<          * @see #nRooksLDS(double, double, double, double, int, long)
<          */
777,796d268
<         /**
<          * Generates a set of random stratified points (bounded by a rectangle) based on
<          * the "N-Rooks" sampling pattern.
<          * <p>
<          * N-Rooks is a sampling pattern where you treat the boundary as if it were a
<          * chess board. Every sampling position is a rook that could move horizontally
<          * or vertically, and should be placed such that none of these rooks could
<          * capture/"see" any of the other rooks. In other words, every column has a
<          * single sample point in it, and every row has a single sample point in it.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @param seed number used to initialize the underlying pseudorandom number
<          *             generator
<          * @return
<          * @see #nRooksLDS(double, double, double, double, int)
<          */
802c274
<                 Collections.shuffle(rookPositions, new XoRoShiRo128PlusRandom(seed));
---
>         Collections.shuffle(rookPositions, new XoRoShiRo128PlusRandom(seed);
805d276
< 
807,808c278,279
<                 for (int i = 0; i < n; i++) {
<                         float x = offset + (rookPositions.get(i) / (float) n);
---
>         for (int i = 0; i < n; ++i) {
>             float x = offset + (rookPositions.get(i) / (float) n;
814c285
<                         points.add(new PVector(x, y));
---
>             points.add(new PVector(x, y);
820,836d290
<         /**
<          * Generates a 2D set of deterministic stratified points (bounded by a
<          * rectangle) from the Sobol low discrepancy sequence (LDS).
<          * <p>
<          * A Sobol sequence is a low-discrepancy sequence with the property that for all
<          * values of N,its subsequence (x1, ... xN) has a low discrepancy. It can be
<          * used to generate pseudo-randompoints in a space S, which are
<          * equi-distributed.
<          * 
<          * @param xMin x-coordinate of boundary minimum
<          * @param yMin y-coordinate of boundary minimum
<          * @param xMax x-coordinate of boundary maximum
<          * @param yMax y-coordinate of boundary maximum
<          * @param n    number of points to generate
<          * @since 1.4.0
<          * @return
<          */
850,862c304
<                         direction[0][i] = 1l << (BITS - i);
<                 }
< 
<                 // init direction vector
<                 final int d = 1;
<                 for (int i = 1; i <= s; i++) {
<                         direction[d][i] = ((long) m[i]) << (BITS - i);
<                 }
<                 for (int i = s + 1; i <= BITS; i++) {
<                         direction[d][i] = direction[d][i - s] ^ (direction[d][i - s] >> s);
<                         for (int k = 1; k <= s - 1; k++) {
<                                 direction[d][i] ^= ((a >> (s - 1 - k)) & 1) * direction[d][i - k];
<                         }
---
>             direction[0][i] = 1l << (BITS - i;
868d309
<                         // find the index c of the rightmost 0
884c325
<                         output.add(new PVector((float) vX, (float) vY));
---
>             output.add(new PVector((float) vX, (float) vY;
890,971d330
<         /**
<          * Computes the <i>Euclidean minimum spanning tree</i> (EMST) of a set of
<          * points.
<          * <p>
<          * The EMST is a system of line segments, having only the given points as their
<          * endpoints, whose union includes all of the points in a connected set, and
<          * which has the minimum possible total length of any such system.
<          * 
<          * @param points the set of points over which to compute the EMST
<          * @return a LINES PShape
<          * @since 1.3.0
<          */
<         public static PShape minimumSpanningTree(List<PVector> points) {
<                 /*
<                  * The Euclidean minimum spanning tree in a plane is a subgraph of the Delaunay
<                  * triangulation.
<                  */
<                 IIncrementalTin triangulation = PGS_Triangulation.delaunayTriangulationMesh(points);
<                 SimpleGraph<PVector, PEdge> graph = PGS_Triangulation.toGraph(triangulation);
<                 SpanningTreeAlgorithm<PEdge> st = new PrimMinimumSpanningTree<>(graph); // faster than kruskal algorithm
<                 return PGS_SegmentSet.toPShape(st.getSpanningTree().getEdges());
<         }
< 
<         /**
<          * Computes the hilbert index of a coordinate on a hilbert curve of order n.
<          */
<         private static int xy2Hilbert(final int px, final int py, final int n) {
<                 int i, xi, yi;
<                 int s, temp;
< 
<                 int x = px;
<                 int y = py;
<                 s = 0; // Initialize.
<                 for (i = n - 1; i >= 0; i--) {
<                         xi = (x >> i) & 1; // Get bit i of x.
<                         yi = (y >> i) & 1; // Get bit i of y.
< 
<                         if (yi == 0) {
<                                 temp = x; // Swap x and y and,
<                                 x = y ^ (-xi); // if xi = 1,
<                                 y = temp ^ (-xi); // complement them.
<                         }
<                         s = 4 * s + 2 * xi + (xi ^ yi); // Append two bits to s.
<                 }
<                 return s;
<         }
< 
<         /**
<          * @param values
<          * @param base
<          * @param axis         0 = x axis; 1 = y axis
<          * @param skipZero
<          * @param truncateBits
<          */
<         private static void vanDerCorput(float[][] values, int base, int axis, boolean skipZero, int truncateBits) {
<                 // https://blog.demofox.org/2017/05/29/when-random-numbers-are-too-random-low-discrepancy-sequences/
<                 // https://github.com/Atrix256/SampleZoo/blob/master/src/families/_2d/samples/lds/LDS.cpp
<                 // figure out how many bits we are working in.
<                 int n = values.length;
<                 int value = 1;
<                 int numBits = 0;
<                 while (value < n) {
<                         value *= 2;
<                         ++numBits;
<                 }
<                 int numBitsPreserved = numBits - truncateBits;
<                 int bitsPreservedMask = numBitsPreserved > 0 ? (1 << numBitsPreserved) - 1 : 0;
< 
<                 for (int i = 0; i < n; ++i) {
<                         values[i][axis] = 0.0f;
<                         float denominator = base;
<                         int q = i + (skipZero ? 1 : 0);
<                         q &= bitsPreservedMask;
<                         while (q > 0) {
<                                 int multiplier = q % base;
<                                 values[i][axis] += multiplier / denominator;
<                                 q = q / base;
<                                 denominator *= base;
<                         }
<                 }
<         }
< 
981d339
<                 @Override
986d343
< 
