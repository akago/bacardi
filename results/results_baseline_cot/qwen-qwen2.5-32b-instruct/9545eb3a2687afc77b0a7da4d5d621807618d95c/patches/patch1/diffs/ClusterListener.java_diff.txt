1,15d0
< /*
<  * Copyright (C) 1999-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,22c3,4
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.EntryListener;
< import com.hazelcast.core.LifecycleEvent;
< import com.hazelcast.core.LifecycleEvent.LifecycleState;
< import com.hazelcast.core.LifecycleListener;
---
> import com.hazelcast.core.HazelcastInstance;
> import com.hazelcast.core.HazelcastInstanceAware;
24d5
< import com.hazelcast.core.MemberAttributeEvent;
26a8,12
> import com.hazelcast.core.LifecycleEvent;
> import com.hazelcast.core.LifecycleListener;
> import com.hazelcast.core.MemberSelector;
> import com.hazelcast.core.MemberAttributeEvent;
> import com.hazelcast.core.IMap;
52c38
< public class ClusterListener implements MembershipListener, LifecycleListener {
---
> public class ClusterListener implements MembershipListener, LifecycleListener, HazelcastInstanceAware {
60c46
<     private final Cluster cluster;
---
>     private final HazelcastInstance cluster;
63,75c49
<     /**
<      * Flag that indicates if the listener has done all clean up work when noticed that the
<      * cluster has been stopped. This will force Openfire to wait until all clean
<      * up (e.g. changing caches implementations) is done before destroying the plugin.
<      */
<     private boolean done = true;
<     /**
<      * Flag that indicates if we've joined a cluster or not
<      */
<     private boolean clusterMember = false;
<     private boolean isSenior;
< 
<     ClusterListener(final Cluster cluster) {
---
>     public ClusterListener(final HazelcastInstance cluster) {
76a51
>     {
101c76
<         if (!isDone()) { // already joined
---
>         if (isDone()) { // not a cluster member
104,105d78
< 
<         // Trigger events
108a82,83
>         // Trigger event. Wait until the listeners have processed the event. Caches will be populated
>         // again with local content.
111,112c86,89
<         if (seniorClusterMember) {
<             ClusterManager.fireMarkedAsSeniorClusterMember();
---
>         if (!XMPPServer.getInstance().isShuttingDown()) {
>             // Remove traces of directed presences sent from local entities to handlers that no longer exist.
>             // At this point c2s sessions are gone from the routing table so we can identify expired sessions
>             XMPPServer.getInstance().getPresenceUpdateHandler().removedExpiredPresences();
114,120d90
< 
<         waitForClusterCacheToBeInstalled();
< 
<         // Let the other nodes know that we joined the cluster
<         logger.debug("Done joining the cluster. Now proceed informing other nodes that we joined the cluster.");
<         CacheFactory.doClusterTask(new NewClusterMemberJoinedTask());
< 
145c115
<             // Remove traces of directed presences sent from local entities to handlers that no longer exist
---
>             // Remove traces of directed presences sent from local entities to handlers that no longer exist.
158d127
<         final boolean wasSenior = isSenior;
160d128
<         // local member only
162,163d129
<         if (event.getMember().localMember()) { // We left and re-joined the cluster
<             joinCluster();
164a131,134
>         if (event.getMember().localMember()) {
>             logger.info("Leaving cluster: " + nodeID);
>             // This node may have realized that it got kicked out of the cluster
>             leaveCluster();
166,170c136,137
<             if (wasSenior && !isSenior) {
<                 logger.warn("Recovering from split-brain; firing leftCluster()/joinedCluster() events");
<                 ClusteredCacheFactory.fireLeftClusterAndWaitToComplete(Duration.ofSeconds(30));
<                 logger.debug("Firing joinedCluster() event");
<                 ClusterManager.fireJoinedCluster(false);
---
>             // Trigger event that a node left the cluster
>             ClusterManager.fireLeftCluster(nodeID.toByteArray());
172,176c139,141
<                 try {
<                     logger.debug("Postponing notification of other nodes for 30 seconds. This allows all local leave/join processing to be finished and local cache backups to be stabilized before receiving events from other nodes.");
<                     Thread.sleep(30000L);
<                 } catch (InterruptedException e) {
<                     logger.warn("30 Second wait was interrupted.", e);
---
>             if (!seniorClusterMember && isSeniorClusterMember()) {
>                 seniorClusterMember = true;
>                 ClusterManager.fireMarkedAsSeniorClusterMember();
179,187c144,146
<                 // The following line was intended to wait until all local handling finishes before informing other
<                 // nodes. However that proved to be insufficient. Hence the 30 second default wait in the lines above.
<                 // TODO Instead of the 30 second wait, we should look (and then wait) for some trigger or event that signifies that local handling has completed and caches have stabilized.
<                 waitForClusterCacheToBeInstalled();
< 
<                 // Let the other nodes know that we joined the cluster
<                 logger.debug("Done joining the cluster in split brain recovery. Now proceed informing other nodes that we joined the cluster.");
<                 CacheFactory.doClusterTask(new NewClusterMemberJoinedTask());
<             }
---
>             // Remove traces of directed presences sent from local entities to handlers that no longer exist.
>             // At this point c2s sessions are gone from the routing table so we can identify expired sessions
>             XMPPServer.getInstance().getPresenceUpdateHandler().removedExpiredPresences();
189,190c148,150
<         clusterNodesInfo.put(nodeID,
<                 new HazelcastClusterNodeInfo(event.getMember(), cluster.getClusterTime()));
---
>         // Delete nodeID instance (release from memory)
>         NodeID.deleteInstance(nodeID.toByteArray());
>         clusterNodesInfo.remove(nodeID);
195,201c155
<      * for executing cluster tasks immediately after joining. If this wait is not performed, the cache factory may still
<      * be using the 'default' strategy instead of the 'hazelcast' strategy, which leads to cluster tasks being silently
<      * discarded.
<      *
<      * The method will keep trying this for 10 minutes. After that the thread is released regardless of the result.
<      *
<      * @return Boolean indicating whether the clustered cache was actually observed to be installed.
---
>      * for executing cluster tasks immediately after joining.
256,269d209
<     @SuppressWarnings("WeakerAccess")
<     public List<ClusterNodeInfo> getClusterNodesInfo() {
<         return new ArrayList<>(clusterNodesInfo.values());
<     }
< 
<     @Override
<     public void stateChanged(final LifecycleEvent event) {
<         if (event.getState().equals(LifecycleState.SHUTDOWN)) {
<             leaveCluster();
<         } else if (event.getState().equals(LifecycleState.STARTED)) {
<             joinCluster();
<         }
<     }
< 
281a222,226
> 
>     @Override
>     public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
>         this.cluster = hazelcastInstance;
>     }
