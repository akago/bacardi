4,12d3
< import redis.clients.jedis.commands.BasicRedisPipeline;
< import redis.clients.jedis.commands.BinaryRedisPipeline;
< import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
< import redis.clients.jedis.commands.ClusterPipeline;
< import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
< import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
< import redis.clients.jedis.commands.RedisPipeline;
< import redis.clients.jedis.commands.ScriptingCommandsPipeline;
< 
20,24c11
< public interface RedisGraphTransaction extends
<         MultiKeyBinaryRedisPipeline,
<         MultiKeyCommandsPipeline, ClusterPipeline,
<         BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
<         BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {
---
> public interface RedisGraphTransaction extends Closeable {
52,80d38
<      * Execute a Cypher read-only query with timeout.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param timeout
<      * @return a response which builds the result set with the query answer.
<      */
<     Response<ResultSet> readOnlyQuery(String graphId, String query, long timeout);
< 
<     /**
<      * Execute a Cypher query with arguments
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param args
<      * @return a response which builds the result set with the query answer.
<      * @deprecated use {@link #query(String, String, Map)} instead.
<      */
<     @Deprecated
<     Response<ResultSet> query(String graphId, String query, Object ...args);
< 
<     /**
<      * Executes a cypher query with parameters.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @return  a response which builds the result set with the query answer.
<      */
<     Response<ResultSet> query(String graphId, String query, Map<String, Object> params);
< 
<     /**
100,109d57
<      * Executes a cypher read-only query with parameters and timeout.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @param timeout
<      * @return  a response which builds the result set with the query answer.
<      */
<     Response<ResultSet> readOnlyQuery(String graphId, String query, Map<String, Object> params, long timeout);
< 
<     /**
118,126d65
<      * Invokes stored procedure with arguments
<      * @param graphId a graph to perform the query on
<      * @param procedure procedure name to invoke
<      * @param args procedure arguments
<      * @return a response which builds result set with the procedure data
<      */
<     Response<ResultSet> callProcedure(String graphId, String procedure, List<String> args);
< 
<     /**
143d81
< 
151,152c89
<      * If object is in transaction mode,
<      * flushes all previously queued commands in a transaction and restores the connection state to normal
---
>      * Flushes all previously queued commands in a transaction and restores the connection state to normal
