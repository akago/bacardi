120c120
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
123c123
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
141c141
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount, "reason", "fraudulent"))
148c148
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
173d172
<         assertThat(personalisation.get("unrecognized"), is("no"));
189c188
<                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccount))
197c196,197
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
> 
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
212c212
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
226c226
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
234,235c234,235
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service));
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
249c249
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
259c259
<     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
---
>     void shouldHandleDisputeLostEvent() throws QueueException {
262,263c262,263
<                 .withEventType(EventType.DISPUTE_EVIDENCE_SUBMITTED.name())
<                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccountId)))
---
>                 .withEventType(EventType.DISPUTE_LOST.name())
>                 .withEventDetails(objectMapper.valueToTree(Map.of("net_amount", -4000L, "fee", 1500L, "amount", 2500L, "gateway_account_id", gatewayAccount))
271,272c271,309
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
>         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
> 
>         eventMessageHandler.processMessages();
> 
>         verify(mockNotificationService, atMostOnce()).sendStripeDisputeLostEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
> 
>         var emails = adminEmailsCaptor.getValue();
>         var personalisation = personalisationCaptor.getValue();
> 
>         assertThat(emails.size(), is(2));
>         assertThat(emails, hasItems("admin1@service.gov.uk", "admin2@service.gov.uk"));
>         assertThat(personalisation.get("serviceName"), is(service.getName()));
>         assertThat(personalisation.get("serviceReference"), is("tx ref"));
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
> 
>         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
> 
>         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
>         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
>         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
>     }
> 
>     @Test
>     void shouldHandleDisputeWonEvent() throws QueueException {
>         var mockQueueMessage = mock(QueueMessage.class);
>         disputeEvent = anEventFixture()
>                 .withEventType(EventType.DISPUTE_WON.name())
>                 .withEventDetails(objectMapper.valueToTree(Map.of("gateway_account_id", gatewayAccount))
>                 .withParentResourceExternalId("456")
>                 .withServiceId(service.getExternalId())
>                 .withLive(true)
>                 .build();
>         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
>         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
>         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
277c314
<         verify(mockNotificationService, atMostOnce()).sendStripeDisputeEvidenceSubmittedEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
---
>         verify(mockNotificationService, atMostOnce()).sendStripeDisputeWonEmail(adminEmailsCaptor.capture(), personalisationCaptor.capture());
286c323
<         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName()));
---
>         assertThat(personalisation.get("organisationName"), is(service.getMerchantDetails().getName));
300c337
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccount))
304,305c341,342
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.empty());
---
>         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage);
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.empty());
317c354
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
321,322c358,359
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
---
>         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage);
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
335c372
<                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
---
>                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccount))
339,342c376,378
<         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
< 
<         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
<         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
---
>         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage);
>         when(mockServiceFinder.byGatewayAccountId(gatewayAccount)).thenReturn(Optional.of(service);
>         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction);
