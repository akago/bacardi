38,39c38
<  * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which
<  * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.
---
>  * See {@code AgentConfiguration.name} for more information on the return value.
52c51
<     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$))");
---
>     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$)");
124,211d122
<      * Returns the root OIDs of the bindings.
<      *
<      * @param bindings the variable bindings
<      * @return the roots of the specified variable bindings
<      */
<     private static List<OID> getRoots(final SortedMap<OID, Variable> bindings) {
<         final List<OID> potentialRoots = new ArrayList<>(bindings.size());
< 
<         OID last = null;
<         for (final OID oid : bindings.keySet()) {
<             if (last != null) {
<                 int min = Math.min(oid.size(), last.size());
<                 while (min > 0) {
<                     if (oid.leftMostCompare(min, last) == 0) {
<                         OID root = new OID(last.getValue(), 0, min);
<                         potentialRoots.add(root);
<                         break;
<                     }
<                     min--;
<                 }
<             }
<             last = oid;
<         }
<         Collections.sort(potentialRoots);
< 
<         final List<OID> roots = new ArrayList<>(potentialRoots.size());
<         potentialRoots.stream().filter(potentialRoot -> potentialRoot.size() > 0).forEach(potentialRoot -> {
<             OID trimmedPotentialRoot = new OID(potentialRoot.getValue(), 0, potentialRoot.size() - 1);
<             while (trimmedPotentialRoot.size() > 0 && Collections.binarySearch(potentialRoots, trimmedPotentialRoot) < 0) {
<                 trimmedPotentialRoot.trim(1);
<             }
<             if (trimmedPotentialRoot.size() == 0 && !roots.contains(potentialRoot)) {
<                 roots.add(potentialRoot);
<             }
<         });
< 
<         log.trace("identified roots {}", roots);
<         return roots;
<     }
< 
<     /**
<      * Returns a {@link Variable} instance for the specified parameters.
<      *
<      * @param type  the type of the variable
<      * @param value the value of this variable
<      * @return a a {@link Variable} instance with the specified type and value
<      * @throws IllegalArgumentException if the type could not be mapped to a {@link Variable} implementation
<      */
<     private static Variable getVariable(final String type, final String value) {
<         switch (type) {
<             // TODO add "BITS" support
<             case "STRING":
<                 if (value.startsWith("\"") && value.endsWith("\"")) {
<                     if (value.length() == 2) {
<                         return new OctetString();
<                     }
<                     return new OctetString(value.substring(1, value.length() - 1));
<                 } else {
<                     return new OctetString(value);
<                 }
<             case "OID":
<                 return new OID(value);
<             case "Gauge32":
<                 return new Gauge32(Long.parseLong(value.replaceAll("[^-?0-9]+", "")));
<             case "Timeticks":
<                 final int openBracket = value.indexOf("(") + 1;
<                 final int closeBracket = value.indexOf(")");
<                 if (openBracket == 0 || closeBracket < 0) {
<                     throw new IllegalArgumentException("could not parse time tick value in " + value);
<                 }
<                 return new TimeTicks(Long.parseLong(value.substring(openBracket, closeBracket)));
<             case "Counter32":
<                 return new Counter32(Long.parseLong(value.replaceAll("[^-?0-9]+", "")));
<             case "Counter64":
<                 // Parse unsigned long
<                 return new Counter64(UnsignedLong.valueOf(value).longValue());
<             case "INTEGER":
<                 return new Integer32(Integer.parseInt(value.replaceAll("[^-?0-9]+", "")));
<             case "Hex-STRING":
<                 return OctetString.fromHexString(value, ' ');
<             case "IpAddress":
<                 return new IpAddress(value);
<             default:
<                 throw new IllegalArgumentException("illegal type \"" + type + "\" in walk detected");
<         }
<     }
< 
<     /**
259,260d169
<                 final OctetString context = new OctetString(String.valueOf(vlan));
< 
265c174
<                     DefaultMOContextScope scope = new DefaultMOContextScope(context, root, true, root.nextPeer(), false);
---
>                     DefaultMOContextScope scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), root, true, root.nextPeer(), false);
270c179
<                             scope = new DefaultMOContextScope(context, variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
---
>                             scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
276c185
<                                 registerGroupAndContext(group, context);
---
>                                 registerGroupAndContext(group, new OctetString(String.valueOf(vlan)));
281c190
<                         registerGroupAndContext(group, context);
---
>                         registerGroupAndContext(group, new OctetString(String.valueOf(vlan)));
334c243
<                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new));
---
>                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new);
441c350
<         while ((query = server.lookup(new DefaultMOQuery(hackScope, false))) != null) {
---
>         while ((query = server.lookup(new DefaultMOQuery(hackScope, false)) != null) {
462c371
<             modifiers = device.getModifiers().stream().filter(modifier -> modifier.isApplicable(binding.getKey())).collect(Collectors.toList());
---
>             modifiers = device.getModifiers().stream().filter(modifier -> modifer.isApplicable(binding.getKey())).collect(Collectors.toList());
469,470c378,379
<                     if (modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).anyMatch(m -> m.getModifier() instanceof CommunityContextModifier)) {
<                         final List<CommunityContextModifier> contextModifiers = modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).filter(m -> m.getModifier() instanceof CommunityContextModifier).map(m -> (CommunityContextModifier) m.getModifier()).collect(Collectors.toList());
---
>                     if (modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).getModifier() instanceof CommunityContextModifier).anyMatch(m -> (CommunityContextModifier) m.getModifier()) {
>                         final List<CommunityContextModifier> contextModifiers = modifiers.stream().filter(m -> m instanceof Modifier).map(m -> (Modifier) m).getModifier() instanceof CommunityContextModifier).map(m -> (CommunityContextModifier) m.getModifier()).collect(Collectors.toList());
543a453
>     @SuppressWarnings("unchecked")
579c489
<                 new OctetString(communityString + "2" + communityString).toSubIndex(true), com2sec);
---
>                 (new OctetString(communityString + "2" + communityString).toSubIndex(true), com2sec);
