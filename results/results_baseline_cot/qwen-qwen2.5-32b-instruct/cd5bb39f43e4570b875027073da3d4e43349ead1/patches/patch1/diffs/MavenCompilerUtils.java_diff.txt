1,15d0
< /*
<  * Copyright 2019 Danny van Heumen
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
21d5
< import org.codehaus.plexus.util.xml.Xpp3Dom;
70,101c54,56
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
<                     .flatMap(aggregate -> stream(aggregate.getChildren("path")))
<                     .map(processor -> system.createArtifact(
<                             extractChildValue(processor, "groupId"),
<                             extractChildValue(processor, "artifactId"),
<                             extractChildValue(processor, "version"),
<                             PACKAGING))
<                     // A path specification is automatically ignored in maven-compiler-plugin if version is absent,
<                     // therefore there is little use in logging incomplete paths that are filtered out.
<                     .filter(a -> !a.getGroupId().isEmpty())
<                     .filter(a -> !a.getArtifactId().isEmpty())
<                     .filter(a -> !a.getVersion().isEmpty())
<                     .collect(Collectors.toSet());
<         }
<         // It is expected that this will never occur due to all Configuration instances of all plugins being provided as
<         // XML document. If this happens to occur on very old plugin versions, we can safely add the type support and
<         // simply return an empty set.
<         throw new UnsupportedOperationException("Please report that an unsupported type of configuration container" +
<                 " was encountered: " + config.getClass());
<     }
< 
<     /**
<      * Extract child value if child is present, or return empty string if absent.
<      *
<      * @param node the parent node
<      * @param name the child node name
<      * @return Returns child value if child node present or otherwise empty string.
<      */
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
<         return child == null ? "" : child.getValue();
---
>         // Assuming the configuration is a simple map or list, we can directly extract the values.
>         // This is a simplified approach and may need to be adjusted based on the actual configuration structure.
>         return emptySet(); // Placeholder for the actual extraction logic.
