<code_analysis>
1. Examine the error message:
   - The error is related to the `StringContains` constructor, which now requires a single `String` argument instead of a `boolean` and a `String`.
   - The error occurs at lines 57 and 58 of the `ManifestRefTest.java` file.
   - The issue is likely due to a change in the Hamcrest library, which is used for the `StringContains` matcher.

2. Review the client code:
   - The problematic area is in the `failsToResolveInvalid` method, where `StringContains` is used with two arguments.
   - The `StringContains` matcher is used to check if the error message contains certain substrings.

3. Consider potential fixes:
   - The `StringContains` matcher now requires a single `String` argument, so the boolean flag for case sensitivity must be handled differently.
   - The fix should ensure that the error message contains the expected substrings without using the deprecated constructor.

4. Plan the necessary changes:
   - Replace the `StringContains` with `Matchers.containsString` for case-sensitive checks.
   - Ensure the test logic remains the same, checking for the presence of specific substrings in the error message.
</code_analysis>

```java
package com.artipie.docker.ref;

import com.artipie.docker.Digest;
import com.artipie.docker.Tag;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Test case for {@link ManifestRef}.
 * @since 0.1
 */
public final class ManifestRefTest {

    @Test
    void resolvesDigestString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("sha256:1234").link().string(),
            Matchers.equalTo("revisions/sha256/1234/link")
        );
    }

    @Test
    void resolvesTagString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("1.0").link().string(),
            Matchers.equalTo("tags/1.0/current/link")
        );
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        "a:b:c",
        ".123"
    })
    void failsToResolveInvalid(final String string) {
        final Throwable throwable = Assertions.assertThrows(
            IllegalStateException.class,
            () -> new ManifestRef.FromString(string).link().string()
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            Matchers.allOf(
                Matchers.containsString("Unsupported reference"),
                Matchers.containsString(string)
            )
        );
    }

    @Test
    void resolvesDigestLink() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0000")).link().string(),
            Matchers.equalTo("revisions/sha256/0000/link")
        );
    }

    @Test
    void resolvesTagLink() {
        final String tag = "0.2";
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid(tag)).link().string(),
            Matchers.equalTo("tags/0.2/current/link")
        );
    }

    @Test
    void stringFromDigestRef() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0123")).string(),
            Matchers.equalTo("sha256:0123")
        );
    }

    @Test
    void stringFromTagRef() {
        final String tag = "0.2";
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid(tag)).string(),
            Matchers.equalTo(tag)
        );
    }

    @Test
    void stringFromStringRef() {
        final String value = "whatever";
        MatcherAssert.assertThat(
            new ManifestRef.FromString(value).string(),
            Matchers.equalTo(value)
        );
    }
}
```

In this fix, the `StringContains` matcher is replaced with `Matchers.containsString` to ensure the error message contains the expected substrings. This change is necessary due to the change in the Hamcrest library's `StringContains` constructor.
