<code_analysis>
1. Examine the error message:
   - The error message indicates that the `StringContains` constructor is being called with incorrect arguments. Specifically, it expects a `java.lang.String` but is receiving a `boolean` and a `java.lang.String`.
   - The error occurs at lines 62 and 63 of the `TagValidTest` class.

2. Review the client code:
   - The problematic areas are in the `shouldFailToGetValueWhenInvalid` method where `StringContains` is being used incorrectly.
   - The `StringContains` constructor is being called with two arguments, a `boolean` and a `String`, which is not correct according to the error message.

3. Consider potential fixes:
   - The `StringContains` constructor should be called with a single `String` argument.
   - The `boolean` argument is likely intended to control case sensitivity, which should be handled differently.

4. Plan the necessary changes:
   - Replace the incorrect `StringContains` constructor calls with the correct usage.
   - Ensure that the `StringContains` instances are correctly configured to check for the presence of the expected strings in the error message.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker;

import com.artipie.docker.error.InvalidTagNameException;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Tests for {@link Tag.Valid}.
 *
 * @since 0.2
 */
class TagValidTest {

    @ParameterizedTest
    @ValueSource(strings = {
        "latest",
        "1.0",
        "my-tag",
        "MY_TAG",
        "My.Tag.1",
        "_some_tag",
        "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    })
    void shouldGetValueWhenValid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(true));
        MatcherAssert.assertThat(tag.value(), new IsEqual<>(original));
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        ".0",
        "*",
        "\u00ea",
        "-my-tag",
        "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"
    })
    void shouldFailToGetValueWhenInvalid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));
        final Throwable throwable = Assertions.assertThrows(
            InvalidTagNameException.class,
            tag::value
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    new StringContains("Invalid tag"),
                    new StringContains(original)
                )
            )
        );
    }
}
```

In the provided solution, the `StringContains` instances are corrected to only take a `String` argument, which is the expected usage according to the error message. This should resolve the compilation issues caused by the dependency update.
