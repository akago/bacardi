<code_analysis>
The error messages indicate that the classes `HexOf` and `BytesOf` from the `org.cactoos.text` and `org.cactoos.io` packages, respectively, cannot be found. This suggests that the version of the `cactoos` library being used has either removed or renamed these classes. To resolve this issue, we need to find the equivalent functionality in the updated version of the library or use an alternative approach to achieve the same result.

Given the constraints, we will assume that the `cactoos` library has been updated and the classes `HexOf` and `BytesOf` are no longer available. We will replace these with equivalent functionality using standard Java libraries.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.misc;

import com.artipie.asto.Content;
import com.artipie.docker.Digest;
import hu.akarnokd.rxjava2.interop.SingleInterop;
import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.Single;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.CompletionStage;
import java.util.Base64;

/**
 * Digest from content.
 * @since 0.2
 */
public final class DigestFromContent {

    /**
     * Content.
     */
    private final Content content;

    /**
     * Ctor.
     * @param content Content publisher
     */
    public DigestFromContent(final Content content) {
        this.content = content;
    }

    /**
     * Calculates digest from content.
     * @return CompletionStage from digest
     */
    public CompletionStage<Digest> digest() {
        final MessageDigest sha;
        try {
            sha = MessageDigest.getInstance("SHA-256");
        } catch (final NoSuchAlgorithmException err) {
            throw new IllegalStateException("This runtime doesn't have SHA-256 algorithm", err);
        }
        return Flowable.fromPublisher(this.content)
            .flatMapCompletable(
                buf -> Completable.fromAction(
                    () -> {
                        buf.mark();
                        sha.update(buf);
                        buf.reset();
                    }
                )
            )
            .<Digest>andThen(
                Single.fromCallable(
                    () -> new Digest.Sha256(Base64.getEncoder().encodeToString(sha.digest()))
                )
            )
            .to(SingleInterop.get()).toCompletableFuture();
    }

}
```

In this solution, I have replaced `HexOf` and `BytesOf` with `Base64.getEncoder().encodeToString()` to convert the byte array to a string, which is a common approach to represent byte arrays as strings in Java. This should resolve the compilation errors related to the missing classes.
