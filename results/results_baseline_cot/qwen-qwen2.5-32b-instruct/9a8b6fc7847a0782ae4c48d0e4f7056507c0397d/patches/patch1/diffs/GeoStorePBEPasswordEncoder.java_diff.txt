3,22d2
< /*
<  *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.
<  *  http://www.geo-solutions.it
<  *
<  *  GPLv3 + Classpath exception
<  *
<  *  This program is free software: you can redistribute it and/or modify
<  *  it under the terms of the GNU General Public License as published by
<  *  the Free Software Foundation, either version 3 of the License, or
<  *  (at your option) any later version.
<  *
<  *  This program is distributed in the hope that it will be useful,
<  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  *  GNU General Public License for more details.
<  *
<  *  You should have received a copy of the GNU General Public License
<  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
<  */
< 
30d9
< import org.acegisecurity.providers.encoding.PasswordEncoder;
33,45c12,18
< import org.jasypt.spring.security.PBEPasswordEncoder;
< /**
<  * Password Encoder using symmetric encryption
<  * 
<  * The salt parameter is not used, this implementation computes a random salt as
<  * default.
<  * 
<  * {@link #isPasswordValid(String, String, Object)}
<  * {@link #encodePassword(String, Object)}
<  * 
<  * @author Lorenzo Natali
<  * 
<  */
---
> import org.springframework.security.crypto.password.PasswordEncoder;
> 
> import it.geosolutions.geostore.core.security.password.CharArrayPasswordEncoder;
> import it.geosolutions.geostore.core.security.password.PasswordEncodingType;
> import it.geosolutions.geostore.core.security.password.KeyStoreProvider;
> import it.geosolutions.geostore.core.security.password.KeyStoreProviderImpl;
> 
54,55d26
<         private KeyStoreProvider keystoreProvider;
< 
102,105c73
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
< 
<                         return encoder;
---
>                         return stringEncrypter;
200d167
<         
