56,59c56
<         MatcherAssert.assertThat(
<             request.uuid(),
<             new IsEqual<>("a9e48d2a-c939-441d-bb53-b3ad9ab67709")
<         );
---
>         MatcherAssert.assertThat(request.uuid(), new IsEqual<>("a9e48d2a-c939-441d-bb53-b3ad9ab67709"));
67,70c64
<         MatcherAssert.assertThat(
<             request.uuid(),
<             new IsEqual<>("")
<         );
---
>         MatcherAssert.assertThat(request.uuid(), new IsEqual<>(""));
93c87
<             new StringContains(false, "Unexpected path")
---
>             new StringContains("Unexpected path")
109c103
<             new StringContains(false, "Unexpected query")
---
>             new StringContains("Unexpected query")
137,161d130
< 
<     @Test
<     void shouldReadFromWhenPresent() {
<         final UploadEntity.Request request = new UploadEntity.Request(
<             new RequestLine(
<                 RqMethod.POST,
<                 "/v2/my-repo/blobs/uploads/?mount=sha256:12345&from=foo"
<             ).toString()
<         );
<         MatcherAssert.assertThat(
<             request.from().map(RepoName::value),
<             new IsEqual<>(Optional.of("foo"))
<         );
<     }
< 
<     @Test
<     void shouldReadFromWhenAbsent() {
<         final UploadEntity.Request request = new UploadEntity.Request(
<             new RequestLine(RqMethod.POST, "/v2/my-repo/blobs/uploads/").toString()
<         );
<         MatcherAssert.assertThat(
<             request.from().isPresent(),
<             new IsEqual<>(false)
<         );
<     }
