78c78
<             throw new IllegalStateException("Unsupported OS: " + os);
---
>             throw new RuntimeException("Unsupported OS: " + os);
114d113
< 
118,121c117,118
<     /**
<      * Output from Sauce Connect process which indicates that it has been started.
<      */
<     private static final String SAUCE_CONNECT_4_STARTED = "Sauce Connect is up, you may start your tests";
---
> 
>     public static final String SAUCE_CONNECT_4_STARTED = "Sauce Connect is up, you may start your tests";
126,252d122
<     private static final String SAUCE_CONNECT = "sc-";
<     public static final String SAUCE_CONNECT_4 = SAUCE_CONNECT + CURRENT_SC_VERSION;
< 
<     /**
<      * Constructs a new instance with quiet mode disabled.
<      */
<     public SauceConnectFourManager() {
<         this(false);
<     }
< 
<     /**
<      * Constructs a new instance.
<      *
<      * @param quietMode indicates whether Sauce Connect output should be suppressed
<      */
<     public SauceConnectFourManager(boolean quietMode) {
<         super(quietMode);
<     }
< 
<     /**
<      * @param username         name of the user which launched Sauce Connect
<      * @param apiKey           api key corresponding to the user
<      * @param port             port which Sauce Connect should be launched on
<      * @param sauceConnectJar  File which contains the Sauce Connect executables (typically the CI plugin Jar file)
<      * @param options          the command line options used to launch Sauce Connect
<      * @param printStream      the output stream to send log messages
<      * @param sauceConnectPath if defined, Sauce Connect will be launched from the specified path and won't be extracted from the jar file
<      * @return new ProcessBuilder instance which will launch Sauce Connect
<      * @throws SauceConnectException thrown if an error occurs extracting the Sauce Connect binary from the CI jar file
<      */
<     @Override
<     protected Process prepAndCreateProcess(String username, String apiKey, int port, File sauceConnectJar, String options, PrintStream printStream, String sauceConnectPath) throws SauceConnectException {
< 
<         //find zip file to extract
<         try {
<             File sauceConnectBinary;
<             if (sauceConnectPath == null || sauceConnectPath.equals("")) {
<                 File workingDirectory = null;
<                 if (sauceConnectJar != null && sauceConnectJar.exists()) {
<                     workingDirectory = sauceConnectJar.getParentFile();
<                 }
<                 if (workingDirectory == null) {
<                     workingDirectory = new File(getSauceConnectWorkingDirectory());
<                 }
<                 if (!workingDirectory.canWrite()) {
<                     throw new SauceConnectException("Can't write to " + workingDirectory.getAbsolutePath() + ", please check the directory permissions");
<                 }
<                 OperatingSystem operatingSystem = OperatingSystem.getOperatingSystem();
<                 File unzipDirectory = getUnzipDir(workingDirectory, operatingSystem);
<                 sauceConnectBinary = new File(unzipDirectory, operatingSystem.getExecutable());
<                 if (!sauceConnectBinary.exists()) {
<                     synchronized (this) {
<                         if (!sauceConnectBinary.exists()) {
<                             extractZipFile(workingDirectory, operatingSystem);
<                         }
<                     }
<                 } else {
<                     logMessage(printStream, sauceConnectBinary + " already exists, so not extracting");
<                 }
<             } else {
<                 sauceConnectBinary = new File(sauceConnectPath);
<                 if (!sauceConnectBinary.exists()) {
<                     throw new SauceConnectException(sauceConnectPath + " doesn't exist, please check the location");
<                 }
<             }
< 
<             //although we are setting the working directory, we need to specify the full path to the exe
<             String[] args = { sauceConnectBinary.getPath() };
<             args = generateSauceConnectArgs(args, username, apiKey, port, options);
<             args = addExtraInfo(args);
< 
<             julLogger.log(Level.INFO, "Launching Sauce Connect " + getCurrentVersion() + " " + hideSauceConnectCommandlineSecrets(args));
<             return createProcess(args, sauceConnectBinary.getParentFile());
<         } catch (IOException e) {
<             throw new SauceConnectException(e);
<         }
<     }
< 
<     public String hideSauceConnectCommandlineSecrets(String[] args) {
<         HashMap<String, String> map = new HashMap<>();
<         map.put("-k", "()\\w+-\\w+-\\w+-\\w+-\\w+");
<         map.put("--api-key", "()\\w+-\\w+-\\w+-\\w+-\\w+");
<         map.put("-w", "(\\S+:)\\S+");
<         map.put("--proxy-userpwd", "(\\S+:)\\S+");
<         map.put("-a", "(\\S+:\\d+:\\S+:)\\S+");
<         map.put("--auth", "(\\S+:\\d+:\\S+:)\\S+");
<         String regexpForNextElement = null;
<         List<String> hiddenArgs = new ArrayList<>();
< 
<         for (String arg: args) {
<             if (regexpForNextElement != null) {
<                 hiddenArgs.add(arg.replaceAll(regexpForNextElement, "$1****"));
<                 regexpForNextElement = null;
<             } else {
<                 hiddenArgs.add(arg);
<                 regexpForNextElement = map.getOrDefault(arg, null);
<             }
<         }
<         return Arrays.toString(hiddenArgs.toArray());
<     }
< 
<     public void setUseLatestSauceConnect(boolean useLatestSauceConnect) {
<         this.useLatestSauceConnect = useLatestSauceConnect;
<     }
< 
<     public void setCleanUpOnExit(boolean cleanUpOnExit) {
<         this.cleanUpOnExit = cleanUpOnExit;
<     }
< 
<     public static String getLatestSauceConnectVersion() {
<         try {
<             URL url = new URL("https://saucelabs.com/versions.json");
<             String versionsJson = IOUtils.toString(url, StandardCharsets.UTF_8);
<             return new JSONObject(versionsJson).getJSONObject("Sauce Connect").getString("version");
<         } catch (IOException e) {
<             return null;
<         }
<     }
< 
<     /**
<      * @param args     the initial Sauce Connect command line args
<      * @param username name of the user which launched Sauce Connect
<      * @param apiKey   the access key for the Sauce user
<      * @param port     the port that Sauce Connect should be launched on
<      * @param options  command line args specified by the user
<      * @return String array representing the command line args to be used to launch Sauce Connect
<      */
254a125
>         );
264,269d134
<     /**
<      * @param workingDirectory the destination directory
<      * @param operatingSystem  represents the current operating system
<      * @return the directory containing the extracted files
<      * @throws IOException thrown if an error occurs extracting the files
<      */
271,320c136
<         File zipFile = extractFile(workingDirectory, operatingSystem.getFileName(useLatestSauceConnect));
<         if (cleanUpOnExit) {
<             zipFile.deleteOnExit();
<         }
<         AbstractUnArchiver unArchiver;
<         if (operatingSystem == OperatingSystem.OSX || operatingSystem == OperatingSystem.WINDOWS) {
<             unArchiver = new ZipUnArchiver();
<         } else if (operatingSystem == OperatingSystem.LINUX) {
<             removeOldTarFile(zipFile);
<             unArchiver = new TarGZipUnArchiver();
<         } else {
<             throw new RuntimeException("Unknown operating system: " + operatingSystem.name());
<         }
<         extractArchive(unArchiver, zipFile, workingDirectory);
<         File unzipDir = getUnzipDir(workingDirectory, operatingSystem);
<         if (cleanUpOnExit) {
<             unzipDir.deleteOnExit();
<         }
<         return unzipDir;
<     }
< 
<     private File getUnzipDir(File workingDirectory, OperatingSystem operatingSystem) {
<         return new File(workingDirectory, operatingSystem.getDirectory(useLatestSauceConnect));
<     }
< 
<     private void removeOldTarFile(File zipFile) throws SauceConnectException {
<         File tarFile = new File(zipFile.getParentFile(), zipFile.getName().replaceAll(".gz", ""));
<         removeFileIfExists(tarFile, "Unable to delete old tar");
<     }
< 
<     /**
<      * @param unArchiver  the unarchiver
<      * @param archive     the compressed file to extract
<      * @param destination the destination directory
<      */
<     private void extractArchive(AbstractUnArchiver unArchiver, File archive, File destination) {
<         unArchiver.enableLogging(new ConsoleLogger(Logger.LEVEL_DEBUG, "Sauce"));
<         unArchiver.setSourceFile(archive);
<         unArchiver.setDestDirectory(destination);
<         unArchiver.extract();
<     }
< 
<     /**
<      * @param workingDirectory the destination directory
<      * @param fileName         the name of the file to extract
<      * @return the directory containing the extracted files
<      * @throws IOException thrown if an error occurs extracting the files
<      */
<     private File extractFile(File workingDirectory, String fileName) throws IOException {
<         File destination = new File(workingDirectory, fileName);
---
>         File destination = new File(workingDirectory, operatingSystem.getFileName(useLatestSauceConnect));
322,323c138
<         InputStream inputStream = useLatestSauceConnect ? new URL("https://saucelabs.com/downloads/" + fileName)
<             .openStream() : getClass().getClassLoader().getResourceAsStream(fileName);
---
>         InputStream inputStream = useLatestSauceConnect ? new URL("https://saucelabs.com/downloads/" + operatingSystem.getFileName(useLatestSauceConnect)).openStream() : getClass().getClassLoader().getResourceAsStream(operatingSystem.getFileName(useLatestSauceConnect));
334,336d148
<     /**
<      * {@inheritDoc}
<      */
341d152
<     @Override
350,358d160
<     /**
<      * Attempts to find the Sauce Connect log file.  If the --logfile argument has been specified, then
<      * use that location, otherwise look at the operating system/tunnel identifer to determine the location.
<      *
<      * @param options the Sauce Connect command line options, can be null
<      *
<      * @return File representing the Sauce Connect log file, can be null
<      */
<     @Override
360,361d161
< 
<         //Has --logfile arg been specified
364d163
< 
373d171
<         //otherwise, try to work out location
377d174
<         //has --tunnel-name been specified?
384d180
<             //try working directory
391a188,230
> 
>     @Override
>     protected Process prepAndCreateProcess(String username, String apiKey, int port, File sauceConnectJar, String options, PrintStream printStream, String sauceConnectPath) throws SauceConnectException {
>         File sauceConnectBinary;
>         if (sauceConnectPath == null || sauceConnectPath.equals("")) {
>             File workingDirectory = sauceConnectJar != null && sauceConnectJar.exists() ? sauceConnectJar.getParentFile() : new File(getSauceConnectWorkingDirectory());
>             if (!workingDirectory.canWrite()) {
>                 throw new SauceConnectException("Can't write to " + workingDirectory.getAbsolutePath());
>             }
>             OperatingSystem operatingSystem = OperatingSystem.getOperatingSystem();
>             File unzipDir = extractZipFile(workingDirectory, operatingSystem);
>             if (cleanUpOnExit) {
>                 unzipDir.deleteOnExit();
>             }
>             sauceConnectBinary = new File(unzipDir, operatingSystem.getExecutable());
>             if (!sauceConnectBinary.exists()) {
>                 synchronized (this) {
>                     if (!sauceConnectBinary.exists()) {
>                         extractZipFile(workingDirectory, operatingSystem);
>                     }
>                 }
>             }
>         } else {
>             sauceConnectBinary = new File(sauceConnectPath);
>             if (!sauceConnectBinary.exists()) {
>                 throw new SauceConnectException(sauceConnectPath + " doesn't exist");
>             }
>         }
> 
>         String[] args = { sauceConnectBinary.getPath() };
>         args = generateSauceConnectArgs(args, username, apiKey, port, options);
>         args = addExtraInfo(args);
> 
>         julLogger.log(Level.INFO, "Launching Sauce Connect " + getCurrentVersion() + " " + hideSauceConnectCommandlineSecrets(args));
>         return createProcess(args, sauceConnectBinary.getParentFile());
>     }
> 
>     private void extractArchive(AbstractUnArchiver unArchiver, File archive, File destination) {
>         // Removed the enableLogging call as it is no longer supported in the new version of the dependency.
>         unArchiver.setSourceFile(archive);
>         unArchiver.setDestDirectory(destination);
>         unArchiver.extract();
>     }
