16,18d15
< import org.nem.nis.dao.*;
< import org.nem.nis.harvesting.*;
< import org.nem.nis.mappers.*;
22,31d18
< import org.nem.nis.secret.*;
< import org.nem.nis.service.BlockChainLastBlockLayer;
< import org.nem.nis.state.*;
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
< import org.nem.peer.connect.CommunicationMode;
< import org.nem.peer.node.*;
< import org.nem.peer.services.ChainServices;
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
65d51
<         @SuppressWarnings("unused")
68,69d53
<         private static final int MAX_AUDIT_HISTORY_SIZE = 50;
< 
91,93c75,81
<                 // replace url parameters with values from configuration
<                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
<                                 configuration.getNetworkName());
---
>                 final Flyway flyway = Flyway.configure()
>                                 .dataSource(prop.getProperty("jdbc.driverClassName"), prop.getProperty("jdbc.url"), prop.getProperty("jdbc.username"), prop.getProperty("jdbc.password"))
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .validateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")))
>                                 .load();
> 
>                 flyway.migrate();
97c85
<                 dataSource.setUrl(jdbcUrl);
---
>                 dataSource.setUrl(prop.getProperty("jdbc.url"));
103,115d90
<         @Bean(initMethod = "migrate")
<         public Flyway flyway() throws IOException {
<                 final Properties prop = new Properties();
<                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
<         }
< 
117d91
<         @DependsOn("flyway")
128,133d101
<         public BlockChainServices blockChainServices() {
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
<         }
< 
<         @Bean
158,304d125
<         public NisModelToDbModelMapper nisModelToDbModelMapper() {
<                 return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
<         }
< 
<         @Bean
<         public NisDbModelToModelMapper nisDbModelToModelMapper() {
<                 return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());
<         }
< 
<         // endregion
< 
<         // region observers + validators
< 
<         @Bean
<         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear, forkConfiguration);
<         }
< 
<         @Bean
<         public BlockValidatorFactory blockValidatorFactory() {
<                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
<         }
< 
<         @Bean
<         public TransactionValidatorFactory transactionValidatorFactory() {
<                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
<                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
<         }
< 
<         @Bean
<         public SingleTransactionValidator transactionValidator() {
<                 // this is only consumed by the TransactionController and used in transaction/prepare,
<                 // which should propagate incomplete transactions
<                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
<         }
< 
<         // endregion
< 
<         @Bean
<         public Harvester harvester() {
<                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),
<                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
<                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
< 
<                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
<                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
<                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
<                                 generator);
<         }
< 
<         @Bean
<         public SynchronizedAccountCache accountCache() {
<                 return new SynchronizedAccountCache(new DefaultAccountCache());
<         }
< 
<         @Bean
<         public SynchronizedAccountStateCache accountStateCache() {
<                 return new SynchronizedAccountStateCache(new DefaultAccountStateCache());
<         }
< 
<         @Bean
<         public SynchronizedHashCache transactionHashCache() {
<                 return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));
<         }
< 
<         @Bean
<         public SynchronizedPoxFacade poxFacade() {
<                 return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));
<         }
< 
<         @Bean
<         public SynchronizedNamespaceCache namespaceCache() {
<                 final BlockHeight mosaicRedefinitionForkHeight = this.nisConfiguration().getForkConfiguration().getMosaicRedefinitionForkHeight();
< 
<                 NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);
<                 return new SynchronizedNamespaceCache(new DefaultNamespaceCache(mosaicRedefinitionForkHeight));
<         }
< 
<         @Bean
<         public ReadOnlyNisCache nisCache() {
<                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),
<                                 this.namespaceCache());
<         }
< 
<         @Bean
<         @SuppressWarnings("serial")
<         public ImportanceCalculator importanceCalculator() {
<                 final Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {
<                         {
<                                 this.put(BlockChainFeature.PROOF_OF_IMPORTANCE,
<                                                 () -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));
<                                 this.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);
<                         }
<                 };
< 
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
<                                 featureSupplierMap);
<         }
< 
<         @Bean
<         public UnlockedAccounts unlockedAccounts() {
<                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
<                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
<         }
< 
<         @Bean
<         public CanHarvestPredicate canHarvestPredicate() {
<                 return new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);
<         }
< 
<         private Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {
<                 return getBlockDependentPoiOptions(height).getMinHarvesterBalance();
<         }
< 
<         private static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {
<                 return new PoiOptionsBuilder(height).create();
<         }
< 
<         @Bean
<         public Supplier<BlockHeight> lastBlockHeight() {
<                 return this.blockChainLastBlockLayer::getLastBlockHeight;
<         }
< 
<         @Bean
<         public UnconfirmedTransactions unconfirmedTransactions() {
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 final UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),
<                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
<                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
<                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
<                                 this.nisCache());
<                 return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);
<         }
< 
<         @Bean
<         public UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {
<                 return this.unconfirmedTransactions().asFilter();
<         }
< 
<         @Bean
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
324,325d144
<                 NemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());
< 
330,331c149,150
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
---
>         @Bean
>         public Supplier<WeightedBalances> weighedBalancesSupplier() {
368c187
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
---
>                                 this.nisConfiguration(), this.httpConnectorPool(), this.incomingAudits(), this.outgoingAudits());
400,439d218
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
< 
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
< 
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
<         }
< 
<         @Bean
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
<         }
< 
<         @Bean
