3a4
> import org.flywaydb.core.api.configuration.FlywayConfiguration;
93c94
<                                 configuration.getNetworkName());
---
>                                 configuration.getNetworkName()));
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final FlywayConfiguration configuration = FlywayConfiguration.createDefaultConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
>                 configuration.setLocations(prop.getProperty("flyway.locations"));
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 return Flyway.configure().configuration(configuration).load();
169c171,275
<         // region observers + validators
---
>         // region mappers
> 
>         @Bean
>         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
>                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear, forkConfiguration);
>         }
> 
>         @Bean
>         public BlockValidatorFactory blockValidatorFactory() {
>                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public TransactionValidatorFactory transactionValidatorFactory() {
>                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
>                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
>         }
> 
>         @Bean
>         public Function<Address, Collection<Address>> cosignatoryLookup() {
>                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
>         }
> 
>         @Bean
>         public Harvester harvester() {
>                 final NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),
>                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
>                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
> 
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
>                                 generator);
>         }
> 
>         @Bean
>         public SynchronizedAccountCache accountCache() {
>                 return new SynchronizedAccountCache(new DefaultAccountCache());
>         }
> 
>         @Bean
>         public SynchronizedAccountStateCache accountStateCache() {
>                 return new SynchronizedAccountStateCache(new DefaultAccountStateCache());
>         }
> 
>         @Bean
>         public SynchronizedHashCache transactionHashCache() {
>                 return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));
>         }
> 
>         @Bean
>         public SynchronizedPoxFacade poxFacade() {
>                 return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));
>         }
> 
>         @Bean
>         public SynchronizedNamespaceCache namespaceCache() {
>                 final BlockHeight mosaicRedefinitionForkHeight = this.nisConfiguration().getForkConfiguration().getMosaicRedefinitionForkHeight();
> 
>                 NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);
>                 return new SynchronizedNamespaceCache(new DefaultNamespaceCache(mosaicRedefinitionForkHeight));
>         }
> 
>         @Bean
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
>         }
> 
>         @Bean
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
>         }
> 
>         @Bean
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
>         }
> 
>         @Bean
>         public NisMain nisMain() {
>                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper());
>         }
> 
>         @Bean
>         public BlockChainUpdater blockChainUpdater() {
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public BlockChainContextFactory blockChainContextFactory() {
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
>                                 this.unconfirmedTransactions());
>         }
> 
>         @Bean
>         public BlockChainServices blockChainServices() {
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
>                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
>         }
196,197d301
<         // endregion
< 
