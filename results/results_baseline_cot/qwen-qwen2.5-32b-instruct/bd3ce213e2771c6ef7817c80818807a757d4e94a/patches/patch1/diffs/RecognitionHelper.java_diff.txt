17a18
> import com.fasterxml.jackson.core.JsonProcessingException;
42d42
< 
132,152c132
<      * Returns the absolute path of all line segment images for the pages in the processState
<      *
<      * @param pageIds Identifiers of the chosen pages (e.g 0002,0003)
<      * @return List of line segment images
<      * @throws IOException
<      */
<     public List<String> getLineSegmentImagesForCurrentProcess(List<String> pageIds) throws IOException {
<         List<String> LineSegmentsOfPage = new ArrayList<String>();
<         for (String pageId : processState.keySet()) {
<             for (String segmentId : processState.get(pageId).keySet()) {
<                 for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {
<                     LineSegmentsOfPage.add(projConf.PAGE_DIR + pageId + File.separator + segmentId +
<                         File.separator + lineSegmentId + projConf.getImageExtensionByType(projectImageType));
<                 }
<             }
<         }
<         return LineSegmentsOfPage;
<     }
< 
<     /**
<      * Returns the progress of the process
---
>      * Returns the Ids of the pages, for which line segmentation was already executed
154,155c134,135
<      * @return Progress percentage
<      * @throws IOException
---
>      * @param pageIds Identifiers of the pages (e.g 0002,0003)
>      * @return Information if files exist
157,171c137,140
<     public int getProgress() throws IOException {
<         // Prevent function from calculation progress if process is not running
<         if (!RecognitionRunning)
<             return progress;
< 
<         int modifiedCount = 0;
<         if(imagesLastModified != null) {
<             for(String pagexml : imagesLastModified.keySet()) {
<                 if(imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {
<                     modifiedCount++;
<                 }
<             }
<             progress = (modifiedCount*100) / imagesLastModified.size();
<         } else {
<             progress = -1;
---
>     public boolean doOldFilesExist(String[] pageIds) {
>         for (String pageId : pageIds) {
>             if (procStateCol.recognitionState(pageId))
>                 return true;
173c142
<         return progress;
---
>         return false;
177,194d145
<      * Extracts checkpoints of a String joined by a whitespace
<      *
<      * @return List of checkpoints
<      * @throws IOException
<      */
<     public List<String> extractModelsOfJoinedString(String joinedckptString){
<         String [] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + " ");
<         List<String> ckptList = new ArrayList<>();
<         Iterator <String> ckptIterator= Arrays.asList(checkpoints).iterator();
<         while (ckptIterator.hasNext()) {
<             String ckpt = ckptIterator.next();
<             if (ckptIterator.hasNext())
<                 ckpt = ckpt + ProjectConfiguration.MODEL_EXT;
<             ckptList.add(ckpt);
<         }
<         return ckptList;
<     }
<     /**
196c147
<      * Achieved with the help of the external python program "calamary-predict"
---
>      * Achieved with the help of an external python program "calamari-predict"
199,200c150
<      * @param cmdArgs Command line arguments for "calamary-predict"
<      * @throws IOException
---
>      * @param cmdArgs Command line arguments for "calamari-predict"
221c171
<                         skewparams.add(cmdArgsWork.remove(skewstepsIndex));
---
>                         skewparams.add(cmdArgsWork.remove(skewstepsIndex);
227,228c177,178
<                         skewparams.add(segmentListFile.toString());
<                         segmentListFile.deleteOnExit(); // Delete if OCR4all terminates
---
>             segmentListFile.deleteOnExit();
> 
238d187
<                                 // Add affected line segment images with their absolute path to the json file
241a191
>             try {
242a193,195
>             } catch (JsonProcessingException e) {
>                 e.printStackTrace();
>             }
251d203
< 
257,289c209,213
<         int index;
<         if (cmdArgsWork.contains("--checkpoint")) {
<             index = cmdArgsWork.indexOf("--checkpoint");
<             for(String ckpt : extractModelsOfJoinedString(cmdArgsWork.get(index + 1))) {
<                 if (!new File(ckpt).exists())
<                     throw new IOException("Model does not exist under the specified path");
<             }
<         }
< 
<         List<String> command = new ArrayList<>();
<         // Ugly hack but helpers will be rewritten for the next release anyways. Don't use as basis for future code!
<         if(cmdArgsWork.contains("--data.output_glyphs")){
<             cmdArgsWork.remove("--data.output_glyphs");
<             command.add("--data.output_glyphs");
<             command.add("True");
<         }
<         if(cmdArgsWork.contains("--data.output_confidences")){
<             cmdArgsWork.remove("--data.output_confidences");
<             command.add("--data.output_confidences");
<             command.add("True");
<         }
< 
<         command.add("--data.images");
<         // Create temp json file with all segment images (to not overload parameter list)
<                 // Temp file in a temp folder named "calamari-<random numbers>.json"
<         File segmentListFile = File.createTempFile("calamari-",".files");
<         segmentListFile.deleteOnExit();
< 
<         List<String> content = new ArrayList<>();
<         for (String pageId : pageIds) {
<             // Add affected images with their absolute path to the file
<             content.add(projConf.getImageDirectoryByType(projectImageType) + pageId +
<                                 projConf.getImageExtensionByType(projectImageType));
---
>         int modifiedCount = 0;
>         if(imagesLastModified != null) {
>             for(String pagexml : imagesLastModified.keySet()) {
>                 if(imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {
>                     modifiedCount++;
291,300d214
<         Files.write(segmentListFile.toPath(), content, StandardOpenOption.APPEND);
<         command.add(segmentListFile.toString());
< 
<         //Add checkpoints
<         Iterator<String> cmdArgsIterator = cmdArgsWork.iterator();
<         while (cmdArgsIterator.hasNext()) {
<             String arg = cmdArgsIterator.next();
<             command.add(arg);
<             if (arg.equals("--checkpoint") && cmdArgsIterator.hasNext()) {
<                 command.addAll(extractModelsOfJoinedString(cmdArgsIterator.next()));
301a216,218
>             progress = (modifiedCount*100) / imagesLastModified.size();
>         } else {
>             progress = -1;
304,325d220
<         command.add("--data");
<         command.add("PageXML");
<         // Set output extension to input extension in order to overwrite the original file
<         // (default would've been .pred.xml)
<         command.add("--data.gt_extension");
<         command.add(".xml");
<         command.add("--data.pred_extension");
<         command.add(".xml");
< 
<         command.add("--data.text_index");
<         command.add("1");
< 
<         command.add("--verbose");
<         command.add("True");
< 
<         command.add("--predictor.progress_bar");
<         command.add("False");
< 
<         processHandler = new ProcessHandler();
<         processHandler.setFetchProcessConsole(true);
<         processHandler.startProcess("calamari-predict", command, false);
< 
356c251
<      * Returns the Ids of the pages, for which line segmentation was already executed
---
>      * Returns the progress of the process
358c253
<      * @return List with page ids
---
>      * @return Progress percentage
361,368c256,259
<     public ArrayList<String> getValidPageIds() throws IOException {
<         // Get all pages and check which ones are already line segmented
<         ArrayList<String> validPageIds = new ArrayList<String>();
<         ArrayList<String> allPageIds = genericHelper.getPageList("Original");
<         for (String pageId : allPageIds) {
<             if (procStateCol.lineSegmentationState(pageId) == true)
<                 validPageIds.add(pageId);
<         }
---
>     public int getProgress() throws IOException {
>         // Prevent function from calculation progress if process is not running
>         if (!RecognitionRunning)
>             return progress;
370,371c261,265
<         Collections.sort(validPageIds);
<         return validPageIds;
---
>         int modifiedCount = 0;
>         if(imagesLastModified != null) {
>             for(String pagexml : imagesLastModified.keySet()) {
>                 if(imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {
>                     modifiedCount++;
373,394d266
< 
<     /**
<      * Deletion of old process related files
<      *
<      * @param pageIds Identifiers of the pages (e.g 0002,0003)
<      */
<     public void deleteOldFiles(List<String> pageIds) throws IOException {
<         // Delete potential TextEquivs already existing in the page xmls
<         for(String pageId : pageIds) {
<             File pageXML = new File(projConf.OCR_DIR + pageId + projConf.CONF_EXT);
<             if (!pageXML.exists())
<                 return;
< 
<             // Load pageXML and replace/delete all Textline text content
<             String pageXMLContent = new String(Files.readAllBytes(pageXML.toPath()));
<             pageXMLContent = pageXMLContent.replaceAll("\\<TextEquiv[^>]+?index=\"[^0]\"[^>]*?\\>[^<]*?\\<\\/TextEquiv\\>", "");
< 
<             // Save new pageXML
<             try (FileWriter fileWriter = new FileWriter(pageXML)) {
<                 fileWriter.write(pageXMLContent);
<                 fileWriter.flush();
<                 fileWriter.close();
395a268,270
>             progress = (modifiedCount*100) / imagesLastModified.size();
>         } else {
>             progress = -1;
396a272
>         return progress;
400c276
<      * Creates the recognition files of the linesegments that were skipped by the ocropus-rpred script
---
>      * Extracts checkpoints of a String joined by a whitespace
401a278
>      * @return List of checkpoints
404,427c281,289
<     public void createSkippedSegments() throws IOException{
<         for(String pageId : processState.keySet()) {
<             for(String segmentId :processState.get(pageId).keySet()) {
<                 for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {
<                     if (processState.get(pageId).get(segmentId).get(lineSegmentId))
<                         continue;
< 
<                     FileUtils.writeStringToFile(new File(projConf.PAGE_DIR + pageId + File.separator +
<                         segmentId + File.separator + lineSegmentId + projConf.REC_EXT), "", "UTF8");
<                 }
<             }
<         }
<     }
< 
<     /**
<      * Checks if process depending files already exist
<      *
<      * @param pageIds Identifiers of the pages (e.g 0002,0003)
<      * @return Information if files exist
<      */
<     public boolean doOldFilesExist(String[] pageIds) {
<         for (String pageId : pageIds) {
<             if (procStateCol.recognitionState(pageId))
<                 return true;
---
>     public List<String> extractModelsOfJoinedString(String joinedckptString) throws IOException {
>         String [] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + " ");
>         List<String> ckptList = new ArrayList<>();
>         Iterator <String> ckptIterator= Arrays.asList(checkpoints).iterator();
>         while (ckptIterator.hasNext()) {
>             String ckpt = ckptIterator.next();
>             if (ckptIterator.hasNext())
>                 ckpt = ckpt + ProjectConfiguration.MODEL_EXT;
>             ckptList.add(ckpt);
429c291
<         return false;
---
>         return ckptList;
434,452d295
<      * Consider the subsequent information to load models correctly
<      *
<      * Possible model location directories:
<      * ProjectConfiguration.PROJ_MODEL_DEFAULT_DIR
<      * ProjectConfiguration.PROJ_MODEL_CUSTOM_DIR
<      *
<      * Model path structures on the filesystem:
<      * Default: OS_PATH/{TRAINING_IDENTIFIER}/{ID}.ckpt.json
<      * Custom:  OS_PATH/{PROJECT_NAME}/{TRAINING_IDENTIFIER}/{ID}.ckpt.json
<      *
<      * Example: /var/ocr4all/models/default/Baiter_000/Baiter.ckpt.json
<      * Display: Baiter_000/Baiter
<      * Example: /var/ocr4all/models/custom/Bibel/0/0.ckpt.json
<      * Display: Bibel/0/0
<      * Example: /var/ocr4all/models/custom/Bibel/heading/0.ckpt.json
<      * Display: Bibel/heading/0
<      *
<      * The models need to be in the following structure:
<      * ANY_PATH/{MODEL_NAME}/ANY_NAME.ckpt.json
