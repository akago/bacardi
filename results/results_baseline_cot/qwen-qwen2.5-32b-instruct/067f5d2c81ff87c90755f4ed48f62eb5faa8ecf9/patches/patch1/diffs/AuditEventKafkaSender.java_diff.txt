1,16d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
48c32,36
<  *  LoggingAuditEventSender implementations that dequeue LoggingAuditEvent and send it to Kafka.
---
>  * Copyright 2019 Pinterest, Inc.
>  *
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
50c38,44
<  *  Each instance of this class should be executed in its own thread.
---
>  *    http://www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
51a46
> 
60,66d54
<   /**
<    *  When sender send audit events to Kafka,  it chooses a random partition and if it fails, it
<    *  will choose another GOOD partition, this retry will happen at most numOfPartitionsToTrySending
<    *  times before dropping the event. Note that, this is different from the retry handled by
<    *  kafka client
<    *  library when sending an event to a certain partition.
<    */
69,71d56
<   /**
<    *  maximum time to wait when sender tries to dequeue events before returning null.
<    */
74,81d58
< 
<   /**
<    *   when gracefully shutting down the Sender, the calling thread sleeps for some time and let
<    *   the sender to send out audit events left in the queue if there are any.
<    *   stopGracePeriodInSeconds is the maximum time reserved and
<    *   stopGracePeriodInSeconds / THREAD_SLEEP_IN_SECONDS is the total rounds the calling thread
<    *   will sleep.
<    */
84,88c61
<   /**
<    *  when gracefully shutting down the Sender, this field specifies maximum time for main thread
<    *  to wait, in order to let the sender send out audit events left in the queue if there are any.
<    */
<   private int stopGracePeriodInSeconds = 300;
---
>   private String topic;
89a63
>   private String name;
91,94c65
<   /**
<    * Logging audit stage, can be THRIFTLOGGER, SINGER, MERCED and so on
<    */
<   private final LoggingAuditStage stage;
---
>   private Thread thread;
96,99c67
<   /**
<    * host name
<    */
<   private final String host;
---
>   private LoggingAuditStage stage;
101,111c69,71
<   /**
<    *  LinkedBlockingDequeue to store the LoggingAuditEvents.  The max capacity is specified when
<    *  creating this deque in the LoggingAuditClient.java
<    *
<    *  The AuditEventKafkaSender dequeue from the beginning of the deque, if does not send out event
<    *  successfully, it will enqueue this event to the beginning of the queue.  Note that, if enqueue
<    *  the failed event at the end of the queue, this event could be processed with quite some delay
<    *  and this is not the behavior we want.  That's we use LinkedBlockingDequeue,
<    *  not ArrayBlockingQueue.
<    */
<   private final LinkedBlockingDeque<LoggingAuditEvent> queue;
---
>   private String host;
> 
>   private LinkedBlockingDeque<LoggingAuditEvent> queue;
113,115d72
<   /**
<    * KafkaProducer instance to send audit events
<    */
118,120d74
<   /**
<    * Serialize key and value to byte[]
<    */
123,125d76
<   /**
<    *  flag to control the start and stop of the executing thread.
<    */
128,145d78
<   /**
<    *  topic to store the audit events
<    */
<   private String topic;
< 
<   /**
<    *  name of this sender instance
<    */
<   private String name;
< 
<   /**
<    *  executing thread
<    */
<   private Thread thread;
< 
<   /**
<    *  List of PartitionInfo
<    */
148,150d80
<   /**
<    *  last time when partition list was refreshed. we want to refresh partition list every 5 mins.
<    */
153,156d82
<   /**
<    *  If sending out to one partition fails, this partition is added to set;
<    *  If sending out to one partition succeeds, this partition is removed if it was added before.
<    */
159,165d84
<   /**
<    * For each event (identified by LoggingAuditHeaders, key of the map), track the number of tries
<    * for sending to Kafka. Each try will choose a different and partition that is not in the
<    * badPartitions.  When event is send out successfully or dropped, the corresponding entry in
<    * this map is removed.
<    */
< 
168,175d86
<   /**
<    *  currentPartitionId specifies the partition of audit_event topic used to receive audit events.
<    *  The currentPartitionId will be reset in resetCurrentPartitionIdIfNeeded() method. This reduces
<    *  the number of TCP connections from audit client to the Kafka Cluster hosting the audit_event
<    *  topic.
<    */
<   private int currentPartitionId = -1;
< 
188,196d98
< 
<   public KafkaProducer<byte[], byte[]> getKafkaProducer() {
<     return kafkaProducer;
<   }
< 
<   public void setKafkaProducer(KafkaProducer<byte[], byte[]> kafkaProducer) {
<     this.kafkaProducer = kafkaProducer;
<   }
< 
198d99
<     // refresh every 30 seconds
205,206c106,107
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
---
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
209,210c110,112
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
---
>         LOG.warn("Exit the while loop and finish the thread execution due to exception: ", e);
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
227c129
<         int randomPartition = partitionInfoList.get(index).partition();
---
>         int randomPartition = partitionInfoList.get(index).partition());
232,233c134,135
<           OpenTsdbMetricConverter.incr(
<               LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
---
>           OpenTsdbMetricConverter
>               .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
240,242c142
<       LOG.warn("After {} trials, set current partition to {}",
<           MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
< 
---
>       LOG.warn("After {} trials, set current partition to {}", MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
246,253d145
<   /**
<    *  Sender dequeues LoggingAuditEvents and sends them to Kafka cluster. If send to one partition
<    *  fails, it will choose another partition. For each event, it will try at most
<    *  NUM_OF_PARTITIONS_TO_TRY_SENDING times (3 times) before dropping this event. Metrics are
<    *  used to track the queue size and usuage, number of events sent out to Kafka successfully, and
<    *  the number of events dropped.
<    */
<   @Override
272c164
<           } catch (TException e) {
---
>           } catch (TException | org.apache.thrift.transport.TTransportException e) {
285,286c177,178
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_DEQUEUE_INTERRUPTED_EXCEPTION, 1,
---
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_DEQUEUE_INTERRUPTED_EXCEPTION, 1,
291,292c183,185
<         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_EXCEPTION, 1,
<             "host=" + host, "stage=" + stage.toString());
---
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_EXCEPTION, 1,
>                 "host=" + host, "stage=" + stage.toString(), "topic=" + topic);
298d190
< 
310d201
<       // if exception thrown (i.e. the send failed), the partition is added to badPartitions.
314,315c205
<               "host=" + host, "stage=" + stage.toString(), "topic=" + topic,
<               "partition=" + this.partition);
---
>               "host=" + host, "stage=" + stage.toString(), "topic=" + topic, "partition=" + this.partition);
317,319d206
<       // retry the failed event by inserting it at the beginning of the deque.
<       // If number of tries reaches 3, meaning that 3 partitions have been tried sending to but
<       // still failed, this event is dropped.
326,327c213
<                 eventTriedCount.size(), "host=" + host, "stage=" + stage.toString(),
<                 "topic=" + topic);
---
>                 eventTriedCount.size(), "host=" + host, "stage=" + stage.toString());
332,333c218
<                   "host=" + host, "stage=" + stage.toString(),
<                   "logName=" + event.getLoggingAuditHeaders().getLogName());
---
>                   "host=" + host, "stage=" + stage.toString(), "logName=" + event.getLoggingAuditHeaders().getLogName());
345,346c230
<           LOG.debug("Failed to enqueue LoggingAuditEvent at head of the queue when executing "
<               + "producer send callback. Drop this event.");
---
>           LOG.debug("Failed to enqueue LoggingAuditEvent at head of the queue. Drop this event.");
349,353c233,235
<       } catch (InterruptedException ex) {
<         LOG.debug(
<             "Enqueuing LoggingAuditEvent at head of the queue was interrupted in callback. "
<                 + "Drop this event");
<         eventTriedCount.remove(event.getLoggingAuditHeaders());
---
>       } catch (InterruptedException e) {
>         LOG.warn("[{}] got interrupted while waiting to enqueue LoggingAuditEvent. Drop this event.",
>             Thread.currentThread().getName(), e);
365,367d246
< 
<           // if send is successful, remove the event from the map eventTriedCount if it was added
<           // LoggingAuditHeaders can uniquely identify an event.
369d247
<           // if send out successfully, remove the partition from the badPartitions if it was added.
375c253
<         LOG.warn("Exception throws in the callback. Drop this event {}", event, t);
---
>         LOG.warn("Exception is thrown in the callback. Drop this event {}", event, t);
383,386c261
<   /**
<    *  start the executing thread and let the Sender run.
<    */
<   public synchronized void start() {
---
>   public void start() {
392,393c267
<       LOG.warn(
<           "[{}] created and started [{}] to let it dequeue LoggingAuditEvents and send to Kafka.",
---
>       LOG.warn("[{}] created and started [{}] to let it dequeue LoggingAuditEvents and send to Kafka.",
398,406c272,274
<   /**
<    *  reserve some time (by default 30 seconds at most)to let AuditEventKafkaSender to send out
<    *  LoggingAuditEvent in the queue and gracefully stop AuditEventKafkaSender.
<    */
<   public synchronized void stop() {
<     LOG.warn(
<         "[{}] waits up to {} seconds to let [{}] send out LoggingAuditEvents left in the queue if"
<             + " any.",
<         Thread.currentThread().getName(), stopGracePeriodInSeconds, name);
---
>   public void stop() {
>     LOG.warn("[{}] waits up to {} seconds to let [{}] send out LoggingAuditEvents left in the queue if there are any.",
>         Thread.currentThread().name(), stopGracePeriodInSeconds, name);
415c283
<             Thread.currentThread().getName(), THREAD_SLEEP_IN_SECONDS, queue.size());
---
>             Thread.currentThread().name(), THREAD_SLEEP_IN_SECONDS, queue.size());
417,418c285,286
<         LOG.warn("[{}] got interrupted while waiting for [{}] to send out LoggingAuditEvents left "
<             + "in the queue.", Thread.currentThread().getName(), name, e);
---
>         LOG.warn("[{}] got interrupted while waiting for [{}] to send out LoggingAuditEvents left in the queue.",
>             Thread.currentThread().name(), name, e);
430,431c298,299
<     LOG.warn("[{}] is stopped and the number of LoggingAuditEvents left in the queue is {}.", name,
<         queue.size());
---
>     LOG.warn("[{}] is stopped and the number of LoggingAuditEvents left in the queue is {}.",
>         name, queue.size());
433d300
< 
