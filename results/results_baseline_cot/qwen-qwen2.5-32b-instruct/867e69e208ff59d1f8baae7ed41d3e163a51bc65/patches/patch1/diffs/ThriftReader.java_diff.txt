1,15d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  * 
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  * 
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  * 
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
31,35d15
< /**
<  * Reader that reads Thrift messages of thrift type from a file
<  * <p/>
<  * This class is NOT thread-safe.
<  */
39,43d18
<   /**
<    * Factory that get a TBase instance of the thrift type to be read.
<    *
<    * @param <T> The thrift message type to be read.
<    */
45d19
< 
49,51d22
<   /**
<    * Factory that get a TProtocol instance.
<    */
53d23
< 
57d26
<   // Factory that creates empty objects that will be initialized with values from the file.
59,60d27
< 
<   // The ByteOffsetInputStream to read from.
62,63d28
< 
<   // The framed framedTransport.
65,66d29
< 
<   // TProtocol implementation.
80,81c43
<     this.framedTransport = new TFramedTransport(new TIOStreamTransport(this
<         .byteOffsetInputStream), maxMessageSize);
---
>     this.framedTransport = new TFramedTransport(this.byteOffsetInputStream, maxMessageSize);
86,92d47
<   /**
<    * Read one thrift message.
<    *
<    * @return next thrift message from the reader. null if no thrift message in the reader.
<    * @throws IOException when file error.
<    * @throws TException  when parse error.
<    */
94d48
<     // If frame buffer is empty and we are at EOF of underlying input stream, return null.
104,107d57
<   /**
<    * @return byte offset of the next message.
<    * @throws IOException on file error.
<    */
110,111c60,61
<         byteOffsetInputStream.getByteOffset() >= framedTransport.getBytesRemainingInBuffer());
<     return byteOffsetInputStream.getByteOffset() - framedTransport.getBytesRemainingInBuffer();
---
>         byteOffsetInputStream.getByteOffset() >= framedTransport.bytesRemainingInBuffer());
>     return byteOffsetInputStream.getByteOffset() - framedTransport.bytesRemainingInBuffer();
114,119d63
<   /**
<    * Set byte offset of the next message to be read.
<    *
<    * @param byteOffset byte offset.
<    * @throws IOException on file error.
<    */
121d64
<     // If we already at the byte offset, return.
126,129c69
<     // Clear the buffer
<     framedTransport.consumeBuffer(framedTransport.getBytesRemainingInBuffer());
< 
<     // Set underlying stream byte offset
---
>     framedTransport.consumeBuffer(framedTransport.bytesRemainingInBuffer());
133,137d72
<   /**
<    * Close the reader.
<    *
<    * @throws IOException on file error.
<    */
