1,7d0
< /**
<  * Copyright (c) 2012 to original author or authors
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  */
94d86
< 
108d99
<         String childName = child.getName();
111,112c102,103
<         int childNameLength = childName.length();
<         if ("reportPlugins".equals(childName)) {
---
>         int childNameLength = child.getName().length();
>         if ("reportPlugins".equals(child.getName())) {
114,117c105,108
<         } else if (childNameLength > 3 && childName.endsWith("ies")) {
<           singularName = childName.substring(0, childNameLength - 3);
<         } else if (childNameLength > 1 && childName.endsWith("s")) {
<           singularName = childName.substring(0, childNameLength - 1);
---
>         } else if (childNameLength > 3 && child.getName().endsWith("ies")) {
>           singularName = child.getName().substring(0, childNameLength - 3);
>         } else if (childNameLength > 1 && child.getName().endsWith("s")) {
>           singularName = child.getName().substring(0, childNameLength - 1);
123d113
<           if (isList) { // check for eventual list construction
128d117
<           }
135c124
<         map.put(childName, childValue);
---
>         map.put(child.getName(), childValue);
169,170c158
<   //TODO move to polyglot-common, or to org.apache.maven:maven-model
<   private static List<String> ORDER_MODEL = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_MODEL = new ArrayList<>(Arrays.asList(
204c192
<   private static List<String> ORDER_DEVELOPER = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEVELOPER = new ArrayList<>(Arrays.asList(
206c194
<   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<>(Arrays.asList(
208c196
<   private static List<String> ORDER_DEPENDENCY = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEPENDENCY = new ArrayList<>(Arrays.asList(
210c198
<   private static List<String> ORDER_PLUGIN = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_PLUGIN = new ArrayList<>(Arrays.asList(
214,219c202,203
<   /*
<    * Change the default order. Important data goes first.
<    */
<   @Override
<   protected Set<Property> getProperties(Class<? extends Object> type)
<           throws IntrospectionException {
---
>   protected Set<Property> getProperties(Class<? extends Object> type) {
>     try {
232a217,219
>     } catch (IntrospectionException e) {
>       throw new RuntimeException(e);
>     }
235,236c222,223
<   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order)
<           throws IntrospectionException {
---
>   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order) {
>     try {
238c225
<       Set<Property> sorted = new TreeSet<Property>(new ModelPropertyComparator(order));
---
>       Set<Property> sorted = new TreeSet<>(new ModelPropertyComparator(order));
240a228,230
>     } catch (IntrospectionException e) {
>       throw new RuntimeException(e);
>     }
