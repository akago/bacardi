1,15d0
< /*
<  * Copyright (C) 2008-2021 Mycila (mathieu.carbou@gmail.com)
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *         http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
24,25d8
< import org.apache.maven.project.DefaultProjectBuilder;
< import org.apache.maven.project.DefaultProjectBuildingRequest;
29d11
< import org.apache.maven.project.ProjectBuildingRequest;
33d14
< import org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;
64c45,46
<    * @param filters        the list of {@link ArtifactFilter} to scope analysis to
---
>    * @param buildingRequest the request for building the project
>    * @param filter        the list of {@link ArtifactFilter} to scope analysis to
81a64
>    * @param project        the maven project
84c67
<    * @param scope          String to filter artifacts to,
---
>    * @param scopes         String to filter artifacts to,
86,87c69
<    * @param exclusions     List<String> of exclusion expressions,
<    *                       {@link org.apache.maven.shared.artifact.filter.AbstractStrictPatternArtifactFilter}
---
>    * @param log            the log to sync to
109c91
<     Set<License> licenses = new HashSet<License>();
---
>     Set<License> licenses = new HashSet<>();
128c110
<     final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<License, Set<Artifact>>();
---
>     final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();
134c116
<       map.putIfAbsent(license, new HashSet<Artifact>());
---
>       map.putIfAbsent(license, new HashSet<>());
152,153c134,135
<     final Set<Artifact> artifacts = new HashSet<Artifact>();
<     final Set<DependencyNode> dependencies = new HashSet<DependencyNode>();
---
>     final Set<Artifact> artifacts = new HashSet<>();
>     final Set<DependencyNode> dependencies = new HashSet<>();
174,177d155
< 
<     // tempting, but does not resolve dependencies after the scope in which this
<     // plugin is invoked
<     // return project.getArtifacts();
193c171
<     this.projects = Optional.ofNullable(projects).orElse(new HashSet<MavenProject>());
---
>     this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());
