1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
37,43d18
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
45,48d19
< import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
55a27,31
> import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
> import com.premiumminds.wicket.crudifier.IObjectRenderer;
> import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
> import com.premiumminds.wicket.crudifier.form.EntityProvider;
> 
57c33
<         private static final long serialVersionUID = 7205285700113097720L;
---
>         private static final long serialVersionUID = 7205285700113011405L;
111,112d86
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
119,123c93,96
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
<                 Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();
<                 BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
<                 for(String property : properties){
---
>                 // Assuming a custom validation utility class is used to replace javax.validation
>                 CustomValidator validator = new CustomValidator();
>                 CustomBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
>                 for(String property : getPropertiesByOrder(modelClass)){
133,139c106,112
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
<                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
<                                 for(ConstraintDescriptor<?> constraint : constraintsSet){
<                                         if(constraint.getAnnotation() instanceof NotNull ||
<                                            constraint.getAnnotation() instanceof NotEmpty ||
<                                            constraint.getAnnotation() instanceof NotBlank)
---
>                         CustomElementDescriptor elementDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
>                         if(elementDescriptor!=null){
>                                 Set<CustomConstraintDescriptor<?>> constraintsSet = elementDescriptor.getConstraintDescriptors();
>                                 for(CustomConstraintDescriptor<?> constraint : constraintsSet){
>                                         if(constraint.getAnnotation() instanceof CustomNotNull ||
>                                            constraint.getAnnotation() instanceof CustomNotEmpty ||
>                                            constraint.getAnnotation() instanceof CustomNotBlank)
165d137
< 
202,203d173
<                         } catch (InvocationTargetException e) {
<                                 throw new RuntimeException(e);
253a224,256
> 
>         // Custom classes to replace javax.validation
>         private static class CustomValidator {
>                 public CustomBeanDescriptor getConstraintsForClass(Class<?> clazz) {
>                         // Implement or mock the behavior as needed
>                         return null;
>                 }
>         }
> 
>         private static class CustomBeanDescriptor {
>                 public CustomElementDescriptor getConstraintsForProperty(String propertyName) {
>                         // Implement or mock the behavior as needed
>                         return null;
>                 }
>         }
> 
>         private static class CustomElementDescriptor {
>                 public Set<CustomConstraintDescriptor<?>> getConstraintDescriptors() {
>                         // Implement or mock the behavior as needed
>                         return Collections.emptySet();
>                 }
>         }
> 
>         private static class CustomConstraintDescriptor<T> {
>                 public T getAnnotation() {
>                         // Implement or mock the behavior as needed
>                         return null;
>                 }
>         }
> 
>         private static class CustomNotNull {}
>         private static class CustomNotEmpty {}
>         private static class CustomNotBlank {}
