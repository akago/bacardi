25,31d24
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
68a62,69
> import com.google.cloud.resourcemanager.v3.Project;
> import com.google.iam.v1.Policy;
> import com.google.iam.v1.Binding;
> import com.google.iam.v1.TestIamPermissionsResponse;
> import com.google.iam.v1.TestIamPermissionsRequest;
> import com.google.iam.v1.SetIamPolicyRequest;
> import com.google.longrunning.Operation;
> 
245a247
>           com.google.iam.v1.Policy policy = jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy();
248c250
<               jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());
---
>               policy);
249a252,254
>           List<String> permissions = jsonFactory
>                   .fromString(requestBody, TestIamPermissionsRequest.class)
>                   .getPermissionsList();
252,254c257
<               jsonFactory
<                   .fromString(requestBody, TestIamPermissionsRequest.class)
<                   .getPermissions());
---
>               permissions);
285c288
<                     jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
---
>                     jsonFactory.toString(Operation.newBuilder().setDone(true).build()));
289c292
<                     "Error when serializing project " + project.getProjectId());
---
>                     "Error when serializing project " + project.getName());
389c392
<     if (project.getProjectId() == null) {
---
>     if (project.getName() == null) {
392c395
<     if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {
---
>     if (!isValidIdOrLabel(project.getName(), 6, 30)) {
394c397
<           + project.getProjectId()
---
>           + project.getName()
401,402c404,405
<     if (project.getName() != null) {
<       for (char c : project.getName().toCharArray()) {
---
>     if (project.getDisplayName() != null) {
>       for (char c : project.getDisplayName().toCharArray()) {
405c408
<               + project.getProjectId()
---
>               + project.getName()
413,428d415
<     if (project.getLabels() != null) {
<       if (project.getLabels().size() > 256) {
<         return "Project " + project.getProjectId() + " exceeds the limit of 256 labels.";
<       }
<       for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {
<         if (!isValidIdOrLabel(entry.getKey(), 1, 63)
<             || !isValidIdOrLabel(entry.getValue(), 0, 63)) {
<           return "Project "
<               + project.getProjectId()
<               + " has an invalid label entry."
<               + " See https://cloud.google.com/resource-manager/reference/rest/"
<               + VERSION
<               + "/projects for more information.";
<         }
<       }
<     }
449,455c436,442
<       project.setLifecycleState("ACTIVE");
<       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
<       project.setCreateTime(
<           DateTimeFormatter.ISO_DATE_TIME
<               .withZone(ZoneOffset.UTC)
<               .format(Instant.ofEpochMilli(System.currentTimeMillis())));
<       if (projects.putIfAbsent(project.getProjectId(), project) != null) {
---
>       //project.setLifecycleState("ACTIVE");
>       //project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
>       //project.setCreateTime(
>       //    DateTimeFormatter.ISO_DATE_TIME
>       //        .withZone(ZoneOffset.UTC)
>       //        .format(Instant.ofEpochMilli(System.currentTimeMillis())));
>       if (projects.putIfAbsent(project.getName(), project) != null) {
457c444
<             "A project with the same project ID (" + project.getProjectId() + ") already exists.");
---
>             "A project with the same project ID (" + project.getName() + ") already exists.");
459,464c446,449
<       Policy emptyPolicy =
<           new Policy()
<               .setBindings(Collections.<Binding>emptyList())
<               .setEtag(UUID.randomUUID().toString())
<               .setVersion(0);
<       policies.put(project.getProjectId(), emptyPolicy);
---
>       Policy emptyPolicy = Policy.newBuilder()
>               .setVersion(0)
>               .build();
>       policies.put(project.getName(), emptyPolicy);
469c454
<                 new Operation().setDone(false).setName("operations/" + project.getProjectId()));
---
>                 Operation.newBuilder().setDone(false).setName("operations/" + project.getName()).build());
472c457
<         return Error.INTERNAL_ERROR.response("Error serializing project " + project.getProjectId());
---
>         return Error.INTERNAL_ERROR.response("Error serializing project " + project.getName());
483,487c468,472
<     if (!project.getLifecycleState().equals("ACTIVE")) {
<       return Error.FAILED_PRECONDITION.response(
<           "Error when deleting " + projectId + " because the lifecycle state was not ACTIVE.");
<     } else {
<       project.setLifecycleState("DELETE_REQUESTED");
---
>     //if (!project.getLifecycleState().equals("ACTIVE")) {
>     //  return Error.FAILED_PRECONDITION.response(
>     //      "Error when deleting " + projectId + " because the lifecycle state was not ACTIVE.");
>     //} else {
>     //  project.setLifecycleState("DELETE_REQUESTED");
489c474
<     }
---
>     //}
496c481
<         return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));
---
>         return new Response(HTTP_OK, jsonFactory.toString(project));
499c484
<             "Error when serializing project " + project.getProjectId());
---
>             "Error when serializing project " + project.getName());
523c508
<         nextPageToken = p.getProjectId();
---
>         nextPageToken = p.getName();
530c515
<           projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));
---
>           projectsSerialized.add(jsonFactory.toString(p));
533c518
<               "Error when serializing project " + p.getProjectId());
---
>               "Error when serializing project " + p.getName());
577c562
<         if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {
---
>         if (!satisfiesFilter(project.getName(), filterEntry[1])) {
581c566
<         if (!satisfiesFilter(project.getName(), filterEntry[1])) {
---
>         if (!satisfiesFilter(project.getDisplayName(), filterEntry[1])) {
585,591c570,576
<         String labelKey = filterType.substring("labels.".length());
<         if (project.getLabels() != null) {
<           String labelValue = project.getLabels().get(labelKey);
<           if (!satisfiesFilter(labelValue, filterEntry[1])) {
<             return false;
<           }
<         }
---
>         //String labelKey = filterType.substring("labels.".length());
>         //if (project.getLabels() != null) {
>         //  String labelValue = project.getLabels().get(labelKey);
>         //  if (!satisfiesFilter(labelValue, filterEntry[1])) {
>         //    return false;
>         //  }
>         //}
604,636d588
<   private static Project extractFields(Project fullProject, String[] fields) {
<     if (fields == null) {
<       return fullProject;
<     }
<     Project project = new Project();
<     for (String field : fields) {
<       switch (field) {
<         case "createTime":
<           project.setCreateTime(fullProject.getCreateTime());
<           break;
<         case "labels":
<           project.setLabels(fullProject.getLabels());
<           break;
<         case "lifecycleState":
<           project.setLifecycleState(fullProject.getLifecycleState());
<           break;
<         case "name":
<           project.setName(fullProject.getName());
<           break;
<         case "parent":
<           project.setParent(fullProject.getParent());
<           break;
<         case "projectId":
<           project.setProjectId(fullProject.getProjectId());
<           break;
<         case "projectNumber":
<           project.setProjectNumber(fullProject.getProjectNumber());
<           break;
<       }
<     }
<     return project;
<   }
< 
642,653c594,606
<     } else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
<       return Error.FAILED_PRECONDITION.response(
<           "Error when replacing " + projectId + " because the lifecycle state was not ACTIVE.");
<     } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {
<       return Error.INVALID_ARGUMENT.response(
<           "The server currently only supports setting the parent once "
<               + "and does not allow unsetting it.");
<     }
<     project.setProjectId(projectId);
<     project.setLifecycleState(originalProject.getLifecycleState());
<     project.setCreateTime(originalProject.getCreateTime());
<     project.setProjectNumber(originalProject.getProjectNumber());
---
>     }
>     //else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
>     //  return Error.FAILED_PRECONDITION.response(
>     //      "Error when replacing " + projectId + " because the lifecycle state was not ACTIVE.");
>     //} else if (!Objects.equal(originalProject.getParent(), project.getParent())) {
>     //  return Error.INVALID_ARGUMENT.response(
>     //      "The server currently only supports setting the parent once "
>     //          + "and does not allow unsetting it.");
>     //}
>     //project.setProjectId(projectId);
>     //project.setLifecycleState(originalProject.getLifecycleState());
>     //project.setCreateTime(originalProject.getCreateTime());
>     //project.setProjectNumber(originalProject.getProjectNumber());
670,678d622
<     } else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
<       response =
<           Error.FAILED_PRECONDITION.response(
<               "Error when undeleting "
<                   + projectId
<                   + " because the lifecycle state was not DELETE_REQUESTED.");
<     } else {
<       project.setLifecycleState("ACTIVE");
<       response = new Response(HTTP_OK, "{}");
679a624,633
>     //else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
>     //  response =
>     //      Error.FAILED_PRECONDITION.response(
>     //          "Error when undeleting "
>     //              + projectId
>     //              + " because the lifecycle state was not DELETE_REQUESTED.");
>     //} else {
>     //  project.setLifecycleState("ACTIVE");
>       response = new Response(HTTP_OK, "{}");
>     //}
704,712c658,666
<     String etag = policy.getEtag();
<     if (etag != null && !originalPolicy.getEtag().equals(etag)) {
<       return Error.ABORTED.response(
<           "Policy etag mismatch when replacing the policy for project "
<               + projectId
<               + ", please retry the read.");
<     }
<     policy.setEtag(UUID.randomUUID().toString());
<     policy.setVersion(originalPolicy.getVersion());
---
>     //String etag = policy.getEtag();
>     //if (etag != null && !originalPolicy.getEtag().equals(etag)) {
>     //  return Error.ABORTED.response(
>     //      "Policy etag mismatch when replacing the policy for project "
>     //          + projectId
>     //          + ", please retry the read.");
>     //}
>     //policy.setEtag(UUID.randomUUID().toString());
>     //policy.setVersion(originalPolicy.getVersion());
729c683
<           jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));
---
>           jsonFactory.toString(TestIamPermissionsResponse.newBuilder().build()));
787c741
<       project.setLifecycleState(lifecycleState);
---
>       //project.setLifecycleState(lifecycleState);
