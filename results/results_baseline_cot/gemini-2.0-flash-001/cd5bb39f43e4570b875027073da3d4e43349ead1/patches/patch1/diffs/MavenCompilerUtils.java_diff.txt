1,15d0
< /*
<  * Copyright 2019 Danny van Heumen
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
21,22c6,14
< import org.codehaus.plexus.util.xml.Xpp3Dom;
< 
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
> 
> import javax.xml.xpath.XPath;
> import javax.xml.xpath.XPathConstants;
> import javax.xml.xpath.XPathExpression;
> import javax.xml.xpath.XPathExpressionException;
> import javax.xml.xpath.XPathFactory;
70,72c62,70
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
<                     .flatMap(aggregate -> stream(aggregate.getChildren("path")))
---
>         if (config instanceof org.w3c.dom.Element) {
>             Element configElement = (Element) config;
>             try {
>                 XPathFactory xPathFactory = XPathFactory.newInstance();
>                 XPath xpath = xPathFactory.newXPath();
>                 XPathExpression expression = xpath.compile("./annotationProcessorPaths/path");
>                 NodeList pathNodes = (NodeList) expression.evaluate(configElement, XPathConstants.NODESET);
> 
>                 return stream(pathNodesToElementStream(pathNodes))
83a82,84
>             } catch (XPathExpressionException e) {
>                 throw new RuntimeException("Error evaluating XPath expression", e);
>             }
91a93,100
>     private static Element[] pathNodesToElementStream(NodeList nodeList) {
>         Element[] elements = new Element[nodeList.getLength()];
>         for (int i = 0; i < nodeList.getLength(); i++) {
>             elements[i] = (Element) nodeList.item(i);
>         }
>         return elements;
>     }
> 
99,101c108,110
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
<         return child == null ? "" : child.getValue();
---
>     private static String extractChildValue(Element node, String name) {
>         Node child = node.getElementsByTagName(name).item(0);
>         return child == null ? "" : child.getTextContent();
