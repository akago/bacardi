1,15d0
< /*
<  * Copyright (C) 1999-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
20,21c5
< import com.hazelcast.core.IMap;
< import com.hazelcast.core.MapEvent;
---
> import com.hazelcast.map.IMap;
23c7,8
< import com.hazelcast.monitor.LocalMapStats;
---
> import com.hazelcast.map.MapEvent;
> import com.hazelcast.map.LocalMapStats;
89c74
<             public void mapEvicted(MapEvent event) {
---
>             public void eventAdded(EntryEvent<K, V> event) {
92,93c77,78
<                     logger.trace("Processing map evicted event of node '{}'", eventNodeId);
<                     clusteredCacheEntryListener.mapEvicted(eventNodeId);
---
>                     logger.trace("Processing entry added event of node '{}' for key '{}'", eventNodeId, event.getKey());
>                     clusteredCacheEntryListener.entryAdded((K) event.getKey(), (V) event.getValue(), eventNodeId);
98c83
<             public void mapCleared(MapEvent event) {
---
>             public void eventRemoved(EntryEvent<K, V> event) {
101,102c86,87
<                     logger.trace("Processing map cleared event of node '{}'", eventNodeId);
<                     clusteredCacheEntryListener.mapCleared(eventNodeId);
---
>                     logger.trace("Processing entry removed event of node '{}' for key '{}'", eventNodeId, event.getKey());
>                     clusteredCacheEntryListener.entryRemoved((K) event.getKey(), (V) event.getOldValue(), eventNodeId);
107c92
<             public void entryUpdated(EntryEvent event) {
---
>             public void eventUpdated(EntryEvent<K, V> event) {
116c101
<             public void entryRemoved(EntryEvent event) {
---
>             public void eventEvicted(EntryEvent<K, V> event) {
119,120c104,105
<                     logger.trace("Processing entry removed event of node '{}' for key '{}'", eventNodeId, event.getKey());
<                     clusteredCacheEntryListener.entryRemoved((K) event.getKey(), (V) event.getOldValue(), eventNodeId);
---
>                     logger.trace("Processing entry evicted event of node '{}' for key '{}'", eventNodeId, event.getKey());
>                     clusteredCacheEntryListener.entryEvicted((K) event.getKey(), (V) event.getOldValue(), eventNodeId);
125c110
<             public void entryEvicted(EntryEvent event) {
---
>             public void eventExpired(EntryEvent<K, V> event) {
128,129c113,114
<                     logger.trace("Processing entry evicted event of node '{}' for key '{}'", eventNodeId, event.getKey());
<                     clusteredCacheEntryListener.entryEvicted((K) event.getKey(), (V) event.getOldValue(), eventNodeId);
---
>                     logger.trace("Processing entry expired event of node '{}' for key '{}'", eventNodeId, event.getKey());
>                     //clusteredCacheEntryListener.entryExpired((K) event.getKey(), (V) event.getOldValue(), eventNodeId); // Method does not exist
134c119
<             public void entryAdded(EntryEvent event) {
---
>             public void eventMerged(EntryEvent<K, V> event) {
137,138c122,123
<                     logger.trace("Processing entry added event of node '{}' for key '{}'", eventNodeId, event.getKey());
<                     clusteredCacheEntryListener.entryAdded((K) event.getKey(), (V) event.getValue(), eventNodeId);
---
>                     logger.trace("Processing entry merged event of node '{}' for key '{}'", eventNodeId, event.getKey());
>                     //clusteredCacheEntryListener.entryMerged((K) event.getKey(), (V) event.getOldValue(), eventNodeId); // Method does not exist
