```java
package com.google.pubsublite.kafka.sink;

import com.google.cloud.pubsublite.CloudZone;
import com.google.cloud.pubsublite.ProjectName;
import com.google.cloud.pubsublite.TopicName;
import com.google.cloud.pubsublite.TopicPath;
import com.google.cloud.pubsublite.v1.PublisherServiceClient;
import com.google.cloud.pubsublite.v1.PublisherServiceSettings;
import com.google.cloud.pubsublite.internal.wire.PubsubContext;
import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;
import com.google.cloud.pubsublite.internal.wire.RoutingPublisher;
import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;
import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisher;
import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.util.Map;
import org.apache.kafka.common.config.ConfigValue;

class PublisherFactoryImpl implements PublisherFactory {

  private static final Framework FRAMEWORK = Framework.of("KAFKA_CONNECT");

  @Override
  public RoutingPublisher newPublisher(Map<String, String> params) {
    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);
    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();
    TopicPath topic =
        TopicPath.newBuilder()
            .setProject(
                ProjectName.parse("projects/" + config.get(ConfigDefs.PROJECT_FLAG).value())
                    .toString())
            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()).toString())
            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()).toString())
            .build();
    builder.setTopicPath(topic.toString());
    builder.setPublisherFactory(
        partition -> {
          try {
            PublisherServiceSettings publisherServiceSettings = PublisherServiceSettings.newBuilder().build();
            PublisherServiceClient publisherServiceClient = PublisherServiceClient.create(publisherServiceSettings);

            return SinglePartitionPublisher.newBuilder()
                    .setTopic(topic.toString())
                    .setPartition(partition)
                    .setContext(PubsubContext.of(FRAMEWORK))
                    .setPublisherServiceClient(publisherServiceClient)
                    .build();
          } catch (IOException e) {
            throw new RuntimeException(e);
          }
        });
    return builder.build();
  }
}
```
