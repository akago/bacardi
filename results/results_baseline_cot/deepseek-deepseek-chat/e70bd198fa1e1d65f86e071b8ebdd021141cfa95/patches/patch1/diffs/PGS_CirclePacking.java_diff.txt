26,27c26,27
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
---
> import org.tinspin.index.PointDistance;
> import org.tinspin.index.PointEntry;
173,174c173,174
<          * output. An attempted point is rejected if it lies within an existing circle
<          * or if its nearest circle is less than {@code minRadius} distance away.
---
>          * output. An attempted point is rejected if it lies within an existing circle or
>          * if its nearest circle is less than {@code minRadius} distance away.
226c226
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
---
>                         final PointEntry<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
318c318
<                 for (int i = 0; i < n; i++) {
---
>                 for (int i = 0; i < n; i) {
645c645
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
---
>         private static final PointDistance circleDistanceMetric = (p1, p2) -> {
