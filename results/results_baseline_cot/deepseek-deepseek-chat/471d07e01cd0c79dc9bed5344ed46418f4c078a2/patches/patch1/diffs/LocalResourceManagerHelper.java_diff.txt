25,31c25,31
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
---
> import com.google.cloud.resourcemanager.v3.Binding;
> import com.google.cloud.resourcemanager.v3.Operation;
> import com.google.cloud.resourcemanager.v3.Policy;
> import com.google.cloud.resourcemanager.v3.Project;
> import com.google.cloud.resourcemanager.v3.SetIamPolicyRequest;
> import com.google.cloud.resourcemanager.v3.TestIamPermissionsRequest;
> import com.google.cloud.resourcemanager.v3.TestIamPermissionsResponse;
69,95d68
< /**
<  * Utility to create a local Resource Manager mock for testing.
<  *
<  * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an
<  * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some
<  * divergences in behavior. The following is a non-exhaustive list of some of those behavioral
<  * differences:
<  *
<  * <ul>
<  *   <li>This mock assumes you have adequate permissions for any action. Related to this,
<  *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in
<  *       the request.
<  *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon
<  *       project creation. The actual service will not have an empty list of bindings and may also
<  *       set your version to 1.
<  *   <li>There is no input validation for the policy provided when replacing a policy or calling
<  *       testIamPermissions.
<  *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to
<  *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link
<  *       #changeLifecycleState}. Similarly, a project is never completely removed without an
<  *       explicit call to the utility method {@link #removeProject}.
<  *   <li>The messages in the error responses given by this mock do not necessarily match the
<  *       messages given by the actual service.
<  * </ul>
<  *
<  * @deprecated v3 GAPIC client of ResourceManager is now available
<  */
121d93
<   // see https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects
194d165
<       // see https://cloud.google.com/resource-manager/reference/rest/
265d235
<       // see https://cloud.google.com/resource-manager/reference/rest/
359d328
<             // List fields are in the form "projects(field1, field2, ...),nextPageToken"
466d434
<         // Pretend it's not done yet.
540d507
<     // If fields parameter is set but no project field is selected we must return no projects.
654d620
<     // replace cannot fail because both this method and removeProject are synchronized
746,749d711
<   /**
<    * Creates a {@code LocalResourceManagerHelper} object that listens to requests on the local
<    * machine.
<    */
754,756d715
<   /**
<    * Returns a {@link ResourceManagerOptions} instance that sets the host to use the mock server.
<    */
764d722
<   /** Starts the thread that runs the Resource Manager server. */
769d726
<   /** Stops the thread that runs the mock Resource Manager server. */
774,778d730
<   /**
<    * Utility method to change the lifecycle state of the specified project.
<    *
<    * @return true if the lifecycle state was successfully updated, false otherwise
<    */
793,800d744
<   /**
<    * Utility method to remove the specified project.
<    *
<    * <p>This method can be used to fully remove a project (to mimic when the server completely
<    * deletes a project).
<    *
<    * @return true if the project was successfully deleted, false if the project didn't exist
<    */
802,803d745
<     // Because this method is synchronized, any code that relies on non-atomic read/write operations
<     // should not fail if that code is also synchronized.
