16,18d15
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector;
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy;
< 
29,32c26
<     static ClassLoadingStrategy<ClassLoader> classLoadingStrategy(Class<?> assertClass) {
<         if (ClassInjector.UsingReflection.isAvailable()) {
<             return ClassLoadingStrategy.Default.INJECTION;
<         } else if (ClassInjector.UsingLookup.isAvailable() && PRIVATE_LOOKUP_IN != null) {
---
>     static Object classLoadingStrategy(Class<?> assertClass) { // Changed return type to Object
34c28,32
<                 return ClassLoadingStrategy.UsingLookup.of(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP));
---
>             return Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingReflection").getMethod("isAvailable").invoke(null) ? 
>                 Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default").getField("INJECTION").get(null) : 
>                 (Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector$UsingLookup").getMethod("isAvailable").invoke(null) && PRIVATE_LOOKUP_IN != null) ? 
>                 Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$UsingLookup").getMethod("of", Object.class).invoke(null, PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP)) : 
>                 throw new IllegalStateException("No code generation strategy available");
38,40d35
<         } else {
<             throw new IllegalStateException("No code generation strategy available");
<         }
