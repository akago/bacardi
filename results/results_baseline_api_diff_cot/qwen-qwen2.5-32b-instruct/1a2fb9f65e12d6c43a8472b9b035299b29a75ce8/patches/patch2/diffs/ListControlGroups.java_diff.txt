1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
38,43c20,25
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
---
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
64c46
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
85,91d66
<                 typesControlGroups.put(Boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(Set.class, CollectionControlGroup.class);
< 
<                 objectProperties = new ArrayList<ObjectProperties>();
<                 this.entitySettings = entitySettings;
<                 this.renderers = renderers;
94,105c69,71
<         private Set<String> getPropertiesByOrder(Class<?> modelClass) {
<                 Set<String> properties = new LinkedHashSet<String>();
< 
<                 for(String property : entitySettings.getOrderOfFields()){
<                         if(!entitySettings.getHiddenFields().contains(property))
<                                 properties.add(property);
<                 }
<                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
<                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
<                            !properties.contains(descriptor.getName()) &&
<                            !descriptor.getName().equals("class"))
<                                 properties.add(descriptor.getName());
---
>         @SuppressWarnings("unchecked")
>         public IModel<T> getModel(){
>                 return (IModel<T>) getDefaultModel();
108c74,75
<                 return properties;
---
>         public Component getResourceBase(){
>                 return this;
111c78,80
<         protected abstract EntityProvider<?> getEntityProvider(String name);
---
>         public Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){
>                 return Collections.unmodifiableMap(fieldComponents);
>         }
119,120d87
<                 Set<String> properties = getPropertiesByOrder(modelClass);
< 
123,141c90,92
<                 for(String property : properties){
<                         PropertyDescriptor descriptor;
<                         try {
<                                 descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
<                         } catch (Exception e) {
<                                 throw new RuntimeException("error getting property "+property, e);
<                         }
< 
<                         boolean required = false;
< 
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
<                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
<                                 for(ConstraintDescriptor<?> constraint : constraintsSet){
<                                         if(constraint.getAnnotation() instanceof NotNull ||
<                                            constraint.getAnnotation() instanceof NotEmpty ||
<                                            constraint.getAnnotation() instanceof NotBlank)
<                                                 required = true;
<                                 }
---
>                 for(String property : entitySettings.getOrderOfFields()){
>                         if(!entitySettings.getHiddenFields().contains(property))
>                                 properties.add(property);
143,144c94,98
< 
<                         objectProperties.add(new ObjectProperties(descriptor, required));
---
>                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
>                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
>                            !properties.contains(descriptor.getName()) &&
>                            !descriptor.getName().equals("class"))
>                                 properties.add(descriptor.getName());
147d100
<                 RepeatingView view = new RepeatingView("controlGroup");
153c106
<                                         Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
---
>                                         Class<? extends AbstractControlGroup> typesControlGroup = getControlGroupByType(objectProperty.type);
165d117
< 
210,222d161
<         @SuppressWarnings("unchecked")
<         public IModel<T> getModel(){
<                 return (IModel<T>) getDefaultModel();
<         }
< 
<         public Component getResourceBase(){
<                 return this;
<         }
< 
<         public Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){
<                 return Collections.unmodifiableMap(fieldComponents);
<         }
< 
224,228c163,164
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
<                 }
<                 return null;
---
>         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>                 return typesControlGroups;
245,253d180
< 
<         @SuppressWarnings("rawtypes")
<         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
<                 return typesControlGroups;
<         }
<         
<         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
<                 return this.controlGroupProviders;
<         }
