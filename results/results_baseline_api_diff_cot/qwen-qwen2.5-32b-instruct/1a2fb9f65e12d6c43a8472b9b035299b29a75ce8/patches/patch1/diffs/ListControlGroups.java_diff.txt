1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
37,48c19,25
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
< 
< import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
---
> import jakarta.validation.Validator;
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
51d27
< import org.apache.wicket.markup.html.panel.Panel;
87d62
<                 typesControlGroups.put(Set.class, CollectionControlGroup.class);
93a69
>     @SuppressWarnings("rawtypes")
111,112d86
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
128c102
<                                 throw new RuntimeException("error getting property "+property, e);
---
>                 throw new RuntimeException(e);
133,135c107,109
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
<                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
---
>             ElementDescriptor elementDescriptor = constraintDescriptors.getConstraintsForProperty(property);
>             if(elementDescriptor!=null){
>                 Set<ConstraintDescriptor<?>> constraintsSet = elementDescriptor.getConstraintDescriptors();
164,181d137
< 
< 
<                                         if(typesControlGroup==ObjectChoiceControlGroup.class){
<                                                 IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
<                                                 if(renderer==null){
<                                                         renderer = new IObjectRenderer<Object>() {
<                                                                 private static final long serialVersionUID = -6171655578529011405L;
< 
<                                                                 public String render(Object object) {
<                                                                         return object.toString();
<                                                                 }
<                                                         };
<                                                 }
<                                                 ((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
<                                         } else if(typesControlGroup==CollectionControlGroup.class){
<                                                 ((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
<                                         }
< 
210c166
<         @SuppressWarnings("unchecked")
---
>     @SuppressWarnings("rawtypes")
224,226c180,181
<         private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
<                 for(Class<?> mapType : typesControlGroups.keySet()){
<                         if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
---
>     public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
>         return typesControlGroups;
228c183,186
<                 return null;
---
> 
>     @SuppressWarnings("rawtypes")
>     public Map<Class<?>, ControlGroupProvider<?>> getControlGroupProviders(){
>         return this.controlGroupProviders;
245,253d202
< 
<         @SuppressWarnings("rawtypes")
<         public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
<                 return typesControlGroups;
<         }
<         
<         public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
<                 return this.controlGroupProviders;
<         }
