22c22
< import ch.qos.logback.core.encoder.EncoderBase;
---
> import ch.qos.logback.core.encoder.Encoder;
51c51
<   public static class LogMessageEncoder extends EncoderBase<LogMessage> {
---
>   public static class LogMessageEncoder implements Encoder<LogMessage> {
58,65c58,66
<     public void init(OutputStream os) {
<       this.os = os;
<       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
<       // log.
<       final int bufferCapacity = 10;
<       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
<           bufferCapacity);
<       protocol = new TBinaryProtocol(framedTransport);
---
>     public void start() {
>       // No-op
>     }
> 
>     @Override
>     public void stop() {
>       if (framedTransport != null) {
>         framedTransport.close();
>       }
70a72,76
>         if (framedTransport == null) {
>           final int bufferCapacity = 10;
>           framedTransport = new TFastFramedTransport(new TIOStreamTransport(os), bufferCapacity);
>           protocol = new TBinaryProtocol(framedTransport);
>         }
79,80c85,91
<     public void close() throws IOException {
<       framedTransport.close();
---
>     public byte[] headerBytes() {
>       return new byte[0];
>     }
> 
>     @Override
>     public byte[] footerBytes() {
>       return new byte[0];
99c110
<     RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();
---
>     RollingFileAppender<LogMessage> appender = new RollingFileAppender<>();
108c119
<     TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();
---
>     TimeBasedRollingPolicy<LogMessage> policy = new TimeBasedRollingPolicy<>();
