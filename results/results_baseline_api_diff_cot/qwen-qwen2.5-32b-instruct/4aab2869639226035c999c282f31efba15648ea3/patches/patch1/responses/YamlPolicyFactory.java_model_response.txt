```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/http/blob/master/LICENSE.txt
 */
package com.artipie.security.policy;

import com.amihaiemil.eoyaml.Yaml;
import com.artipie.asto.blocking.BlockingStorage;
import com.artipie.asto.fs.FileStorageFactory;
import com.artipie.asto.factory.Config;
import com.artipie.asto.factory.StorageConfig;
import java.io.IOException;
import java.io.UncheckedIOException;

/**
 * Policy factory to create {@link YamlPolicy}. Yaml policy is read from storage, and it's required
 * to describe this storage in the configuration. Configuration format is the following:
 *
 * policy:
 *   type: yaml_policy
 *   storage:
 *     type: fs
 *     path: /some/path
 *
 * The storage itself is expected to have yaml files with permissions in the following structure:
 *
 * ..
 * ├── roles.yaml
 * ├── users
 * │   ├── david.yaml
 * │   ├── jane.yaml
 * │   ├── ...
 *
 * @since 1.2
 */
@ArtipiePolicyFactory("yaml_policy")
public final class YamlPolicyFactory implements PolicyFactory {

    @Override
    public Policy<?> getPolicy(final PolicyConfig config) {
        final PolicyConfig sub = config.config("storage");
        try {
            final StorageConfig storageConfig = new StorageConfig(
                sub.string("type"),
                Yaml.createYamlInput(sub.toString()).readYamlMapping()
            );
            return new YamlPolicy(
                new BlockingStorage(
                    new FileStorageFactory().newStorage(storageConfig)
                )
            );
        } catch (final IOException err) {
            throw new UncheckedIOException(err);
        }
    }
}
```

In the provided solution, the `Storages` class and its `newStorage` method have been replaced with the `FileStorageFactory` and its `newStorage` method, which now accepts a `StorageConfig` object. This change aligns with the new API changes and ensures that the class remains compilable and functional. The `StorageConfig` is constructed using the type and configuration mapping from the `PolicyConfig`.
