58c58,59
< import org.apache.xmlgraphics.util.MimeConstants;
---
> import org.apache.fop.apps.FopFactoryBuilder;
> import org.apache.fop.render.pdf.PDFRendererConfig;
112c113,116
<         StreamSource transformSource = new StreamSource(templateStream);
---
>         Source source = this.mapParamsToSource(documentParams);
> 
>         // Create FopFactory instance with a builder
>         FopFactory fopFactory = FopFactoryBuilder.buildFopFactory();
114,115d117
<         // create an instance of fop factory
<         FopFactory fopFactory = FopFactory.newInstance();
118c120,132
<         // to store output
---
>         // the XML file from which we take the name
>         Transformer xslfoTransformer = this.getTransformer(new StreamSource(templateStream));
> 
>         // Construct fop with desired output format
>         Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, outStream);
> 
>         // Resulting SAX events (the generated FO)
>         // must be piped through to FOP
>         Result res = new SAXResult(fop.getDefaultHandler());
> 
>         // Start XSLT transformation and FOP processing
>         // everything will happen here..
>         xslfoTransformer.transform(source, res);
133,152c147
<             // the XML file from which we take the name
<             Source source = this.mapParamsToSource(documentParams);
< 
<             Transformer xslfoTransformer = this.getTransformer(transformSource);
< 
<             // Construct fop with desired output format
<             Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, outStream);
< 
<             // Resulting SAX events (the generated FO)
<             // must be piped through to FOP
<             Result res = new SAXResult(fop.getDefaultHandler());
< 
<             // Start XSLT transformation and FOP processing
<             // everything will happen here..
<             xslfoTransformer.transform(source, res);
<         } catch (FOPException e) {
<             throw new ExportServiceException("Error using FOP to open the template", e);
<         } catch (TransformerException e) {
<             throw new ExportServiceException("Error generating pdf from template and data source", e);
<         } catch (IOException | WriterException e) {
---
>         } catch (WriterException | IOException e) {
208d202
< 
