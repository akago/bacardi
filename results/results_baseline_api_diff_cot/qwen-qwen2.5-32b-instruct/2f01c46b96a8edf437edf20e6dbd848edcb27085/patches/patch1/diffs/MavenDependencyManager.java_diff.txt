8d7
< import java.io.Serializable;
19a19,20
> import org.apache.maven.model.Plugin;
> import org.apache.maven.model.PluginExecution;
21d21
< import org.apache.maven.plugin.logging.Log;
27d26
< import org.codehaus.plexus.util.xml.Xpp3Dom;
53,117c52
<   /**
<    * Creates the manager.
<    *
<    * @param logger                 the logger
<    * @param project                the maven project
<    * @param session                the maven session
<    * @param dependencyGraphBuilder a tool to build the dependency graph
<    */
<   public MavenDependencyManager(Log logger, MavenProject project, MavenSession session,
<       DependencyGraphBuilder dependencyGraphBuilder) {
<     this.logger = logger;
<     this.project = project;
<     this.session = session;
<     this.dependencyGraphBuilder = dependencyGraphBuilder;
<     this.model = buildModel(project);
<   }
< 
<   @Override
<   public LogWrapper getLog() {
<     return new LogWrapper() {
<       @Override
<       public void info(String message) {
<         logger.info(message);
<       }
< 
<       @Override
<       public void error(String message) {
<         logger.error(message);
<       }
< 
<       @Override
<       public void debug(String message) {
<         logger.debug(message);
<       }
<     };
<   }
< 
<   @Override
<   public boolean isMaven() {
<     return true;
<   }
< 
<   @Override
<   public boolean isPackagingPom() {
<     return project.getPackaging().equals("pom");
<   }
< 
<   @Override
<   @SneakyThrows
<   public DependencyGraph dependencyGraph() {
<     ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
<     buildingRequest.setProject(project);
<     DependencyNode rootNode = dependencyGraphBuilder.buildDependencyGraph(buildingRequest, null);
<     return new MavenDependencyGraph(project, model, rootNode);
<   }
< 
<   @Override
<   public Set<Path> getOutputDirectories() {
<     return Set.of(Paths.get(project.getBuild().getOutputDirectory()));
<   }
< 
<   @Override
<   public Set<Path> getTestOutputDirectories() {
<     return Set.of(Paths.get(project.getBuild().getTestOutputDirectory()));
<   }
---
>   // ... (rest of the class remains unchanged)
119,156d53
<   private Model buildModel(MavenProject project) {
<     File pomFile = new File(project.getBasedir().getAbsolutePath() + File.separator + "pom.xml");
< 
<     /* Build Maven model to manipulate the pom */
<     final Model model;
<     FileReader reader;
<     MavenXpp3Reader mavenReader = new MavenXpp3Reader();
<     try {
<       reader = new FileReader(pomFile);
<       model = mavenReader.read(reader);
<       model.setPomFile(pomFile);
<     } catch (Exception ex) {
<       getLog().error("Unable to build the maven project.");
<       throw new RuntimeException(ex);
<     }
<     return model;
<   }
< 
<   /**
<    * Maven processors are defined like this.
<    * <pre>{@code
<    *       <plugin>
<    *         <groupId>org.bsc.maven</groupId>
<    *         <artifactId>maven-processor-plugin</artifactId>
<    *         <executions>
<    *           <execution>
<    *             <id>process</id>
<    *             [...]
<    *             <configuration>
<    *               <processors>
<    *                 <processor>XXXProcessor</processor>
<    *               </processors>
<    *             </configuration>
<    *           </execution>
<    *         </executions>
<    *       </plugin>
<    * }</pre>
<    */
160,165c57,74
<     return Optional.ofNullable(project.getPlugin("org.bsc.maven:maven-processor-plugin"))
<         .map(plugin -> plugin.getExecutionsAsMap().get("process"))
<         .map(exec -> (Xpp3Dom) exec.getConfiguration())
<         .map(config -> config.getChild("processors"))
<         .map(Xpp3Dom::getChildren)
<         .map(arr -> Arrays.stream(arr).map(Xpp3Dom::getValue).collect(Collectors.toSet()))
---
>     return Optional.ofNullable(project.getBuild())
>         .map(build -> build.getPlugins())
>         .flatMap(plugins -> plugins.stream()
>             .filter(plugin -> "org.bsc.maven".equals(plugin.getGroupId()) && "maven-processor-plugin".equals(plugin.getArtifactId()))
>             .findFirst())
>         .flatMap(plugin -> plugin.getExecutions().stream()
>             .filter(execution -> "process".equals(execution.getId()))
>             .findFirst())
>         .flatMap(execution -> Optional.ofNullable(execution.getConfiguration()))
>         .map(config -> (PluginExecution) config)
>         .map(PluginExecution::getGoals)
>         .map(goals -> goals.stream()
>             .map(goal -> goal.getConfiguration())
>             .flatMap(config -> config.getChildren().stream())
>             .filter(child -> "processors".equals(child.getName()))
>             .flatMap(processors -> processors.getChildren().stream())
>             .map(Xpp3Dom::getValue)
>             .collect(Collectors.toSet()))
169,226c78
<   @Override
<   public Path getDependenciesDirectory() {
<     String dependencyDirectoryName = project.getBuild().getDirectory() + "/" + DIRECTORY_TO_COPY_DEPENDENCIES;
<     return new File(dependencyDirectoryName).toPath();
<   }
< 
<   @Override
<   public Set<String> collectUsedClassesFromSource(Path sourceDirectory, Path testSourceDirectory) {
<     Set<String> allImports = new HashSet<>();
<     ImportsAnalyzer importsInSourceFolder = new ImportsAnalyzer(sourceDirectory);
<     ImportsAnalyzer importsInTestsFolder = new ImportsAnalyzer(testSourceDirectory);
<     Set<String> importsInSourceFolderSet = importsInSourceFolder.collectImportedClassesFromSource();
<     Set<String> importsInTestsFolderSet = importsInTestsFolder.collectImportedClassesFromSource();
<     allImports.addAll(importsInSourceFolderSet);
<     allImports.addAll(importsInTestsFolderSet);
<     return allImports;
<   }
< 
<   @Override
<   public AbstractDebloater<? extends Serializable> getDebloater(ProjectDependencyAnalysis analysis) {
<     return new MavenDebloater(
<         analysis,
<         project,
<         model
<     );
<   }
< 
<   @Override
<   public Path getBuildDirectory() {
<     return Paths.get(project.getBuild().getDirectory());
<   }
< 
<   @Override
<   public Path getSourceDirectory() {
<     return new File(project.getBuild().getSourceDirectory()).toPath();
<   }
< 
<   @Override
<   public Path getTestDirectory() {
<     return new File(project.getBuild().getTestSourceDirectory()).toPath();
<   }
< 
<   @Override
<   public void generateDependencyTree(File treeFile) throws IOException, InterruptedException {
<     MavenInvoker.runCommand("mvn dependency:tree -DoutputFile=" + treeFile + " -Dverbose=true", null);
<   }
< 
<   @SneakyThrows
<   @Override
<   public String getTreeAsJson(
<       File treeFile, ProjectDependencyAnalysis analysis, File classUsageFile, boolean createCallGraphCsv) {
<     return new ParsedDependencies(
<         treeFile,
<         analysis,
<         classUsageFile,
<         createCallGraphCsv
<     ).parseTreeToJson();
<   }
---
>   // ... (rest of the class remains unchanged)
