3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
108,112c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
---
>                 ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 flywayConfig.setDataSource(this.dataSource());
>                 flywayConfig.setLocations(prop.getProperty("flyway.locations"));
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 Flyway flyway = new Flyway(flywayConfig);
117d119
<         @DependsOn("flyway")
129,130c131,132
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
196a199,354
>         // region mappers
> 
>         @Bean
>         public MapperFactory mapperFactory() {
>                 return new DefaultMapperFactory(this.mosaicIdCache());
>         }
> 
>         @Bean
>         public NisMapperFactory nisMapperFactory() {
>                 return new NisMapperFactory(this.mapperFactory());
>         }
> 
>         @Bean
>         public NisModelToDbModelMapper nisModelToDbModelMapper() {
>                 return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
>         }
> 
>         @Bean
>         public NisDbModelToModelMapper nisDbModelToModelMapper() {
>                 return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());
>         }
> 
>         // endregion
> 
>         // region observers + validators
> 
>         @Bean
>         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear);
>         }
> 
>         @Bean
>         public BlockValidatorFactory blockValidatorFactory() {
>                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public TransactionValidatorFactory transactionValidatorFactory() {
>                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
>                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
>         }
> 
>         @Bean
>         public SingleTransactionValidator transactionValidator() {
>                 // this is only consumed by the TransactionController and used in transaction/prepare,
>                 // which should propagate incomplete transactions
>                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
>         }
> 
>         // endregion
> 
>         // region mappers
> 
>         @Bean
>         public MapperFactory mapperFactory() {
>                 return new DefaultMapperFactory(this.mosaicIdCache());
>         }
> 
>         @Bean
>         public NisMapperFactory nisMapperFactory() {
>                 return new NisMapperFactory(this.mapperFactory());
>         }
> 
>         @Bean
>         public NisModelToDbModelMapper nisModelToDbModelMapper() {
>                 return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
>         }
> 
>         @Bean
>         public NisDbModelToModelMapper nisDbModelToModelMapper() {
>                 return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());
>         }
> 
>         // endregion
> 
>         // region observers + validators
> 
>         @Bean
>         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear);
>         }
> 
>         @Bean
>         public BlockValidatorFactory blockValidatorFactory() {
>                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public TransactionValidatorFactory transactionValidatorFactory() {
>                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
>                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
>         }
> 
>         @Bean
>         public SingleTransactionValidator transactionValidator() {
>                 // this is only consumed by the TransactionController and used in transaction/prepare,
>                 // which should propagate incomplete transactions
>                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
>         }
> 
>         // endregion
> 
>         // region mappers
> 
>         @Bean
>         public MapperFactory mapperFactory() {
>                 return new DefaultMapperFactory(this.mosaicIdCache());
>         }
> 
>         @Bean
>         public NisMapperFactory nisMapperFactory() {
>                 return new NisMapperFactory(this.mapperFactory());
>         }
> 
>         @Bean
>         public NisModelToDbModelMapper nisModelToDbModelMapper() {
>                 return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
>         }
> 
>         @Bean
>         public NisDbModelToModelMapper nisDbModelToModelMapper() {
>                 return this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());
>         }
> 
>         // endregion
> 
>         // region observers + validators
> 
>         @Bean
>         public BlockTransactionObserverFactory blockTransactionObserverFactory() {
>                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
>                 return new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear);
>         }
> 
>         @Bean
>         public BlockValidatorFactory blockValidatorFactory() {
>                 return new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public TransactionValidatorFactory transactionValidatorFactory() {
>                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
>                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
>         }
> 
>         @Bean
>         public SingleTransactionValidator transactionValidator() {
>                 // this is only consumed by the TransactionController and used in transaction/prepare,
>                 // which should propagate incomplete transactions
>                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
>         }
> 
>         // endregion
> 
381c539
<         public TrustProvider trustProvider() {
---
>         public TrustProvider trusstProvider() {
