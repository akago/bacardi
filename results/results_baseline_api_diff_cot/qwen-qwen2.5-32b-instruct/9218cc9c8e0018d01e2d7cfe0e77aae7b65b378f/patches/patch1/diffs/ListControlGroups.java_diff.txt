1,18d0
< /**
<  * Copyright (C) 2014 Premium Minds.
<  *
<  * This file is part of wicket-crudifier.
<  *
<  * wicket-crudifier is free software: you can redistribute it and/or modify it under
<  * the terms of the GNU Lesser General Public License as published by the Free
<  * Software Foundation, either version 3 of the License, or (at your option) any
<  * later version.
<  *
<  * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
<  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
<  * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
<  * details.
<  *
<  * You should have received a copy of the GNU Lesser General Public License
<  * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
<  */
38,48c20,25
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
< 
< import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
---
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
64c41
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
85,88d61
<                 typesControlGroups.put(Boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(Set.class, CollectionControlGroup.class);
< 
93a67
>         @SuppressWarnings("rawtypes")
111,112d84
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
128c100
<                                 throw new RuntimeException("error getting property "+property, e);
---
>                                 throw new RuntimeException(e);
133,135c105,107
<                         ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
<                         if(constraintDescriptor!=null){
<                                 Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
---
>                         ElementDescriptor elementDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
>                         if(elementDescriptor != null){
>                                 Set<ConstraintDescriptor<?>> constraintsSet = elementDescriptor.getConstraintDescriptors();
164,181d135
< 
< 
<                                         if(typesControlGroup==ObjectChoiceControlGroup.class){
<                                                 IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
<                                                 if(renderer==null){
<                                                         renderer = new IObjectRenderer<Object>() {
<                                                                 private static final long serialVersionUID = -6171655578529011405L;
< 
<                                                                 public String render(Object object) {
<                                                                         return object.toString();
<                                                                 }
<                                                         };
<                                                 }
<                                                 ((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
<                                         } else if(typesControlGroup==CollectionControlGroup.class){
<                                                 ((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
<                                         }
< 
185,187c139
<                                                         .createControlGroup(view.newChildId()
<                                                                         , new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
<                                                                         , objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
---
>                                                         .createControlGroup(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name), objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
210c162
<         @SuppressWarnings("unchecked")
---
>         @SuppressWarnings("rawtypes")
250a203
>         @SuppressWarnings("rawtypes")
