1,7d0
< /**
<  * Copyright (c) 2012 to original author or authors
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  */
15a9
> import org.yaml.snakeyaml.DumperOptions;
16a11
> import org.yaml.snakeyaml.introspector.BeanAccess;
29,35d23
< /**
<  * YAML model representer.
<  *
<  * @author jvanzyl
<  * @author bentmann
<  * @since 0.7
<  */
37a26
>     super(new DumperOptions());
94d82
< 
122,131d109
<           boolean isList = singularName != null;
<           if (isList) { // check for eventual list construction
<             for (int j = 0, grandChildCount = child.getChildCount(); j < grandChildCount; j++) {
<               String grandChildName = child.getChild(j).getName();
<               isList &= grandChildName.equals(singularName);
<             }
<           }
<           if (isList) {
<             childValue = toList(child, singularName);
<           } else {
134d111
<         }
144,165d120
< 
<     private List<Object> toList(Xpp3Dom node, String childName) {
<       List<Object> list = new ArrayList<>();
< 
<       int n = node.getChildCount();
<       for (int i = 0; i < n; i++) {
<         Xpp3Dom child = node.getChild(i);
< 
<         if (!childName.equals(child.getName())) {
<           throw new YAMLException(format("child name: '%s' does not match expected name: '%s' at node %s",
<               child.getName(), childName, node));
<         }
< 
<         Object childValue = child.getValue();
<         if (childValue == null) {
<           childValue = toMap(child);
<         }
<         list.add(childValue);
<       }
< 
<       return list;
<     }
169,170c124
<   //TODO move to polyglot-common, or to org.apache.maven:maven-model
<   private static List<String> ORDER_MODEL = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_MODEL = new ArrayList<>(Arrays.asList(
204c158
<   private static List<String> ORDER_DEVELOPER = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEVELOPER = new ArrayList<>(Arrays.asList(
206c160
<   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<>(Arrays.asList(
208c162
<   private static List<String> ORDER_DEPENDENCY = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEPENDENCY = new ArrayList<>(Arrays.asList(
210c164
<   private static List<String> ORDER_PLUGIN = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_PLUGIN = new ArrayList<>(Arrays.asList(
214,219c168,169
<   /*
<    * Change the default order. Important data goes first.
<    */
<   @Override
<   protected Set<Property> getProperties(Class<? extends Object> type)
<           throws IntrospectionException {
---
>   protected Set<Property> getProperties(Class<? extends Object> type) {
>     try {
231c181,184
<       return super.getProperties(type);
---
>         return super.getProperties(type, BeanAccess.FIELD);
>       }
>     } catch (IntrospectionException e) {
>       throw new RuntimeException(e);
235,238c188,190
<   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order)
<           throws IntrospectionException {
<       Set<Property> standard = super.getProperties(type);
<       Set<Property> sorted = new TreeSet<Property>(new ModelPropertyComparator(order));
---
>   private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order) {
>     Set<Property> standard = super.getProperties(type, BeanAccess.FIELD);
>     Set<Property> sorted = new TreeSet<>(new ModelPropertyComparator(order));
251d202
<       // important go first
258d208
<       // all the rest
268c218
<       return 0;// compare further
---
>       return 0;
