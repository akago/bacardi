 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
package ml.peya.plugins.Utils;

import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.Property;
import net.minecraft.server.v1_12_R1.EntityPlayer;
import net.minecraft.server.v1_12_R1.PlayerInteractManager;
import net.minecraft.server.v1_12_R1.WorldServer;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.OfflinePlayer;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.util.BlockIterator;

import javax.annotation.Nullable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;

import static ml.peya.plugins.Utils.MessageEngine.get;
import static ml.peya.plugins.Variables.skin;

/**
 * プレイヤーに関してまとめたやつ！
 */
public class PlayerUtils
{
    /**
     * 誰が見てるのかわかるやつ。
     *
     * @param player 見られてるプレイヤー。
     * @return 見てるプレイヤー。
     */
    public static Player getLookingEntity(Player player)
    {
        for (Location location : player.getLineOfSight(null, 4).parallelStream().map(Block::getLocation)
            .collect(Collectors.toCollection(ArrayList::new)))
            for (Entity entity : player.getNearbyEntities(3.5, 3.5, 3.5))
                if (isLooking((Player) entity, location) && entity.getType() == EntityType.PLAYER)
                    return (Player) entity;

        return null;
    }

    /**
     * 今見てるかわかるやつ。
     *
     * @param player   見られてるプレイヤー。
     * @param location あと場所。
     * @return 見られてたらtrue。
     */
    public static boolean isLooking(Player player, Location location)
    {
        BlockIterator it = new BlockIterator(player, 4);

        while (it.hasNext())
        {
            final Block block = it.next();
            if (block.getX() == location.getBlockX() &&
                block.getY() == location.getBlockY() &&
                block.getZ() == location.getBlockZ())
                return true;
        }
        return false;
    }

    /**
     * めっちゃクリティカルされたよぉふえええええぇぇぇっていうの確認するやつ
     *
     * @param player クリティカルゥ！プレイヤー。
     * @return クリティカル警察が反応したらtrueを返してくれます。
     */
    public static boolean hasCritical(Player player)
    {
        return player.getFallDistance() > 0.0F &&
            !player.getLocation().getBlock().isLiquid() &&
            !player.isOnGround() &&
            !player.hasPotionEffect(PotionEffectType.BLINDNESS) &&
            player.getVehicle() == null;
    }

    /**
     * ワールド内に新しいプレイヤーを捏造して、{@code EntityPlayer}として返します。
     *
     * @param world ワールドのハンドルを取得するための引数。
     * @return 創造されたプレイヤー。
     */
    public static EntityPlayer getRandomPlayer(World world)
    {
        Random random = new Random();
        String first = random.nextBoolean()
            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)
            : RandomWordUtils.getRandomWord();
        String last = random.nextBoolean()
            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)
            : RandomWordUtils.getRandomWord();

        if (random.nextBoolean())
        {
            first = develop.p2p.lib.LeetConverter.convert(first);
            last = develop.p2p.lib.LeetConverter.convert(last);
        }

        String name = first + (random.nextBoolean() ? "_": "") + last + (random.nextBoolean() ? "19" + random.nextInt(120): "");
        if (name.length() > 16)
            name = random.nextBoolean() ? first: last;

        if (name.length() > 16)
            name = RandomStringUtils.randomAlphanumeric(random.nextInt(16));

        WorldServer worldServer = ((CraftWorld) world).getHandle();

        Pair<String, String> skin = getRandomSkin();

        GameProfile profile = new GameProfile(UUID.randomUUID(), name);

        profile.getProperties().put("textures", new Property("textures", skin.getLeft(), skin.getRight()));

        return new EntityPlayer(
            ((CraftServer) Bukkit.getServer()).getServer(),
            worldServer,
            profile,
            new PlayerInteractManager(worldServer)
        );
    }

    /**
     * ランダムスキンをパパラッチします。
     *
     * @return すきん
     */
    public static Pair<String, String> getRandomSkin()
    {
        try (Connection connection = skin.getConnection();
             Statement statement = connection.createStatement())
        {
            ResultSet result = statement.executeQuery("SELECT Texture, Signature FROM Skin ORDER BY RANDOM() LIMIT 1");
            return !result.next()
                ? Pair.of("", "")
                : Pair.of(result.getString("Texture"), result.getString("Signature"));
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Utils.errorNotification(Utils.getStackTrace(e));
            return Pair.of("", "");
        }
    }

    /**
     * プレイヤーを取得する。たぶん。
     *
     * @param sender イベントセンダー。
     * @param name   なまえ
     * @return Playerの取得に失敗した場合null。
     */
    @Nullable
    public static Player getPlayer(CommandSender sender, String name)
    {
        Player player = Bukkit.getPlayer(name);

        if (player == null)
        {
            sender.sendMessage(get("error.playerNotFound"));

            return null;
        }
        return player;
    }

    /**
     * プレイヤーを取得します(オフラインでも可)
     *
     * @return 取得したプレイヤー
     */
    public static Player getPlayerAllowOffline(String playerName)
    {
        Player player = Bukkit.getPlayer(playerName);
        if (player == null)
        {
            for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())
            {
                if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))
                    player = offlinePlayer.getPlayer();
            }
        }

        return player;
    }

    /**
     * オフラインプレイヤーを取得します
     *
     * @return 取得したプレイヤー
     */
    public static OfflinePlayer getOfflinePlayer(String playerName)
    {
        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())
        {
            if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))
                return offlinePlayer;
        }
        return null;
    }
}

```

2. The error information:
<error_information>
[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[114,35] package develop.p2p.lib does not exist
</error_information>
<error_information>
[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[114,35] package develop.p2p.lib does not exist
</error_information>
<error_information>
[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[113,36] package develop.p2p.lib does not exist
</error_information>
<error_information>
[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[113,36] package develop.p2p.lib does not exist
</error_information>

3. The changes in the API of the dependency:
<api_changes>
     Class develop.p2p.lib.LeetConverter has been removed in the new version of the dependency.
     Constructor develop.p2p.lib.LeetConverter() has been removed in the new version of the dependency.
     Type reference tokyo.peya.lib.LeetConverter() has been added in the new version of the dependency.
     Method tokyo.peya.lib.TimeParser.convert(java.lang.String[]) has been added in the new version of the dependency.
     Method develop.p2p.lib.LeetConverter.convert(java.lang.String) has been removed in the new version of the dependency.
     Method tokyo.peya.lib.LeetConverter.convert(java.lang.String) has been added in the new version of the dependency.
     Method develop.p2p.lib.TimeParser.convert(java.lang.String[]) has been removed in the new version of the dependency.

</api_changes>



Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
