3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
54a56
> {
103c105
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c110,116
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 flywayConfig.setDataSource(this.dataSource());
>                 flywayConfig.setLocations(prop.getProperty("flyway.locations").split(","));
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(flywayConfig);
129,130c132,133
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
197a201,202
>         // region harvester
> 
335c340
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, AlwaysVestedBalances::new);
420,424d424
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
<         }
< 
<         @Bean
