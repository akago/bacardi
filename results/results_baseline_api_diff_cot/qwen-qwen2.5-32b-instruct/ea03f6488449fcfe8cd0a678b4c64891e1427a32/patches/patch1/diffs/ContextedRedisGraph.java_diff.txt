12d11
< import redis.clients.jedis.Client;
13a13,17
> import redis.clients.jedis.JedisClientConfig;
> import redis.clients.jedis.JedisShardInfo;
> import redis.clients.jedis.Pipeline;
> import redis.clients.jedis.Transaction;
> 
15d18
< import redis.clients.jedis.util.SafeEncoder;
17,20d19
< /**
<  * An implementation of RedisGraphContext. Allows sending RedisGraph and some Redis commands,
<  * within a specific connection context
<  */
26,29d24
<     /**
<      * Generates a new instance with a specific Jedis connection
<      * @param connectionContext
<      */
34,37d28
<     /**
<      * Overrides the abstract method. Return the instance only connection
<      * @return
<      */
43,48d33
<     /**
<      * Sends the query over the instance only connection
<      * @param graphId graph to be queried
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
56,59c41,43
<         } catch (JRedisGraphException rt) {
<             throw rt;
<         } catch (JedisDataException j) {
<             throw new JRedisGraphException(j);
---
>         } catch (Exception e) {
>             conn.close();
>             throw e;
63,68d46
<     /**
<      * Sends the read-only query over the instance only connection
<      * @param graphId graph to be queried
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
76,79c54,56
<         } catch (JRedisGraphException ge) {
<             throw ge;
<         } catch (JedisDataException de) {
<             throw new JRedisGraphException(de);
---
>         } catch (Exception e) {
>             conn.close();
>             throw e;
83,89d59
<     /**
<      * Sends the query over the instance only connection
<      * @param graphId graph to be queried
<      * @param timeout
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
95,96c65
<             List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.QUERY,
<                     graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
---
>             List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
98,101c67,69
<         } catch (JRedisGraphException rt) {
<             throw rt;
<         } catch (JedisDataException j) {
<             throw new JRedisGraphException(j);
---
>         } catch (Exception e) {
>             conn.close();
>             throw e;
105,111d72
<     /**
<      * Sends the read-only query over the instance only connection
<      * @param graphId graph to be queried
<      * @param timeout
<      * @param preparedQuery prepared query
<      * @return Result set with the query answer
<      */
117,118c78
<             List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.RO_QUERY,
<                     graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
---
>             List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
120,123c80,82
<         } catch (JRedisGraphException ge) {
<             throw ge;
<         } catch (JedisDataException de) {
<             throw new JRedisGraphException(de);
---
>         } catch (Exception e) {
>             conn.close();
>             throw e;
127,129d85
<     /**
<      * @return Returns the instance Jedis connection.
<      */
135,138c91,95
<     /**
<      * Creates a new RedisGraphTransaction transactional object
<      * @return new RedisGraphTransaction
<      */
---
>     @Override
>     public void setRedisGraphCaches(RedisGraphCaches caches) {
>         this.caches = caches;
>     }
> 
142,147c99,102
<         Client client = jedis.getClient();
<         client.multi();
<         client.getOne();
<         RedisGraphTransaction transaction = new RedisGraphTransaction(client, this);
<         transaction.setRedisGraphCaches(caches);
<         return transaction;
---
>         Transaction transaction = jedis.multi();
>         RedisGraphTransaction redisGraphTransaction = new RedisGraphTransaction(transaction, this);
>         redisGraphTransaction.setRedisGraphCaches(caches);
>         return redisGraphTransaction;
150,153d104
<     /**
<      * Creates a new RedisGraphPipeline pipeline object
<      * @return new RedisGraphPipeline
<      */
157,160c108,111
<         Client client = jedis.getClient();
<         RedisGraphPipeline pipeline = new RedisGraphPipeline(client, this);
<         pipeline.setRedisGraphCaches(caches);
<         return pipeline;
---
>         Pipeline pipeline = jedis.pipelined();
>         RedisGraphPipeline redisGraphPipeline = new RedisGraphPipeline(pipeline, this);
>         redisGraphPipeline.setRedisGraphCaches(caches);
>         return redisGraphPipeline;
163,167d113
<     /**
<      * Perfrom watch over given Redis keys
<      * @param keys
<      * @return "OK"
<      */
173,176d118
<     /**
<      * Removes watch from all keys
<      * @return
<      */
182,186d123
<     /**
<      * Deletes the entire graph
<      * @param graphId graph to delete
<      * @return delete running time statistics
<      */
202,204d138
<     /**
<      * closes the Jedis connection
<      */
208d141
< 
210,215d142
< 
<     @Override
<     public void setRedisGraphCaches(RedisGraphCaches caches) {
<         this.caches = caches;
<     }
< 
