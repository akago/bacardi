1,57c1,10
< /*
<  * Copyright 2020 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< package com.google.pubsublite.kafka.sink;
< 
< import com.google.cloud.pubsublite.CloudZone;
< import com.google.cloud.pubsublite.ProjectPath;
< import com.google.cloud.pubsublite.PublishMetadata;
< import com.google.cloud.pubsublite.TopicName;
< import com.google.cloud.pubsublite.TopicPath;
< import com.google.cloud.pubsublite.internal.Publisher;
< import com.google.cloud.pubsublite.internal.wire.PubsubContext;
< import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;
< import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;
< import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;
< import java.util.Map;
< import org.apache.kafka.common.config.ConfigValue;
< 
< class PublisherFactoryImpl implements PublisherFactory {
< 
<   private static final Framework FRAMEWORK = Framework.of("KAFKA_CONNECT");
< 
<   @Override
<   public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {
<     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);
<     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();
<     TopicPath topic =
<         TopicPath.newBuilder()
<             .setProject(
<                 ProjectPath.parse("projects/" + config.get(ConfigDefs.PROJECT_FLAG).value())
<                     .project())
<             .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))
<             .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))
<             .build();
<     builder.setTopic(topic);
<     builder.setPublisherFactory(
<         partition ->
<             SinglePartitionPublisherBuilder.newBuilder()
<                 .setTopic(topic)
<                 .setPartition(partition)
<                 .setContext(PubsubContext.of(FRAMEWORK))
<                 .build());
<     return builder.build();
<   }
< }
---
> <repair_strategy>
>  1. The class `PublishMetadata` and the method `setContext` have been removed in the new version of the dependency.
>  2. The method `setContext` is no longer available in the `SinglePartitionPublisherBuilder.Builder` class.
>  3. The client code needs to be updated to remove references to `PublishMetadata` and the `setContext` method.
>  4. The function signatures should remain unchanged.
>  5. The minimal set of changes needed is to remove the `PublishMetadata` type and the `setContext` method call.
>  6. The removal of `PublishMetadata` and `setContext` should not affect other parts of the code.
>  7. The class should compile without errors after the changes.
>  8. No additional imports are needed.
> </repair_strategy>
\ No newline at end of file
