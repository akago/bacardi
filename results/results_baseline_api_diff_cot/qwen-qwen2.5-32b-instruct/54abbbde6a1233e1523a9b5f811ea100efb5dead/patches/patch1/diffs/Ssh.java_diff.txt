1,29d0
< /*
<  * Copyright (c) 2014-2022, jcabi.com
<  * All rights reserved.
<  *
<  * Redistribution and use in source and binary forms, with or without
<  * modification, are permitted provided that the following conditions
<  * are met: 1) Redistributions of source code must retain the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer. 2) Redistributions in binary form must reproduce the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer in the documentation and/or other materials provided
<  * with the distribution. 3) Neither the name of the jcabi.com nor
<  * the names of its contributors may be used to endorse or promote
<  * products derived from this software without specific prior written
<  * permission.
<  *
<  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
<  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
<  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
<  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
<  * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
<  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
<  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
<  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
<  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
<  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
<  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
<  * OF THE POSSIBILITY OF SUCH DAMAGE.
<  */
33d3
< import com.jcabi.aspects.Tv;
47d16
< import java.util.concurrent.TimeUnit;
81,82c50
<  *  checking of passphrase. There should probably be separate classes for
<  *  encrypted/unencrypted private key.
---
>  *  checking of passphrase.
86c54
< @SuppressWarnings("PMD.TooManyMethods")
---
> @SuppressWarnings("PMD.ProhibitPublicStaticMethods")
127,152d94
<         this(adr, Ssh.PORT, user, priv);
<     }
< 
<     /**
<      * Constructor.
<      * @param adr IP address
<      * @param user Login
<      * @param priv Private SSH key
<      * @throws UnknownHostException If fails
<      * @since 1.4
<      */
<     public Ssh(final String adr, final String user, final String priv)
<         throws UnknownHostException {
<         this(adr, Ssh.PORT, user, priv);
<     }
< 
<     /**
<      * Constructor.
<      * @param adr IP address
<      * @param user Login
<      * @param priv Private SSH key
<      * @throws UnknownHostException If fails
<      * @since 1.4
<      */
<     public Ssh(final InetAddress adr, final String user, final String priv)
<         throws UnknownHostException {
162,194d103
<      * @throws IOException If fails
<      * @since 1.4
<      * @checkstyle ParameterNumberCheck (6 lines)
<      */
<     public Ssh(final String adr, final int prt,
<         final String user, final URL priv) throws IOException {
<         this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());
<     }
< 
<     /**
<      * Constructor.
<      * @param adr IP address
<      * @param prt Port of server
<      * @param user Login
<      * @param priv Private SSH key
<      * @throws IOException If fails
<      * @since 1.4
<      * @checkstyle ParameterNumberCheck (6 lines)
<      */
<     public Ssh(final InetAddress adr, final int prt,
<         final String user, final URL priv) throws IOException {
<         this(
<             adr.getCanonicalHostName(), prt, user,
<             new UncheckedText(new TextOf(priv)).asString()
<         );
<     }
< 
<     /**
<      * Constructor.
<      * @param adr IP address
<      * @param prt Port of server
<      * @param user Login
<      * @param priv Private SSH key
196c105
<      * @checkstyle ParameterNumberCheck (6 lines)
---
>      * @since 1.4
211d119
<      * @checkstyle ParameterNumberCheck (6 lines)
233d140
<     @Override
235c142
<         attempts = Tv.SEVEN,
---
>         attempts = 7,
292c199
<         session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));
---
>         session.setTimeout((int) TimeUnit.SECONDS.toMillis(10L));
294c201
<         session.setServerAliveCountMax(Tv.MILLION);
---
>         session.setServerAliveCountMax(1000000);
