3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
108,113c109,115
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 flywayConfig.setDataSource(this.dataSource());
>                 flywayConfig.setLocations(prop.getProperty("flyway.locations").split(","));
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(flywayConfig);
117d118
<         @DependsOn("flyway")
129,130c130,131
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
197a199,200
>         // region harvester
> 
