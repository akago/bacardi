1,24d0
< /*
<  * The MIT License
<  *
<  * Copyright 2018 CloudBees, Inc.
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included in
<  * all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
<  * THE SOFTWARE.
<  */
< 
39,40c15
< import org.apache.maven.artifact.versioning.ComparableVersion;
< import org.kohsuke.github.GHCompare;
---
> import org.kohsuke.github.GHRepository;
41a17
> import org.kohsuke.github.GHPullRequest;
63,99d38
<     @FunctionalInterface
<     public interface Log {
<         void info(String message);
<     }
< 
<     public static final class VersionAndRepo implements Comparable<VersionAndRepo> {
<         public final String groupId;
<         public final String artifactId;
<         public final ComparableVersion version;
<         public final String repo;
<         VersionAndRepo(String groupId, String artifactId, ComparableVersion version, String repo) {
<             this.groupId = groupId;
<             this.artifactId = artifactId;
<             this.version = version;
<             this.repo = repo;
<         }
<         /** Sort by version descending. */
<         @Override public int compareTo(VersionAndRepo o) {
<             assert o.groupId.equals(groupId) && o.artifactId.equals(artifactId);
<             return o.version.compareTo(version);
<         }
<         /** @return for example: {@code https://repo/net/nowhere/lib/1.23/} */
<         public String baseURL() {
<             return repo + groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/';
<         }
<         /**
<          * @param type for example, {@code pom}
<          * @return for example: {@code https://repo/net/nowhere/lib/1.23/lib-1.23.pom}
<          */
<         public String fullURL(String type) {
<             return baseURL() + artifactId + '-' + version + '.' + type;
<         }
<         @Override public String toString() {
<             return baseURL();
<         }
<     }
< 
151,155d89
<                 // The problem is that we cannot then guarantee that the POM has been flattened
<                 // (this is only guaranteed for repositories which *may* produce incrementals),
<                 // and loadGitHubCommit will not work for nonflattened POMs from reactor submodules:
<                 // it would have to be made more complicated to resolve the parent POM(s),
<                 // or we would need to switch the implementation to use Maven/Aether resolution APIs.
203,229d136
<      * Parses {@code /project/scm/url} and {@code /project/scm/tag} out of a POM, if mapped to a commit.
<      */
<     private static @CheckForNull GitHubCommit loadGitHubCommit(VersionAndRepo vnr) throws Exception {
<         String pom = vnr.fullURL("pom");
<         Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(pom);
<         NodeList scmEs = doc.getElementsByTagName("scm");
<         if (scmEs.getLength() != 1) {
<             return null;
<         }
<         Element scmE = (Element) scmEs.item(0);
<         Element urlE = theElement(scmE, "url", pom);
<         String url = urlE.getTextContent();
<         Matcher m = Pattern.compile("https?://github[.]com/([^/]+)/([^/]+?)([.]git)?(/.*)?").matcher(url);
<         if (!m.matches()) {
<             throw new Exception("Unexpected /project/scm/url " + url + " in " + pom + "; expecting https://github.com/owner/repo format");
<         }
<         Element tagE = theElement(scmE, "tag", pom);
<         String tag = tagE.getTextContent();
<         String groupId = m.group(1);
<         String artifactId = m.group(2).replace("${project.artifactId}", vnr.artifactId);
<         if (!tag.matches("[a-f0-9]{40}")) {
<             return null;
<         }
<         return new GitHubCommit(groupId, artifactId, tag);
<     }
< 
<     /**
239,240c146,148
<             GHCompare.Status status = GitHub.connect().getRepository(ghc.owner + '/' + ghc.repo).getCompare(branch, ghc.hash).status;
<             return status == GHCompare.Status.identical || status == GHCompare.Status.behind;
---
>             GHRepository repo = GitHub.connect().getRepository(ghc.owner + '/' + ghc.repo);
>             GHPullRequest pr = repo.getPullRequest(ghc.hash);
>             return pr.getBase().getRef().equals(branch);
