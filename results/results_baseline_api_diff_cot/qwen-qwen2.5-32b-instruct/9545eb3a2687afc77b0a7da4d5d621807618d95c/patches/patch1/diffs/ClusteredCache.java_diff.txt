1,15d0
< /*
<  * Copyright (C) 1999-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
20,23c5,9
< import com.hazelcast.core.IMap;
< import com.hazelcast.core.MapEvent;
< import com.hazelcast.map.listener.MapListener;
< import com.hazelcast.monitor.LocalMapStats;
---
> import com.hazelcast.map.IMap;
> import com.hazelcast.map.LocalMapStats;
> import com.hazelcast.map.MapEvent;
> import com.hazelcast.map.MapListener;
> import com.hazelcast.cluster.Member;
45,48d30
< /**
<  * Clustered implementation of the Cache interface using Hazelcast.
<  *
<  */
55,57d36
<     /**
<      * The map is used for distributed operations such as get, put, etc.
<      */
62,73d40
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
<     private Instant lastPluginClassLoaderWarning = Instant.EPOCH;
<     private final Duration pluginClassLoaderWarningSupression = Duration.ofHours(1);
< 
<     /**
<      * Create a new cache using the supplied named cache as the actual cache implementation
<      *
<      * @param name a name for the cache, which should be unique per vm.
<      * @param cache the cache implementation
<      */
80c47
<     void addEntryListener(final MapListener listener) {
---
>     void addEntryListener(final MapListener<K, V> listener) {
85,86c52
<     public String addClusteredCacheEntryListener(@Nonnull final ClusteredCacheEntryListener<K, V> clusteredCacheEntryListener, final boolean includeValues, final boolean includeEventsFromLocalNode)
<     {
---
>     public String addClusteredCacheEntryListener(@Nonnull final ClusteredCacheEntryListener<K, V> clusteredCacheEntryListener, final boolean includeValues, final boolean includeEventsFromLocalNode) {
92c58
<                     logger.trace("Processing map evicted event of node '{}'", eventNodeId);
---
>                     logger.trace("Processing map evicted event of node '{}' for key '{}'", eventNodeId, event.getKey());
225d190
<         // Instances are likely all loaded by the same class loader. For resource usage optimization, let's test just one, not all.
267,271d231
<     public void setMaxCacheSize(int i) {
<         setMaxCacheSize((long) i);
<     }
< 
<     @Override
276,285d235
<     @Override
<     public long getMaxLifetime() {
<         return CacheFactory.getMaxCacheLifetime(getName());
<     }
< 
<     @Override
<     public void setMaxLifetime(final long maxLifetime) {
<         CacheFactory.setMaxLifetimeProperty(getName(), maxLifetime);
<     }
< 
316,324d265
<     /**
<      * Clustered caches should not contain instances of classes that are provided by Openfire plugins. These will cause
<      * issues related to class loading when the providing plugin is reloaded. This method verifies if an instance is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
327,329c268
<             && lastPluginClassLoaderWarning.isBefore(Instant.now().minus(pluginClassLoaderWarningSupression)) )
<         {
<             // Try to determine what plugin loaded the offending class.
---
>             && lastPluginClassLoaderWarning.isBefore(Instant.now().minus(pluginClassLoaderWarningSupression))) {
