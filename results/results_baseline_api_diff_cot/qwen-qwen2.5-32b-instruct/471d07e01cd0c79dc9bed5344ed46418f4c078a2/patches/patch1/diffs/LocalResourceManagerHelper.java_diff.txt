1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
25,31c9,15
< import com.google.api.services.cloudresourcemanager.model.Binding;
< import com.google.api.services.cloudresourcemanager.model.Operation;
< import com.google.api.services.cloudresourcemanager.model.Policy;
< import com.google.api.services.cloudresourcemanager.model.Project;
< import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;
< import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Binding;
> import com.google.api.services.cloudresourcemanager.v3.model.Operation;
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
> import com.google.api.services.cloudresourcemanager.v3.model.Project;
> import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;
> import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;
86,87c70,71
<  *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to
<  *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link
---
>  *   <li>In this mock, projects never move from the <i>DELETE_REQUESTed</i> lifecycle state to
>  *       <i>DELETEInProgress</i> without an explicit call to the utility method {@link
117c101
<           "Could not initialize LocalResourceManagerHelper due to URISyntaxException.", e);
---
>           ("Could not initialize LocalResourceManagerHelper due to URISyntaxException.", e);
171a156
>             ));
183a169
>           );
187a174
>           ));
204a192
>                 );
209c197,198
<                   get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));
---
>                   get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()
>                       ));
211c200,201
<               response = list(parseListOptions(exchange.getRequestURI().getQuery()));
---
>               response = list(parseListOptions(exchange.getRequestURI().getQuery()
>                   ));
218c208,209
<                 replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));
---
>                 replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class
>                     ));
223c214
<                     "The server could not understand the following request URI: "
---
>                     ("The server could not understand the following request URI: "
226a218
>                     );
238a231
>           ));
242a236
>               );
244c238,239
<           return getPolicy(projectIdFromUri(path));
---
>           return getPolicy(projectIdFromUri(path
>               );
247c242
<               projectIdFromUri(path),
---
>               (projectIdFromUri(path),
250,251c245,246
<           return testPermissions(
<               projectIdFromUri(path),
---
>           return testPermissions
>               (projectIdFromUri(path),
253,254c248
<                   .fromString(requestBody, TestIamPermissionsRequest.class)
<                   .getPermissions());
---
>                   .fromString(requestBody, TestIamPermissionsRequest.class).getPermissions());
256,257c250,252
<           return Error.BAD_REQUEST.response(
<               "The server could not understand the following request URI: POST " + path);
---
>           return Error.BAD_REQUEST.response
>               ("The server could not understand the following request URI: POST " + path);
>               );
283,285c278,280
<                 new Response(
<                     HTTP_OK,
<                     jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
---
>                 new Response
>                     (HTTP_OK,
>                     , jsonFactory.toString(new Operation().setDone(true).setResponse(project)));
288,289c283,284
<                 Error.INTERNAL_ERROR.response(
<                     "Error when serializing project " + project.getProjectId());
---
>                 Error.INTERNAL_ERROR.response
>                     ("Error when serializing project " + project.getProjectId());
294,295c289,290
<               Error.BAD_REQUEST.response(
<                   "The server could not understand the following request URI: "
---
>               Error.BAD_REQUEST.response
>                   ("The server could not understand the following request URI: "
310a306
>           ));
326,327c322,323
<           throw new IOException(
<               "The request has the following unsupported HTTP content encoding: " + encoding);
---
>           throw new IOException
>               ("The request has the following unsupported HTTP content encoding: " + encoding);
330a327
>           );
338c335
<       throw new IOException("The URI path '" + path + "' doesn't have a project ID.");
---
>       throw new IOException"The URI path '" + path + "' doesn't have a project ID.";
345c342
<       String[] querySplit = query.split("=");
---
>       String[] querySplit = query.split("&");
362,363c359,360
<               options.put("projectFields", matcher.group(2).split(","));
<               options.put("listFields", (matcher.group(1) + matcher.group(3)).split(","));
---
>               options.put("projectFields", matcher.group(2).split(",");
>               options.put("listFields", (matcher.group(1) + matcher.group(3)).split(",");
365,366c362,363
<               options.put("projectFields", NO_FIELDS);
<               options.put("listFields", argEntry[1].split(","));
---
>               options.put("projectFields", NO_FIELDS;
>               options.put("listFields", argEntry[1].split(",");
370c367
<             options.put("filter", argEntry[1].split(" "));
---
>             options.put("filter", argEntry[1].split(" ");
373c370
<             options.put("pageToken", argEntry[1]);
---
>             options.put("pageToken", argEntry[1];
378c375
<               throw new IOException("Page size must be greater than 0.");
---
>               throw new IOException"Page size must be greater than 0.";
380c377
<             options.put("pageSize", pageSize);
---
>             options.put("pageSize", pageSize;
450,452c447,449
<       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));
<       project.setCreateTime(
<           DateTimeFormatter.ISO_DATE_TIME
---
>       project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE);
>       project.setCreateTime
>           (DateTimeFormatter.ISO_DATE_TIME
454c451
<               .format(Instant.ofEpochMilli(System.currentTimeMillis())));
---
>               .format(Instant.ofEpochMilli(System.currentTimeMillis()));
456,457c453,454
<         return Error.ALREADY_EXISTS.response(
<             "A project with the same project ID (" + project.getProjectId() + ") already exists.");
---
>         return Error.ALREADY_EXISTS.response
>             ("A project with the same project ID (" + project.getProjectId() + ") already exists.");
468,469c465,466
<             jsonFactory.toString(
<                 new Operation().setDone(false).setName("operations/" + project.getProjectId()));
---
>             jsonFactory.toString
>                 (new Operation().setDone(false).setName("operations/" + project.getProjectId());
472c469,470
<         return Error.INTERNAL_ERROR.response("Error serializing project " + project.getProjectId());
---
>         return Error.INTERNAL_ERROR.response
>             ("Error serializing project " + project.getProjectId());
480,481c478,479
<       return Error.PERMISSION_DENIED.response(
<           "Error when deleting " + projectId + " because the project was not found.");
---
>       return Error.PERMISSION_DENIED.response
>           ("Error when deleting " + projectId + " because the project was not found.");
483,485c481,483
<     if (!project.getLifecycleState().equals("ACTIVE")) {
<       return Error.FAILED_PRECONDITION.response(
<           "Error when deleting " + projectId + " because the lifecycle state was not ACTIVE.");
---
>     if (!project.getLifecycleState().equals("ACTIVE") {
>       return Error.FAILED_PRECONDITION.response
>           ("Error when delete " + projectId + " because the lifecycle state was not ACTIVE.");
487c485
<       project.setLifecycleState("DELETE_REQUESTED");
---
>       project.setLifecycleState"DELETE_REQUESTed");
496c494,495
<         return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));
---
>         return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields));
>             ));
498,499c497,498
<         return Error.INTERNAL_ERROR.response(
<             "Error when serializing project " + project.getProjectId());
---
>         return Error.INTERNAL_ERROR.response
>             ("Error when serializing project " + project.getProjectId());
508c507
<     String[] filters = (String[]) options.get("filter");
---
>     String[] filters = (String[]) options.get"filter";
510c509
<       return Error.INVALID_ARGUMENT.response("Could not parse the filter.");
---
>       return Error.INVALID_ARGUMENT.response"Could not parse the filter.");
512c511
<     String[] projectFields = (String[]) options.get("projectFields");
---
>     String[] projectFields = (String[]) options.get"projectFields";
514,515c513,514
<     String pageToken = (String) options.get("pageToken");
<     Integer pageSize = (Integer) options.get("pageSize");
---
>     String pageToken = (String) options.get"pageToken";
>     Integer pageSize = (Integer) options.get"pageSize";
530c529,530
<           projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));
---
>           projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields));
>               ));
532,533c532,533
<           return Error.INTERNAL_ERROR.response(
<               "Error when serializing project " + p.getProjectId());
---
>           return Error.INTERNAL_ERROR.response
>               ("Error when serializing project " + p.getProjectId());
537c537
<     String[] listFields = (String[]) options.get("listFields");
---
>     String[] listFields = (String[]) options.get"listFields";
541c541
<     if (!(projectFields != null && projectFields.length == 0)) {
---
>     if (!(projectFields != null && projectFields.length == 0) {
543c543
<       Joiner.on(",").appendTo(responseBody, projectsSerialized);
---
>       Joiner.on(",".appendTo(responseBody, projectsSerialized);
547c547
<         && (listFields == null || ImmutableSet.copyOf(listFields).contains("nextPageToken"))) {
---
>         && (listFields == null || ImmutableSet.copyOf(listFields).contains"nextPageToken")) {
562c562
<       if (!("id".equals(field) || "name".equals(field) || field.startsWith("labels."))) {
---
>       if (!"id".equals(field) || "name".equals(field) || field.startsWith"labels.") {
577c577
<         if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {
---
>         if (!satisfiesFilter(project.getProjectId(), filterEntry[1]) {
580,581c580,581
<       } else if ("name".equals(filterType)) {
<         if (!satisfiesFilter(project.getName(), filterEntry[1])) {
---
>       } else if "name".equals(filterType) {
>         if (!satisfiesFilter(project.getName(), filterEntry[1]) {
584,585c584,585
<       } else if (filterType.startsWith("labels.")) {
<         String labelKey = filterType.substring("labels.".length());
---
>       } else if (filterType.startsWith"labels.") {
>         String labelKey = filterType.substring"labels.".length();
588c588
<           if (!satisfiesFilter(labelValue, filterEntry[1])) {
---
>           if (!satisfiesFilter(labelValue, filterEntry[1]) {
640,647c640,647
<       return Error.PERMISSION_DENIED.response(
<           "Error when replacing " + projectId + " because the project was not found.");
<     } else if (!originalProject.getLifecycleState().equals("ACTIVE")) {
<       return Error.FAILED_PRECONDITION.response(
<           "Error when replacing " + projectId + " because the lifecycle state was not ACTIVE.");
<     } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {
<       return Error.INVALID_ARGUMENT.response(
<           "The server currently only supports setting the parent once "
---
>       return Error.PERMISSION_DENIED.response
>           ("Error when replacing " + projectId + " because the project was not found.");
>     } else if (!originalProject.getLifecycleState().equals"ACTIVE") {
>       return Error.FAILED_PRECONDITION.response
>           ("Error when replace " + projectId + " because the lifecycle state was not ACTIVE.");
>     } else if (!Objects.equal(originalProject.parent(), project.parent()) {
>       return Error.INVALID_ARGUMENT.response
>           ("The server currently only supports setting the parent once "
653d652
<     project.setProjectNumber(originalProject.getProjectNumber());
657c656,657
<       return new Response(HTTP_OK, jsonFactory.toString(project));
---
>       return new Response(HTTP_OK, jsonFactory.toString(project);
>           );
659c659
<       return Error.INTERNAL_ERROR.response("Error when serializing project " + projectId);
---
>       return Error.INTERNAL_ERROR.response"Error when serializing project " + projectId);
668,670c668,670
<           Error.PERMISSION_DENIED.response(
<               "Error when undeleting " + projectId + " because the project was not found.");
<     } else if (!project.getLifecycleState().equals("DELETE_REQUESTED")) {
---
>           Error.PERMISSION_DENIED.response
>               ("Error when undelete " + projectId + " because the project was not found.");
>     } else if (!project.getLifecycleState().equals"DELETE_REQUESTed") {
672,673c672,673
<           Error.FAILED_PRECONDITION.response(
<               "Error when undeleting "
---
>           Error.FAILED_PRECONDITION.response
>               ("Error when undelete "
675c675
<                   + " because the lifecycle state was not DELETE_REQUESTED.");
---
>                   + " because the lifecycle state was not DELETE_REQUESTed.");
677c677
<       project.setLifecycleState("ACTIVE");
---
>       project.setLifecycleState"ACTIVE");
686c686
<       return Error.PERMISSION_DENIED.response("Project " + projectId + " not found.");
---
>       return Error.PERMISSION_DENIED.response"Project " + projectId + " not found.");
689c689,690
<       return new Response(HTTP_OK, jsonFactory.toString(policy));
---
>       return new Response(HTTP_OK, jsonFactory.toString(policy);
>           );
691,692c692,694
<       return Error.INTERNAL_ERROR.response(
<           "Error when serializing the IAM policy for " + projectId);
---
>       return Error.INTERNAL_ERROR.response
>           ("Error when serializing the IAM policy for " + projectId);
>           );
697c699
<     Policy originalPolicy = policies.get(projectId);
---
>     Policy originalPolicy = policies.getprojectId;
699,700c701,702
<       return Error.PERMISSION_DENIED.response(
<           "Error when replacing the policy for "
---
>       return Error.PERMISSION_DENIED.response
>           ("Error when replace the policy for "
706,707c708,709
<       return Error.ABORTED.response(
<           "Policy etag mismatch when replacing the policy for project "
---
>       return Error.ABorted.response
>           ("Policy etag mismatch when replace the policy for project "
715c717
<       return new Response(HTTP_OK, jsonFactory.toString(policy));
---
>       return new Response(HTTP_OK, jsonFactory.toString(policy);
717,718c719,720
<       return Error.INTERNAL_ERROR.response(
<           "Error when serializing the policy for project " + projectId);
---
>       return Error.INTERNAL_ERROR.response
>           ("Error when serializing the policy for project " + projectId);
724c726
<       return Error.PERMISSION_DENIED.response("Project " + projectId + " not found.");
---
>       return Error.PERMISSION_DENIED.response"Project " + projectId + " not found.");
727,729c729,732
<       return new Response(
<           HTTP_OK,
<           jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));
---
>       return new Response
>           (HTTP_OK,
>           jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions));
>               ));
731c734
<       return Error.INTERNAL_ERROR.response("Error when serializing permissions " + permissions);
---
>       return Error.INTERNAL_ERROR.response"Error when serializing permissions " + permissions);
742c745
<       throw new RuntimeException("Could not bind the mock Resource Manager server.", e);
---
>       throw new RuntimeException"Could not bind the mock Resource Manager server.", e);
759c762
<         .setHost("http://localhost:" + port)
---
>         .setHost"http://localhost:" + port)
780,785c783,788
<     checkArgument(
<         "ACTIVE".equals(lifecycleState)
<             || "DELETE_REQUESTED".equals(lifecycleState)
<             || "DELETE_IN_PROGRESS".equals(lifecycleState),
<         "Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS");
<     Project project = projects.get(checkNotNull(projectId));
---
>     checkArgument
>         ("ACTIVE".equals(lifecycleState)
>             || "DELETE_REQUESTed".equals(lifecycleState)
>             || "DELETEInProgress".equals(lifecycleState),
>         "Lifecycle state must be ACTIVE, DELETE_REQUESTed, or DELETEInProgress");
>     Project project = projects.get(checkNotNull(projectId);
804c807
<     policies.remove(checkNotNull(projectId));
---
>     policies.remove(checkNotNull(projectId);
