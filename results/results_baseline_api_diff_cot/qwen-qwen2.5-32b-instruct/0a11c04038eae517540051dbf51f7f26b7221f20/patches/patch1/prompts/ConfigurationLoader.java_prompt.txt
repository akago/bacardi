 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
package io.simplelocalize.cli.configuration;

import io.simplelocalize.cli.exception.ConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;

public final class ConfigurationLoader
{

  private static final Path DEFAULT_CONFIG_FILE_NAME = Path.of("simplelocalize.yml");

  private final Logger log = LoggerFactory.getLogger(ConfigurationLoader.class);

  public Configuration loadOrGetDefault(Path configurationFilePath)
  {
    ConfigurationLoader configurationLoader = new ConfigurationLoader();

    if (configurationFilePath == null)
    {
      configurationFilePath = DEFAULT_CONFIG_FILE_NAME;
    }

    return configurationLoader.load(configurationFilePath);
  }

  private Configuration load(Path configurationFilePath)
  {
    File file = new File(URLDecoder.decode(String.valueOf(configurationFilePath.toFile()), StandardCharsets.UTF_8));
    Constructor yamlTargetClass = new Constructor(Configuration.class);
    Yaml yaml = new Yaml(yamlTargetClass);

    log.info("Loading configuration file from: {}", configurationFilePath);
    Configuration configuration;
    try
    {
      InputStream inputStream = new FileInputStream(file);
      configuration = yaml.load(inputStream);
      log.info("Configuration file loaded successfully");
    } catch (FileNotFoundException e)
    {
      log.info("Configuration file not present");
      return new Configuration();
    } catch (Exception e)
    {
      log.error("Unable to load configuration: {}", e.getMessage());
      throw new ConfigurationException();
    }
    return configuration;

  }

}

```

2. The error information:
<error_information>
[ERROR] /simplelocalize-cli/src/main/java/io/simplelocalize/cli/configuration/ConfigurationLoader.java:[39,64] incompatible types: java.lang.Class<io.simplelocalize.cli.configuration.Configuration> cannot be converted to org.yaml.snakeyaml.LoaderOptions
</error_information>

3. The changes in the API of the dependency:
<api_changes>
     Constructor org.yaml.snakeyaml.constructor.Constructor(java.lang.Class) has been removed in the new version of the dependency.
     Constructor org.yaml.snakeyaml.constructor.Constructor() has been removed in the new version of the dependency.
     Construct org.yaml.snakeyaml.constructor.Constructor(java.lang.String,org.yaml.snakeyaml.LoaderOptions) has been added in the new version of the dependency.
     Constructor org.yaml.snakeyaml.constructor.Constructor(java.lang.String) has been removed in the new version of the dependency.
     Construct org.yaml.snakeyaml.constructor.Constructor(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions) has been added in the new version of the dependency.
     Construct org.yaml.snakeyaml.constructor.Constructor(org.yaml.snakeyaml.LoaderOptions) has been added in the new version of the dependency.
     Construct org.yaml.snakeyaml.constructor.Constructor(org.yaml.snakeyaml.TypeDescription,org.yaml.snakeyaml.LoaderOptions) has been added in the new version of the dependency.
     Constructor org.yaml.snakeyaml.constructor.Constructor(org.yaml.snakeyaml.TypeDescription) has been removed in the new version of the dependency.
     Constructor org.yaml.snakeyaml.constructor.Constructor(org.yaml.snakeyaml.TypeDescription,java.util.Collection) has been removed in the new version of the dependency.
     Construct org.yaml.snakeyaml.constructor.Constructor(java.lang.Class,org.yaml.snakeyaml.LoaderOptions) has been added in the new version of the dependency.

</api_changes>


Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
