1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
25,28c9,15
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
---
> import com.google.api.services.translate.v3.Translate;
> import com.google.api.services.translate.v3.model.DetectLanguageRequest;
> import com.google.api.services.translate.v3.model.DetectLanguageResponse;
> import com.google.api.services.translate.v3.model.Glossary;
> import com.google.api.services.translate.v3.model.ListGlossariesResponse;
> import com.google.api.services.translate.v3.model.TranslateTextRequest;
> import com.google.api.services.translate.v3.model.TranslateTextResponse;
69c56
<   public List<List<DetectionsResourceItems>> detect(List<String> texts) {
---
>   public List<List<String>> detect(List<String> texts) {
71,73c58,60
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
---
>       DetectLanguageRequest request = new DetectLanguageRequest().setTexts(texts);
>       DetectLanguageResponse response = translate.projects().locations().detectLanguage(request).setParent("projects/" + options.getProjectId()).execute();
>       return response.getLanguages();
80c67
<   public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
---
>   public List<Glossary> listSupportedLanguages(Map<Option, ?> optionMap) {
82,92c69,71
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
---
>       String targetLanguage = firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       ListGlossariesResponse response = translate.projects().locations().glossaries().list("projects/" + options.getProjectId() + "/locations/global").execute();
>       return response.getGlossaries();
99c78
<   public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
---
>   public List<String> translate(List<String> texts, Map<Option, ?> optionMap) {
101,124c80,84
<       String targetLanguage =
<           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
<       final String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
<       return Lists.transform(
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
<             @Override
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
<               return translationsResource;
<             }
<           });
---
>       String targetLanguage = firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
>       TranslateTextRequest request = new TranslateTextRequest().setTargetLanguage(targetLanguage).setSourceLanguage(sourceLanguage).setTexts(texts);
>       TranslateTextResponse response = translate.projects().locations().translateText(request).setParent("projects/" + options.getProjectId() + "/locations/global").execute();
>       return response.getTranslations();
