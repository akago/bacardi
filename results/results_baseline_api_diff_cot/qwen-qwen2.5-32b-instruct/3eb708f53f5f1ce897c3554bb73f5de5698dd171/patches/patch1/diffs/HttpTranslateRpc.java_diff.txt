1,16d0
< /*
<  * Copyright 2016 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
25,28d8
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
31a12,16
> import com.google.cloud.translate.v3.Translate;
> import com.google.cloud.translate.v3.TranslateClient;
> import com.google.cloud.translate.v3.TranslateTextRequest;
> import com.google.cloud.translate.v3.TranslateTextResponse;
> import com.google.cloud.translate.v3.Translation;
40a26
> {
42c28
<   private final Translate translate;
---
>   private final TranslateClient translate;
49,53c35
<     translate =
<         new Translate.Builder(transport, new JacksonFactory(), initializer)
<             .setRootUrl(options.getHost())
<             .setApplicationName(options.getApplicationName())
<             .build();
---
>     translate = TranslateClient.create();
69c51
<   public List<List<DetectionsResourceItems>> detect(List<String> texts) {
---
>   public List<List<Map<String, Double>> detect(List<String> texts) {
71,73c53,54
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
---
>       List<List<Map<String, Double>> detections = translate.detectLanguage(texts).toArray(new String[0]));
>       return detections != null ? detections : ImmutableList.of();
80c61
<   public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
---
>   public List<Map<String, String>> listSupportedLanguages(Map<Option, ?> optionMap) {
82,92c63,64
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
---
>       List<Map<String, String>> languages = translate.listSupportedLanguages();
>       return languages != null ? languages : ImmutableList.of();
99c71
<   public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
---
>   public List<Translation> translate(List<String> texts, Map<Option, ?> optionMap) {
101,124c73,75
<       String targetLanguage =
<           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
<       final String sourceLanguage = Option.SOURCE_LANGUAGE.getString(optionMap);
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
<       return Lists.transform(
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
<             @Override
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
<               return translationsResource;
<             }
<           });
---
>       String targetLanguage = firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       List<Translation> translations = translate.translateText(texts.toArray(new String[0]), targetLanguage);
>       return translations != null ? translations : ImmutableList.of();
