```java
package com.google.cloud.translate.spi.v2;

import com.google.cloud.ServiceRpc;
import java.util.List;
import java.util.Map;

public interface TranslateRpc extends ServiceRpc {

  enum Option {
    SOURCE_LANGUAGE("source"),
    TARGET_LANGUAGE("target"),
    MODEL("model"),
    FORMAT("format");

    private final String value;

    Option(String value) {
      this.value = value;
    }

    public String value() {
      return value;
    }

    @SuppressWarnings("unchecked")
    <T> T get(Map<Option, ?> options) {
      return (T) options.get(this);
    }

    String getString(Map<Option, ?> options) {
      return get(options);
    }
  }

  /**
   * Returns a list of the languages supported by Google Translation.
   *
   * @param optionMap options to listing language translations
   */
  List<Map<String, String>> listSupportedLanguages(Map<Option, ?> optionMap);

  /**
   * Detects the language of the provided texts.
   *
   * @param texts the texts to translate
   * @return a list of lists of detections, one list of detections for each provided text, in order
   */
  List<List<Map<String, String>>> detect(List<String> texts);

  /**
   * Translates the provided texts.
   *
   * @param texts the texts to translate
   * @param optionMap options to text translation
   * @return a list of resources containing translation information, in the same order of the
   *     provided texts
   */
  List<Map<String, String>> translate(List<String> texts, Map<Option, ?> optionMap);
}
```

In the provided solution, the classes `TranslationsResource`, `LanguagesResource`, and `DetectionsResourceItems` have been removed from the dependency. To address this, the return types of the methods `listSupportedLanguages`, `detect`, and `translate` have been changed to `List<Map<String, String>>` and `List<List<Map<String, String>>>` respectively. This change assumes that the new API returns a similar structure but in a more generic form, using maps to represent the data that was previously encapsulated in the specific classes. This approach maintains the structure of the original code while adapting to the changes in the dependency.
