 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
/*
 * Copyright 2016 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.translate;

import com.google.api.services.translate.model.TranslationsResource;
import com.google.common.base.Function;
import com.google.common.base.MoreObjects;
import java.io.Serializable;
import java.util.List;
import java.util.Objects;

/**
 * Information about a translation. Objects of this class contain the translated text and the source
 * language's code. The source language's code can be optionally specified by the user or
 * automatically detected by the Google Translation service.
 *
 * @see <a href="https://cloud.google.com/translate/v2/translating-text-with-rest">Translating
 *     Text</a>
 */
public class Translation implements Serializable {

  private static final long serialVersionUID = 2556017420486245581L;
  static final Function<TranslationsResource, Translation> FROM_PB_FUNCTION =
      new Function<TranslationsResource, Translation>() {
        @Override
        public Translation apply(TranslationsResource translationPb) {
          return Translation.fromPb(translationPb);
        }
      };

  private final String translatedText;
  private final String sourceLanguage;
  private final String model;

  private Translation(String translatedText, String sourceLanguage, String model) {
    this.translatedText = translatedText;
    this.sourceLanguage = sourceLanguage;
    this.model = model;
  }

  /** Returns the translated text. */
  public String getTranslatedText() {
    return translatedText;
  }

  /**
   * Returns the language code of the source text. If no source language was provided this value is
   * the source language as detected by the Google Translation service.
   */
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  /**
   * Returns the translation model used to translate the text. This value is only available if a
   * result from {@link Translate.TranslateOption#model(String)} was passed to {@link
   * Translate#translate(List, Translate.TranslateOption...)}.
   *
   * <p>Please note that you must be whitelisted to use the {@link
   * Translate.TranslateOption#model(String)} option, otherwise translation will fail.
   */
  public String getModel() {
    return model;
  }

  @Override
  public String toString() {
    return MoreObjects.toStringHelper(this)
        .add("translatedText", translatedText)
        .add("sourceLanguage", sourceLanguage)
        .toString();
  }

  @Override
  public final int hashCode() {
    return Objects.hash(translatedText, sourceLanguage);
  }

  @Override
  public final boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null || !obj.getClass().equals(Translation.class)) {
      return false;
    }
    Translation other = (Translation) obj;
    return Objects.equals(translatedText, other.translatedText)
        && Objects.equals(sourceLanguage, other.sourceLanguage);
  }

  static Translation fromPb(TranslationsResource translationPb) {
    return new Translation(
        translationPb.getTranslatedText(),
        translationPb.getDetectedSourceLanguage(),
        translationPb.getModel());
  }
}

```

2. The error information:
<error_information>
[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Translation.java:[37,25] cannot find symbol
  symbol:   class TranslationsResource
  location: class com.google.cloud.translate.Translation

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Translation.java:[106,29] cannot find symbol
  symbol:   class TranslationsResource
  location: class com.google.cloud.translate.Translation

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Translation.java:[38,20] cannot find symbol
  symbol:   class TranslationsResource
  location: class com.google.cloud.translate.Translation

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Translation.java:[40,34] cannot find symbol
  symbol: class TranslationsResource

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Translation.java:[19,47] package com.google.api.services.translate.model does not exist
</error_information>

3. The changes in the API of the dependency:
<api_changes>
     Constructor com.google.api.services.translate.model.TranslationsResource() has been removed in the new version of the dependency.
     Class com.google.api.services.translate.model.TranslationsResource has been removed in the new version of the dependency.
     Method com.google.api.services.translate.model.TranslationsResource.getModel() has been removed in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.TranslateTextRequest.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.Translation.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.Translate$Translations$List.getModel() has been removed in the new version of the dependency.
     Method com.google.api.services.translate.v3.Translate$Projects$GetSupportedLanguages.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.model.TranslateTextRequest.getModel() has been removed in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.TranslateDocumentResponse.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.v3.Translate$Projects$Locations$GetSupportedLanguages.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.TranslateDocumentRequest.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.DetectLanguageRequest.getModel() has been added in the new version of the dependency.
     Method com.google.api.services.translate.Translate$Languages$List.getModel() has been removed in the new version of the dependency.
     Method com.google.api.services.translate.v3.model.Translation.getTranslatedText() has been added in the new version of the dependency.
     Method com.google.api.services.translate.model.TranslationsResource.getTranslatedText() has been removed in the new version of the dependency.
     Method com.google.api.services.translate.model.TranslationsResource.getDetectedSourceLanguage() has been removed in the new version of the dependency.

</api_changes>


Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
