```java
import java.util.Locale;
import java.util.ResourceBundle;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.inject.Named;

@RequestScoped
@Named("msg")
public class Messages {

    private static final String BASE_NAME = "messages";

    @Inject
    private javax.mvc.locale.LocaleResolver localeResolver;

    /**
     * Get the assigned message to some key based on the {@link java.util.Locale} of the current request.
     *
     * @param key the message key to use
     * @return the correct translation assigned to the key for the request locale, a fallback translation or a
     * placeholder for unknown keys.
     */
    public final String get(final String key) {
        final Locale locale = localeResolver.resolveLocale();
        final ResourceBundle bundle = ResourceBundle.getBundle(BASE_NAME, locale);

        return bundle.containsKey(key) ? bundle.getString(key) : formatUnknownKey(key);
    }

    private static String formatUnknownKey(final String key) {
        return String.format("???%s???", key);
    }
}
```

In this solution, the `MvcContext` class has been replaced with `javax.mvc.locale.LocaleResolver` to resolve the locale for the current request. This change is necessary because `MvcContext` has been removed in the new version of the dependency. The `localeResolver` is injected to replace the functionality of `mvcContext.getLocale()`. The rest of the class remains unchanged to ensure that the functionality is preserved.
