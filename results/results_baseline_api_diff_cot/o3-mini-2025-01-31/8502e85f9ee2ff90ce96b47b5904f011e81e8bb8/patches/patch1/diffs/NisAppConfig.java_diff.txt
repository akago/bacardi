3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
92,93c94,96
<                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
<                                 configuration.getNetworkName());
---
>                 final String jdbcUrl = prop.getProperty("jdbc.url")
>                                 .replace("${nem.folder}", nemFolder)
>                                 .replace("${nem.network}", configuration.getNetworkName());
108,113c111,122
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final String jdbcUrl = prop.getProperty("jdbc.url")
>                                 .replace("${nem.folder}", nemFolder)
>                                 .replace("${nem.network}", configuration.getNetworkName());
> 
>                 ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(jdbcUrl, prop.getProperty("jdbc.username"), prop.getProperty("jdbc.password"));
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
>                 config.setLocations(new Location[] { new Location(prop.getProperty("flyway.locations")) });
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 return new Flyway(config);
129,130c138,143
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new BlockChainServices(this.blockDao,
>                                 this.blockTransactionObserverFactory(),
>                                 this.blockValidatorFactory(),
>                                 this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(),
>                                 this.nisConfiguration().getForkConfiguration());
135,136c148,153
<                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
<                                 this.unconfirmedTransactions(), this.nisConfiguration());
---
>                 return new BlockChainUpdater(this.nisCache(),
>                                 this.blockChainLastBlockLayer,
>                                 this.blockDao,
>                                 this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(),
>                                 this.nisConfiguration());
141c158,161
<                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
---
>                 return new BlockChainContextFactory(this.nisCache(),
>                                 this.blockChainLastBlockLayer,
>                                 this.blockDao,
>                                 this.blockChainServices(),
159c179,180
<                 return new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
---
>                 return new NisModelToDbModelMapper(this.mapperFactory()
>                                 .createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));
185,186c206,209
<                 return new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),
<                                 this.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());
---
>                 return new TransactionValidatorFactory(this.timeProvider(),
>                                 this.nisConfiguration().getNetworkInfo(),
>                                 this.nisConfiguration().getForkConfiguration(),
>                                 this.nisConfiguration().ignoreFees());
201,206c224,238
<                                 this.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),
<                                 this.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());
< 
<                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,
<                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
<                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
---
>                                 this.transactionValidatorFactory(),
>                                 this.blockValidatorFactory(),
>                                 this.blockTransactionObserverFactory(),
>                                 this.unconfirmedTransactionsFilter(),
>                                 this.nisConfiguration().getForkConfiguration());
> 
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(),
>                                 transactionsProvider,
>                                 this.blockDao,
>                                 new BlockScorer(this.accountStateCache()),
>                                 this.blockValidatorFactory().create(this.nisCache()));
>                 return new Harvester(this.timeProvider(),
>                                 this.blockChainLastBlockLayer,
>                                 this.unlockedAccounts(),
>                                 this.nisDbModelToModelMapper(),
240c272,275
<                 return new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),
---
>                 return new DefaultNisCache(this.accountCache(),
>                                 this.accountStateCache(),
>                                 this.poxFacade(),
>                                 this.transactionHashCache(),
255c290,291
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
---
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
>                                 "consensus algorithm",
261,262c297,301
<                 return new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,
<                                 this.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());
---
>                 return new UnlockedAccounts(this.accountCache(),
>                                 this.accountStateCache(),
>                                 this.blockChainLastBlockLayer,
>                                 this.canHarvestPredicate(),
>                                 this.nisConfiguration().getUnlockedLimit());
287,288c326,330
<                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),
<                                 blockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());
---
>                                 this.blockTransactionObserverFactory()::createExecuteCommitObserver,
>                                 this.timeProvider(),
>                                 this.lastBlockHeight(),
>                                 blockChainConfiguration.getMaxTransactionsPerBlock(),
>                                 this.nisConfiguration().getForkConfiguration());
326,327c368,374
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
<                                 this.blockAnalyzer(), System::exit);
---
>                 return new NisMain(this.blockDao,
>                                 this.nisCache(),
>                                 this.networkHostBootstrapper(),
>                                 this.nisModelToDbModelMapper(),
>                                 nisConfiguration,
>                                 this.blockAnalyzer(),
>                                 System::exit);
340c387,388
<                                 "weighted balance scheme", featureSupplierMap);
---
>                                 "weighted balance scheme",
>                                 featureSupplierMap);
347,348c395,400
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
---
>                 return new BlockAnalyzer(this.blockDao,
>                                 this.blockChainUpdater(),
>                                 this.blockChainLastBlockLayer,
>                                 this.nisMapperFactory(),
>                                 estimatedBlocksPerYear,
>                                 forkConfiguration);
367,368c419,428
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
---
>                 return new NisPeerNetworkHost(this.nisCache(),
>                                 synchronizer,
>                                 scheduler,
>                                 this.chainServices(),
>                                 this.nodeCompatibilityChecker(),
>                                 this.nisConfiguration(),
>                                 this.httpConnectorPool(),
>                                 this.trustProvider(),
>                                 this.incomingAudits(),
>                                 this.outgoingAudits());
390c450,451
<                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
---
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT),
>                                 TRUST_CACHE_TIME,
