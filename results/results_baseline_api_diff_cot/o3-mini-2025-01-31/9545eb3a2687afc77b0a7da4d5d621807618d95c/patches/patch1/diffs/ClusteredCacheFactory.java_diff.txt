20a21
> import com.hazelcast.config.EvictionConfig;
22d22
< import com.hazelcast.config.MaxSizeConfig;
25d24
< import com.hazelcast.config.NetworkConfig;
27,30c26,27
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.Hazelcast;
< import com.hazelcast.core.HazelcastInstance;
< import com.hazelcast.core.Member;
---
> import com.hazelcast.cluster.Cluster;
> import com.hazelcast.cluster.Member;
75,80d71
< /**
<  * CacheFactory implementation to use when using Hazelcast in cluster mode.
<  *
<  * @author Tom Evans
<  * @author Gaston Dombiak
<  */
166c157
<         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis()); // Minimum duration between logged warnings.
---
>         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis());
174d164
<         // Set the serialization strategy to use for transmitting objects between node clusters
178d167
<         // Store previous class loader (in case we change it)
194,195c183,184
<                 memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE, XMPPServer.getInstance().getServerInfo().getHostname());
<                 memberAttributeConfig.setStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE, XMPPServer.getInstance().getNodeID().toString());
---
>                 memberAttributeConfig.setAttribute(HazelcastClusterNodeInfo.HOST_NAME_ATTRIBUTE, XMPPServer.getInstance().getServerInfo().getHostname());
>                 memberAttributeConfig.setAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE, XMPPServer.getInstance().getNodeID().toString());
205d193
<                 // CacheFactory is now using clustered caches. We can add our listeners.
230d217
<             // Restore previous class loader
238d224
<         // Stop the cache services.
240d225
<         // Update the running state of the cluster
243,244d227
<         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
<         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
246d228
<         // Stop the cluster
255d236
<         // Reset packet router to use to deliver packets to remote cluster nodes
257d237
<         // Reset the session locator to use
259d238
<         // Set the old serialization strategy was using before clustering was loaded
265d243
<         // Check if cluster is being started up
267d244
<             // Wait until cluster is fully started (or failed)
271d247
<                 // Ignore
277d252
<         // Determine the time to live. Note that in Hazelcast 0 means "forever", not -1
280d254
<         // Determine the max cache size. Note that in Hazelcast the max cache size must be positive and is in megabytes
283d256
<         // It's only possible to create a dynamic config if a static one doesn't already exist
288c261,264
<             dynamicConfig.setMaxSizeConfig(new MaxSizeConfig(hazelcastMaxCacheSizeInMegaBytes, MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE));
---
>             EvictionConfig evictionConfig = new EvictionConfig();
>             evictionConfig.setSize(hazelcastMaxCacheSizeInMegaBytes);
>             evictionConfig.setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.USED_HEAP_SIZE);
>             dynamicConfig.setEvictionConfig(evictionConfig);
294d269
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
324d298
<         // No longer depends on license code so just return a big number
347,353d320
<     /**
<      * Gets the pseudo-synchronized time from the cluster. While the cluster members may
<      * have varying system times, this method is expected to return a timestamp that is
<      * synchronized (or nearly so; best effort) across the cluster.
<      *
<      * @return Synchronized time for all cluster members
<      */
359,363d325
<     /*
<      * Execute the given task on the other (non-local) cluster members.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
366d327
< 
377,378d337
< 
< 
380d338
<             // Asynchronously execute the task on the other cluster members
389,393d346
<     /*
<      * Execute the given task on the given cluster member.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
400d352
<         // Check that the requested member was found
402d353
<             // Asynchronously execute the task on the target member
413,417d363
<     /*
<      * Execute the given task on the designated cluster members.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) per member until the task is run on all members.
<      */
432d377
<             // Asynchronously execute the task on the other cluster members
454,458d398
<     /*
<      * Execute the given task on the designated cluster member.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) until the task is run on the given member.
<      */
466d405
<         // Check that the requested member was found
468d406
<             // Asynchronously execute the task on the target member
514d451
<             // Create the cacheStats map if necessary.
522,524d458
<                 // The following information is published:
<                 // current size, max size, num elements, cache
<                 // hits, cache misses.
533d466
<             // Publish message
548d480
<         // TODO: Update CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
553,561d484
<     /**
<      * ClusterTasks that are executed should not be provided by a plugin. These will cause issues related to class
<      * loading when the providing plugin is reloaded. This method verifies if an instance of a task is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
566d488
<             // Try to determine what plugin loaded the offending class.
583c505
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now());
656c578
<         return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
---
>         return NodeID.getInstance(((String) member.getAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE)).getBytes(StandardCharsets.UTF_8));
684,685d605
<             // Add a listener at the ultimate end of the list of all listeners, to detect that left-cluster event handling
<             // has been invoked for all before proceeding.
701,703d620
< 
< 
< 
