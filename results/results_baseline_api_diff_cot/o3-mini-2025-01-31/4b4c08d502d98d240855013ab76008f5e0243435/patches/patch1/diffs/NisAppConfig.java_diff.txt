3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
108,112c110,124
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
---
>                 final ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
>                 String locationsProperty = prop.getProperty("flyway.locations");
>                 if (locationsProperty != null) {
>                         // Split locations by comma and create a Location array
>                         String[] locationStrings = locationsProperty.split(",");
>                         Location[] locations = new Location[locationStrings.length];
>                         for (int i = 0; i < locationStrings.length; i++) {
>                                 locations[i] = new Location(locationStrings[i].trim());
>                         }
>                         config.setLocations(locations);
>                 }
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 final Flyway flyway = new Flyway(config);
