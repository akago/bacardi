18,19d17
< import ch.qos.logback.classic.Level;
< import ch.qos.logback.classic.Logger;
33d30
< import com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;
53a51,52
> import java.io.ByteArrayOutputStream;
> import java.io.ObjectOutputStream;
160d158
<  * @since 2.0.0
165,167d162
< 
<     private static final double DELTA = 1e-7;
< 
181c176
<         ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);
---
>         // Logging level initialization removed due to API changes in the dependency.
372c367,368
<         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();
---
>         EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
>                 .build();
1228c1224
<         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), DELTA);
---
>         assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), 1e-7);
1250c1246
<         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), DELTA);
---
>         assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), 1e-7);
1664,1665d1659
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1678,1679d1671
<     // unimplemented in CockroachDB: views do not currently support * expressions
<     // https://github.com/cockroachdb/cockroach/issues/10028
1946,1947d1937
< 
< 
2041c2031
<      * @throws DatabaseEngineException If something goes wrong executing the query.
---
>      * @throws DatabaseEngineException propagate
2050c2040
<         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == Dialect.MYSQL);
---
>         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == SqlBuilder.Dialect.MYSQL);
2077c2067
<         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == Dialect.MYSQL);
---
>         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == SqlBuilder.Dialect.MYSQL);
2109c2099
<         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == Dialect.MYSQL);
---
>         assumeFalse("MySQL doesn't support WITH", engine.getDialect() == SqlBuilder.Dialect.MYSQL);
2241c2231
<         assertEquals("pomme de terrepomme de terre", result.get(4).get("concat").toString());
---
>         assertEquals("pomme de terre.pomme de terre", result.get(4).get("concat").toString());
3640c3630,3631
<         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true).build());
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL2", true)
>                 .build());
3750c3741
<         engine.persist("TEST", entry().set("COL1", 2).set("COL5", "TESTE")
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
3752c3743
<         engine.persist("TEST", entry().set("COL1", 3).set("COL5", "TeStE")
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
3754c3745
<         engine.persist("TEST", entry().set("COL1", 4).set("COL5", "tesTte")
---
>         engine.persist("TEST", entry().set("COL1", 1).set("COL5", "teste")
4040c4031
<         assertEquals("Check COL3", 2.2d, record.get("COL3").toDouble(), 0);
---
>         assertEquals("Check COL3", 2.2d, record.get("COL3").toDouble(), 0D);
