11a12,13
> import org.pitest.classinfo.ClassInfoVisitor;
> import org.pitest.classinfo.ClassName;
12a15
> import java.io.ByteArrayOutputStream;
14a18
> import java.io.InputStream;
103a108,109
>     byte[] classBytes = loadClassBytes(data.getMutatedClass());
>     Object classInfo = new ClassInfoVisitor().getClassInfo(data.getMutatedClass(), classBytes, 0L);
105c111,129
<         data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));
---
>         data.getMutations(), classInfo);
>   }
> 
>   private byte[] loadClassBytes(final ClassName className) {
>     String resource = className.toString().replace('.', '/') + ".class";
>     try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(resource);
>          ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
>       if (is == null) {
>         return new byte[0];
>       }
>       byte[] buffer = new byte[1024];
>       int read;
>       while ((read = is.read(buffer)) != -1) {
>         baos.write(buffer, 0, read);
>       }
>       return baos.toByteArray();
>     } catch (IOException e) {
>       return new byte[0];
>     }
