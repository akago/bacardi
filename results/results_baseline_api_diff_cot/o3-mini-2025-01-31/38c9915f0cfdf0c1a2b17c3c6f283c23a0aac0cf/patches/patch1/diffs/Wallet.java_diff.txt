18c18
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
---
>  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
30c30,31
< import org.cactoos.collection.Filtered;
---
> import java.util.Arrays;
> import org.cactoos.iterable.Filtered;
36d36
< import org.cactoos.scalar.CheckedScalar;
38d37
< import org.cactoos.scalar.UncheckedScalar;
40d38
< import org.cactoos.text.SplitText;
165,166c163,193
<         public Wallet merge(final Wallet other) {
<             return other;
---
>         public Wallet merge(final Wallet other) throws IOException {
>             if (other.id() != this.id()) {
>                 throw new IOException(
>                     new UncheckedText(
>                         new FormattedText(
>                             "Wallet ID mismatch, ours is %d, theirs is %d",
>                             other.id(),
>                             this.id()
>                         )
>                     ).asString()
>                 );
>             }
>             final Iterable<Transaction> ledger = this.ledger();
>             final Iterable<Transaction> candidates = new Filtered<>(
>                 other.ledger(),
>                 incoming -> new ListOf<>(
>                     new Filtered<>(
>                         ledger,
>                         origin -> new Or(
>                             () -> incoming.equals(origin),
>                             () -> incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf()),
>                             () -> incoming.id() == origin.id() && incoming.amount() < 0L,
>                             () -> incoming.prefix().equals(origin.prefix())
>                         ).value()
>                     )
>                 ).isEmpty()
>             );
>             return new Wallet.Fake(
>                 this.id,
>                 new Joined<Transaction>(ledger, candidates)
>             );
201,213c228,234
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
<                     16
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             try {
>                 String content = new TextOf(this.path).asString();
>                 String[] lines = content.split("\n");
>                 return Long.parseUnsignedLong(lines[2], 16);
>             } catch (Exception ex) {
>                 throw new IOException(ex);
>             }
224,232d244
<         // @todo #16:30min Following transactions should be ignored according
<         //  to the whitepaper:
<         //  a) If the transaction is negative and its signature is not valid,
<         //  it is ignored;
<         //  b) If the transaction makes the balance of the wallet negative,
<         //  it is ignored;
<         //  c) If the transaction is positive and it’s absent in the paying
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
248,250c260,264
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
---
>                 other.ledger(),
>                 incoming -> new ListOf<>(
>                     new Filtered<>(
>                         ledger,
>                         origin -> new Or(
252,255c266,267
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
---
>                             () -> incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf()),
>                             () -> incoming.id() == origin.id() && incoming.amount() < 0L,
256a269
>                         ).value()
258,261c271
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
---
>                 ).isEmpty()
270a281,286
>             try {
>                 String content = new TextOf(this.path).asString();
>                 String[] lines = content.split("\\n");
>                 Iterable<org.cactoos.text.Text> texts = () -> Arrays.stream(lines)
>                     .map(UncheckedText::new)
>                     .iterator();
273,282c289
<                 new Skipped<>(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
<                     ),
<                     // @checkstyle MagicNumberCheck (1 line)
<                     5
<                 )
---
>                     new Skipped<>(new ListOf<>(texts), 5)
283a291,293
>             } catch (Exception ex) {
>                 throw new RuntimeException(ex);
>             }
286,288d295
<         // @todo #54:30min Implement key method. This should return the
<         //  public RSA key of the wallet owner in Base64. Also add a unit test
<         //  to replace WalletTest.keyIsNotYetImplemented().
