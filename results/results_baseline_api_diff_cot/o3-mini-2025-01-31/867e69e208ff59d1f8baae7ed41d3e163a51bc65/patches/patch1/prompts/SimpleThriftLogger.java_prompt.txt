 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
/**
 * Copyright 2019 Pinterest, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pinterest.singer.utils;

import com.pinterest.singer.thrift.LogFile;

import org.apache.commons.io.FileUtils;
import org.apache.thrift.TBase;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;

import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileSystems;

/**
 * Thrift Logger which is used to log thrift log messages into a log file.
 *
 * This class is used by unit test and ThriftLogGenerator to write log messages to thrift log
 * file. It provides APIs for client to control the flush behavior and log file rotation.
 */
@SuppressWarnings("rawtypes")
public final class SimpleThriftLogger<T extends TBase> implements Closeable {

  private static final class ByteOffsetTFramedTransport extends TFramedTransport {

    private long byteOffset;

    public ByteOffsetTFramedTransport(TTransport transport) {
      super(transport);
      byteOffset = 0;
    }

    @Override
    public void write(byte[] buf, int off, int len) throws TTransportException {
      super.write(buf, off, len);
      byteOffset += len;
    }

    @Override
    public void flush() throws TTransportException {
      super.flush();
      // Add 4 bytes for the frame size.
      byteOffset += 4;
    }

    public long getByteOffset() {
      return byteOffset;
    }
  }

  private final String fileName;

  private BufferedOutputStream bufferedOutputStream;
  private ByteOffsetTFramedTransport transport;
  private TProtocol protocol;

  public SimpleThriftLogger(String filename) throws Exception {
    this.fileName = filename;
    bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(fileName, true));
    transport = new ByteOffsetTFramedTransport(new TIOStreamTransport(bufferedOutputStream));
    protocol = new TBinaryProtocol(transport);
  }

  /**
   * Write a thrift message to log file.
   * @param message to be written
   * @throws Exception on write error.
   */
  public void logThrift(T message) throws Exception {
    message.write(protocol);
    // Flush to make sure one message per frame.
    transport.flush();
  }

  /**
   * Simple implementation of log file rotation.
   * @throws java.io.IOException
   */
  public void rotate() throws IOException {
    close();

    int i = 0;
    while (new File(String.format("%s.%d", fileName, ++i)).exists()) {
      ;
    }

    for (int j = i - 1; j >= 1; --j) {
      FileUtils.moveFile(
          new File(String.format("%s.%d", fileName, j)),
          new File(String.format("%s.%d", fileName, j + 1)));
    }
    FileUtils.moveFile(new File(fileName), new File(fileName + ".1"));
    bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(fileName, true));
    transport = new ByteOffsetTFramedTransport(new TIOStreamTransport(bufferedOutputStream));
    protocol = new TBinaryProtocol(transport);
  }

  public void flush() throws IOException {
    bufferedOutputStream.flush();
  }

  public LogFile getLogFile() throws IOException {
    long inode = SingerUtils.getFileInode(FileSystems.getDefault().getPath(fileName));
    return new LogFile(inode);
  }

  public long getByteOffset() {
    return transport.getByteOffset();
  }

  public void close() throws IOException {
    transport.close();
  }
}

```

2. The error information:
<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[45,65] cannot find symbol
</error_information>
  symbol:   class TFramedTransport
  location: class com.pinterest.singer.utils.SimpleThriftLogger<T>

<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[45,65] cannot find symbol
</error_information>
  symbol:   class TFramedTransport
  location: class com.pinterest.singer.utils.SimpleThriftLogger<T>

<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[45,65] cannot find symbol
</error_information>
  symbol:   class TFramedTransport
  location: class com.pinterest.singer.utils.SimpleThriftLogger<T>

<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[24,35] cannot find symbol
</error_information>
  symbol:   class TFramedTransport
  location: package org.apache.thrift.transport

<error_information>
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[45,65] cannot find symbol
</error_information>
  symbol:   class TFramedTransport
  location: class com.pinterest.singer.utils.SimpleThriftLogger<T>


3. The changes in the API of the dependency:
<api_changes>
     Constructor org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been removed in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Interface org.apache.thrift.transport.layered.TFramedTransport has been added in the new version of the dependency.
     Constructor org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport) has been removed in the new version of the dependency.
     Class org.apache.thrift.transport.TFramedTransport has been removed in the new version of the dependency.
     Type reference org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.
     Constructor org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int) has been added in the new version of the dependency.
     Constructor org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFastFramedTransport.flush() has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TFastFramedTransport.flush() has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TFramedTransport.flush() has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFramedTransport.flush() has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TTransport.write(java.nio.ByteBuffer) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.sasl.FrameWriter.write(org.apache.thrift.transport.TNonblockingTransport) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TFastFramedTransport.write(byte[],int,int) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TFramedTransport.write(byte[],int,int) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.TNonblockingTransport.write(java.nio.ByteBuffer) has been removed in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFastFramedTransport.write(byte[],int,int) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.TMemoryTransport.write(byte[],int,int) has been added in the new version of the dependency.
     Method org.apache.thrift.transport.layered.TFramedTransport.write(byte[],int,int) has been added in the new version of the dependency.

</api_changes>



Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
