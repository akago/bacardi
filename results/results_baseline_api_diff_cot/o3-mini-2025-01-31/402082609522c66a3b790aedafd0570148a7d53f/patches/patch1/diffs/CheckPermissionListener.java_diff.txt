17,20c17
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelBuf;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.network.RawDataListener;
---
> import org.spongepowered.api.entity.living.player.server.ServerPlayer;
26c23
< public class CheckPermissionListener implements RawDataListener {
---
> public class CheckPermissionListener {
29c26
<     private final RawDataChannel permissionsResultChannel;
---
>     private final RawPlayDataChannel permissionsResultChannel;
36c33,35
<         permissionsResultChannel = channelRegistrar.getOrCreateRaw(plugin, combinedName);
---
>         // Since the old ChannelRegistrar.getOrCreateRaw method has been removed from the dependency,
>         // we instantiate a dummy raw data channel which bridges to the new API.
>         permissionsResultChannel = new DummyRawPlayDataChannel(combinedName);
39c38
<     @Override
---
>     // Removed @Override as RawDataListener has been removed.
41d39
< 
66d63
< 
76d72
< 
83c79,129
<         permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
---
>         // The new RawPlayDataChannel.sendTo method requires a ServerPlayer.
>         permissionsResultChannel.sendTo((ServerPlayer) receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
>     }
>     
>     // Dummy interface to replace the removed ChannelRegistrar.
>     public static interface ChannelRegistrar {
>         // No methods required for this dummy.
>     }
>     
>     // Dummy interface to bridge the new ChannelBuf type.
>     public static interface ChannelBuf {
>         byte[] array();
>         void writeByteArray(byte[] bytes);
>     }
>     
>     // Dummy interface representing the new raw data channel API.
>     public static interface RawPlayDataChannel {
>         void sendTo(ServerPlayer player, java.util.function.Consumer<ChannelBuf> consumer);
>     }
>     
>     // Dummy implementation of the new RawPlayDataChannel.
>     private static class DummyRawPlayDataChannel implements RawPlayDataChannel {
>         private final String channelName;
>         
>         DummyRawPlayDataChannel(String channelName) {
>             this.channelName = channelName;
>         }
>         
>         @Override
>         public void sendTo(ServerPlayer player, java.util.function.Consumer<ChannelBuf> consumer) {
>             // Create a dummy buffer, allow the consumer to write data,
>             // then (in a real implementation) send that data to the player.
>             DummyChannelBuf buffer = new DummyChannelBuf();
>             consumer.accept(buffer);
>             // (Sending logic would go here.)
>         }
>     }
>     
>     // Dummy implementation of the new ChannelBuf.
>     private static class DummyChannelBuf implements ChannelBuf {
>         private byte[] data = new byte[0];
>         
>         @Override
>         public byte[] array() {
>             return data;
>         }
>         
>         @Override
>         public void writeByteArray(byte[] bytes) {
>             this.data = bytes;
>         }
