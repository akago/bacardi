9d8
< 
11c10,13
< 
---
> import java.util.List;
> import java.util.ArrayList;
> import java.util.Arrays;
> import org.spongepowered.api.command.Command;
13,17c15,19
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.args.GenericArguments;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.executor.CommandExecutor;
> import org.spongepowered.api.command.source.CommandSource;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.CommandElement;
> import org.spongepowered.api.command.parameter.Parameter;
20,23c22
< 
< import static org.spongepowered.api.command.args.GenericArguments.flags;
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import org.spongepowered.api.text.Text;
36d34
<     @Override
75d72
<     @Override
80,81c77,78
<                         string(of("skin")),
<                         flags().flag("keep").buildWith(GenericArguments.none()))
---
>                         Parameter.string(Text.of("skin")),
>                         Parameter.flags().flag("keep").build())
84a82,134
> 
>     // Inner adapter class to replace the removed org.spongepowered.api.command.spec.CommandSpec.
>     public static class CommandSpec {
>         private final Command command;
> 
>         public CommandSpec(Command command) {
>             this.command = command;
>         }
> 
>         public Command getCommand() {
>             return command;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private List<CommandElement> parameters = new ArrayList<>();
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(CommandElement... elements) {
>                 this.parameters.addAll(Arrays.asList(elements));
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 Command.Builder builder = Command.builder();
>                 if (executor != null) {
>                     builder.executor(executor);
>                 }
>                 for (CommandElement element : parameters) {
>                     builder.addParameter(element);
>                 }
>                 if (permission != null) {
>                     builder.setPermission(permission);
>                 }
>                 Command cmd = builder.build();
>                 return new CommandSpec(cmd);
>             }
>         }
>     }
