12a13
> import com.github.games647.changeskin.sponge.PomData;
16,19c17,19
< 
< import java.nio.file.Path;
< import java.util.UUID;
< 
---
> import net.kyori.adventure.audience.Audience;
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
21,24c21
< import org.spongepowered.api.Platform.Type;
< import org.spongepowered.api.Sponge;
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
---
> import org.spongepowered.api.ResourceKey;
25a23
> import org.spongepowered.api.entity.living.player.server.ServerPlayer;
27,33c25,30
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.plugin.Plugin;
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.event.lifecycle.ConstructPluginEvent;
> import org.spongepowered.api.event.lifecycle.RegisterChannelEvent;
> import org.spongepowered.api.event.lifecycle.RegisterCommandEvent;
> import org.spongepowered.api.event.lifecycle.StopPluginEvent;
> import java.nio.file.Path;
> import java.util.UUID;
37d33
< import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;
40,42c36
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
<         url = PomData.URL, description = PomData.DESCRIPTION)
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<Audience> {
53d46
<     //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
55c48
<     ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
---
>     public ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
57a51
>         // Create a child injector and bind the core so dependent classes can access it.
62,63c56
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
<         //load config and database
---
>     public void onConstruct(ConstructPluginEvent event) {
73,74c66,79
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
---
>     public void onRegisterCommand(RegisterCommandEvent event) {
>         if (!initialized) {
>             return;
>         }
>         event.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>         event.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>         event.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>         event.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>         event.register(this, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
>     }
> 
>     @Listener
>     public void onRegisterChannel(RegisterChannelEvent event) {
>         if (!initialized) {
75a81,83
>         }
>         String updateChannelName = new NamespaceKey(PomData.ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
>         String permissionChannelName = new NamespaceKey(PomData.ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
77c85,99
<         CommandManager cmdManager = Sponge.getCommandManager();
---
>         ResourceKey updateKey;
>         String[] updateParts = updateChannelName.split(":");
>         if (updateParts.length == 2) {
>             updateKey = ResourceKey.of(updateParts[0], updateParts[1]);
>         } else {
>             updateKey = ResourceKey.of(PomData.ARTIFACT_ID, updateChannelName);
>         }
> 
>         ResourceKey permissionKey;
>         String[] permParts = permissionChannelName.split(":");
>         if (permParts.length == 2) {
>             permissionKey = ResourceKey.of(permParts[0], permParts[1]);
>         } else {
>             permissionKey = ResourceKey.of(PomData.ARTIFACT_ID, permissionChannelName);
>         }
79,96c101,102
<         //command and event register
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
< 
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
< 
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
<         String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
<         String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         event.register(updateKey, UpdateSkinListener.class);
>         event.register(permissionKey, CheckPermissionListener.class);
100c106
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StopPluginEvent event) {
109,110c115,118
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
<         if (invoker.hasPermission(PomData.ARTIFACT_ID + ".skin.whitelist." + uuid)) {
---
>     public boolean hasSkinPermission(Audience invoker, UUID uuid, boolean sendMessage) {
>         if (invoker instanceof ServerPlayer) {
>             ServerPlayer player = (ServerPlayer) invoker;
>             if (player.hasPermission(PomData.ARTIFACT_ID + ".skin.whitelist." + uuid)) {
113,114c121
< 
<         //disallow - not whitelisted or blacklisted
---
>         }
118d124
< 
142c148
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(Audience receiver, String key) {
145c151,152
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             Component component = LegacyComponentSerializer.legacySection().deserialize(message);
>             receiver.sendMessage(component);
