16d15
< 
19d17
< 
21,37d18
< import org.spongepowered.api.Platform.Type;
< import org.spongepowered.api.Sponge;
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.config.ConfigDir;
< import org.spongepowered.api.event.Listener;
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.plugin.Plugin;
< import org.spongepowered.api.text.serializer.TextSerializers;
< 
< import static com.github.games647.changeskin.core.message.CheckPermMessage.CHECK_PERM_CHANNEL;
< import static com.github.games647.changeskin.core.message.SkinUpdateMessage.UPDATE_SKIN_CHANNEL;
< import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;
38a20,39
> // Use the new plugin annotation package
> import org.spongepowered.plugin.Plugin;
> import org.spongepowered.plugin.PluginContainer;
> 
> // Use the new lifecycle event types
> import org.spongepowered.api.event.Listener;
> import org.spongepowered.api.event.lifecycle.ConstructPluginEvent;
> import org.spongepowered.api.event.lifecycle.RegisterCommandEvent;
> import org.spongepowered.api.event.lifecycle.StoppingEngineEvent;
> 
> // Use Adventureâ€™s legacy serializer for text conversion
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.audience.Audience;
> import org.spongepowered.api.service.permission.Subject;
> import org.spongepowered.api.ResourceKey;
> 
> // Note: We must remove usage of removed types such as CommandSource, CommandManager, ChannelRegistrar, etc.
> // To keep the old method signatures, define a replacement CommandSource interface that
> // combines the new Adventure Audience and the permission Subject.
40c41
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
---
> @Plugin(id = PomData.ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
42c43
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<ChangeSkinSponge.CommandSource> {
52a54,56
>     @Inject
>     private PluginContainer pluginContainer;
> 
55c59
<     ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
---
>     public ChangeSkinSponge(Logger logger, @org.spongepowered.api.config.ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
57a62
>         // Create a child injector and bind the core instance
62c67
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
---
>     public void onPreInit(ConstructPluginEvent preInitEvent) {
73,74c78,79
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
---
>     public void onInit(RegisterCommandEvent initEvent) {
>         if (!initialized) {
75a81
>         }
77,96c83,97
<         CommandManager cmdManager = Sponge.getCommandManager();
< 
<         //command and event register
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
< 
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
< 
<         //incoming channel
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
<         String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
<         String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
>         // Command registration using the new command registration event.
>         initEvent.register(pluginContainer, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>         initEvent.register(pluginContainer, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>         initEvent.register(pluginContainer, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>         initEvent.register(pluginContainer, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>         initEvent.register(pluginContainer, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
> 
>         // Register additional event listeners using the new event registration API.
>         pluginContainer.getEventManager().registerListeners(pluginContainer, injector.getInstance(LoginListener.class));
> 
>         // Channel registration via the new channel registration API.
>         ResourceKey updateKey = ResourceKey.of(PomData.ARTIFACT_ID, UPDATE_SKIN_CHANNEL);
>         ResourceKey permissionKey = ResourceKey.of(PomData.ARTIFACT_ID, CHECK_PERM_CHANNEL);
>         pluginContainer.getEventManager().registerChannel(updateKey, injector.getInstance(UpdateSkinListener.class));
>         pluginContainer.getEventManager().registerChannel(permissionKey, injector.getInstance(CheckPermissionListener.class));
100c101
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StoppingEngineEvent stoppingEngineEvent) {
114c115
<         //disallow - not whitelisted or blacklisted
---
>         // Disallow - not whitelisted or blacklisted.
145c146,147
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             Component converted = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
>             receiver.sendMessage(converted);
147a150,155
> 
>     // Define a replacement for the removed CommandSource type.
>     // This interface combines Adventure's Audience (for sending messages) with permission checking (Subject).
>     public static interface CommandSource extends Audience, Subject {
>         // No additional methods required.
>     }
