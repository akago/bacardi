8,12c8,12
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandExecutor;
> import org.spongepowered.api.command.CommandException;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.source.CommandSource;
14d13
< import org.spongepowered.api.scheduler.Task;
21c20
<     InvalidateCommand(ChangeSkinSponge plugin) {
---
>     public InvalidateCommand(ChangeSkinSponge plugin) {
26,29c25,31
<     public CommandResult execute(CommandSource src, CommandContext args) {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
<             return CommandResult.empty();
---
>     public int execute(CommandContext context) throws CommandException {
>         // Retrieve the root command source from the new command context API.
>         CommandSource source = context.cause().first(CommandSource.class)
>                 .orElseThrow(() -> new CommandException("Missing command source"));
>         if (!(source instanceof Player)) {
>             plugin.sendMessage(source, "no-console");
>             return 0;
32,34c34,40
<         Player receiver = (Player) src;
<         Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
<         return CommandResult.success();
---
>         Player receiver = (Player) source;
>         // Schedule the skin invalidation task asynchronously using the new scheduler API.
>         // Note: plugin.getGame().getScheduler().executor(plugin.getContainer()) returns an executor
>         // on which we call execute(Runnable) to schedule our task.
>         plugin.getGame().getScheduler().executor(plugin.getContainer())
>                 .execute(new SkinInvalidator(plugin, receiver));
>         return 1;
37,39c43,46
<     @Override
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     // Build and return the command using the new command API.
>     // The old CommandSpec has been replaced by org.spongepowered.api.command.Command.
>     public Command buildSpec() {
>         return Command.builder()
