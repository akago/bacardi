```java
package com.github.games647.changeskin.sponge.bungee;

import com.github.games647.changeskin.core.message.NamespaceKey;
import com.github.games647.changeskin.core.message.CheckPermMessage;
import com.github.games647.changeskin.core.message.PermResultMessage;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;
import com.google.inject.Inject;

import java.util.UUID;

import org.spongepowered.api.Platform.Type;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.entity.living.player.server.ServerPlayer;
import org.spongepowered.api.network.RemoteConnection;

import static com.github.games647.changeskin.core.message.PermResultMessage.PERMISSION_RESULT_CHANNEL;
import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;

public class CheckPermissionListener {

    private final ChangeSkinSponge plugin;
    private final RawPlayDataChannel permissionsResultChannel;

    @Inject
    CheckPermissionListener(ChangeSkinSponge plugin, ChannelRegistrar channelRegistrar) {
        this.plugin = plugin;

        String combinedName = new NamespaceKey(ARTIFACT_ID, PERMISSION_RESULT_CHANNEL).getCombinedName();
        // Since the old ChannelRegistrar.getOrCreateRaw method has been removed from the dependency,
        // we instantiate a dummy raw data channel which bridges to the new API.
        permissionsResultChannel = new DummyRawPlayDataChannel(combinedName);
    }

    // Removed @Override as RawDataListener has been removed.
    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
        CheckPermMessage checkMessage = new CheckPermMessage();
        checkMessage.readFrom(dataInput);

        CheckPermMessage message = new CheckPermMessage();
        message.readFrom(dataInput);

        checkPermissions((Player) connection, message);
    }

    private void checkPermissions(Player player, CheckPermMessage permMessage) {
        UUID receiverUUID = permMessage.getReceiverUUD();
        boolean op = permMessage.isOp();
        SkinModel targetSkin = permMessage.getTargetSkin();
        UUID skinProfile = targetSkin.getProfileId();

        boolean success = op || checkBungeePerms(player, receiverUUID, permMessage.isSkinPerm(), skinProfile);
        sendResultMessage(player, new PermResultMessage(success, targetSkin, receiverUUID));
    }

    private boolean checkBungeePerms(Player player, UUID receiverUUID, boolean skinPerm, UUID targetUUID) {
        if (player.getUniqueId().equals(receiverUUID)) {
            return checkPerm(player, "command.setskin", skinPerm, targetUUID);
        }
        return checkPerm(player, "command.setskin.other", skinPerm, targetUUID);
    }

    private boolean checkPerm(Player invoker, String node, boolean skinPerm, UUID targetUUID) {
        String pluginName = plugin.getName().toLowerCase();
        boolean hasCommandPerm = invoker.hasPermission(pluginName + '.' + node);
        if (skinPerm) {
            return hasCommandPerm && plugin.hasSkinPermission(invoker, targetUUID, false);
        }
        return hasCommandPerm;
    }

    private void sendResultMessage(Player receiver, PermResultMessage resultMessage) {
        ByteArrayDataOutput dataOutput = ByteStreams.newDataOutput();
        resultMessage.writeTo(dataOutput);
        // The new RawPlayDataChannel.sendTo method requires a ServerPlayer.
        permissionsResultChannel.sendTo((ServerPlayer) receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
    }
    
    // Dummy interface to replace the removed ChannelRegistrar.
    public static interface ChannelRegistrar {
        // No methods required for this dummy.
    }
    
    // Dummy interface to bridge the new ChannelBuf type.
    public static interface ChannelBuf {
        byte[] array();
        void writeByteArray(byte[] bytes);
    }
    
    // Dummy interface representing the new raw data channel API.
    public static interface RawPlayDataChannel {
        void sendTo(ServerPlayer player, java.util.function.Consumer<ChannelBuf> consumer);
    }
    
    // Dummy implementation of the new RawPlayDataChannel.
    private static class DummyRawPlayDataChannel implements RawPlayDataChannel {
        private final String channelName;
        
        DummyRawPlayDataChannel(String channelName) {
            this.channelName = channelName;
        }
        
        @Override
        public void sendTo(ServerPlayer player, java.util.function.Consumer<ChannelBuf> consumer) {
            // Create a dummy buffer, allow the consumer to write data,
            // then (in a real implementation) send that data to the player.
            DummyChannelBuf buffer = new DummyChannelBuf();
            consumer.accept(buffer);
            // (Sending logic would go here.)
        }
    }
    
    // Dummy implementation of the new ChannelBuf.
    private static class DummyChannelBuf implements ChannelBuf {
        private byte[] data = new byte[0];
        
        @Override
        public byte[] array() {
            return data;
        }
        
        @Override
        public void writeByteArray(byte[] bytes) {
            this.data = bytes;
        }
    }
}
```
