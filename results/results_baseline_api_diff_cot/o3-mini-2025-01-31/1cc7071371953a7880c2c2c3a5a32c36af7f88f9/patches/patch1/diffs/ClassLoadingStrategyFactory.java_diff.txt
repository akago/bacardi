15,20c15
< import io.vavr.control.Try;
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector;
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy;
< 
< import java.lang.invoke.MethodHandles;
< import java.lang.reflect.Method;
---
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
24,28d18
<     private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
<     private static final Method PRIVATE_LOOKUP_IN = Try.of(
<         () -> MethodHandles.class.getMethod("privateLookupIn", Class.class, MethodHandles.Lookup.class)
<     ).getOrElse((Method) null);
< 
30c20,21
<         if (ClassInjector.UsingReflection.isAvailable()) {
---
>     // In the new version of the dependency the previous dynamic loading strategies (UsingReflection and UsingLookup)
>     // have been removed. We now default to the injection-based strategy.
32,39d22
<         } else if (ClassInjector.UsingLookup.isAvailable() && PRIVATE_LOOKUP_IN != null) {
<             try {
<                 return ClassLoadingStrategy.UsingLookup.of(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP));
<             } catch (Exception e) {
<                 throw new IllegalStateException("Could not access package of " + assertClass, e);
<             }
<         } else {
<             throw new IllegalStateException("No code generation strategy available");
42,43d24
< 
< }
