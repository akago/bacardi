24,33c24,33
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.Implementation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.auxiliary.AuxiliaryType;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.matcher.ElementMatchers;
34a35
> import org.assertj.vavr.api.ClassLoadingStrategyFactory;
38a40,41
> import java.util.concurrent.ConcurrentHashMap;
> import java.util.concurrent.ConcurrentMap;
40d42
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
50c52,53
<     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)
---
>     private static final ByteBuddy BYTE_BUDDY = new ByteBuddy()
>             .with(TypeValidation.DISABLED)
55c58,59
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
---
>     // Replacing the removed TypeCache from the dependency with a simple concurrent map cache.
>     private static final ConcurrentMap<Class<?>, Class<?>> CACHE = new ConcurrentHashMap<>();
215,218c219
<         SimpleKey cacheKey = new SimpleKey(assertClass);
<         return (Class<ASSERTION>) CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),
<                 cacheKey,
<                 () -> generateAssumptionClass(assertClass));
---
>         return (Class<ASSERTION>) CACHE.computeIfAbsent(assertClass, key -> generateAssumptionClass(assertClass));
223c224
<                 .method(any())
---
>                 .method(ElementMatchers.any())
