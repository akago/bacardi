22c22
< import ch.qos.logback.core.encoder.EncoderBase;
---
> import ch.qos.logback.core.encoder.Encoder;
49a50,54
>    *
>    * Note: Earlier versions of this class extended EncoderBase, which provided an init() method.
>    * In the updated dependency the EncoderBase class is removed so we implement Encoder directly.
>    * We keep our custom init(OutputStream) method (without the @Override) to perform our one‐time
>    * initialization but also implement headerBytes() and footerBytes() as required by the new API.
51,52c56
<   public static class LogMessageEncoder extends EncoderBase<LogMessage> {
< 
---
>   public static class LogMessageEncoder implements Encoder<LogMessage> {
55a60
>     private boolean started = false;
57c62,64
<     @Override
---
>     // Custom initialization method.
>     // The logging framework in the new dependency does not require an init() method.
>     // If needed, clients may call this method to provide the OutputStream.
60,61d66
<       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
<       // log.
63,64c68
<       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
<           bufferCapacity);
---
>       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os), bufferCapacity);
81a86,113
> 
>     // Return empty header bytes.
>     @Override
>     public byte[] headerBytes() {
>       return new byte[0];
>     }
> 
>     // Return empty footer bytes.
>     @Override
>     public byte[] footerBytes() {
>       return new byte[0];
>     }
> 
>     // LifeCycle methods required by the Encoder interface (which extends LifeCycle)
>     @Override
>     public void start() {
>       started = true;
>     }
> 
>     @Override
>     public void stop() {
>       started = false;
>     }
> 
>     @Override
>     public boolean isStarted() {
>       return started;
>     }
91a124
>    * @param maxRetentionHours maximum retention hours for the rolling policy.
99c132
<     RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();
---
>     RollingFileAppender<LogMessage> appender = new RollingFileAppender<>();
