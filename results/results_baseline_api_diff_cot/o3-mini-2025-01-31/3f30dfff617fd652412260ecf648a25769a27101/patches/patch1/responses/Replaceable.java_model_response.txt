<repair_strategy>
1. Identify that the failing import is javax.interceptor.InterceptorBinding and that the replacement is now jakarta.interceptor.InterceptorBinding.
2. Compare the old API and new API: The InterceptorBinding annotation has simply moved packages from javax.interceptor to jakarta.interceptor without any changes in method signatures.
3. Update the import statement in the client code to import jakarta.interceptor.InterceptorBinding instead.
4. The minimal change is to replace the old import with the new one to ensure the code compiles.
5. No function signatures need to be updated, so only the import line change is necessary.
6. Verify that any other usage (like annotations on the interface) remains valid.
7. Confirm that the resulting code is complete and compiles.
8. Ensure the addition of the correct import for jakarta.interceptor.InterceptorBinding.
</repair_strategy>

```java
package de.hilling.junit.cdi.scope;

import org.immutables.value.Value;
import jakarta.interceptor.InterceptorBinding;
import java.lang.annotation.*;

/**
 * Marker interface used internally by the {@link de.hilling.junit.cdi.scope.TestScopeExtension} to
 * mark classes that can be mocked or replaced by other test beans.
 */
@Inherited
@InterceptorBinding
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Value.Immutable
public @interface Replaceable {
}
```
