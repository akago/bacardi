18,21c18
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
38,39c35,36
<   static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
<       new Function<OrgPolicy, OrgPolicyInfo>() {
---
>   static final Function<Policy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =
>       new Function<Policy, OrgPolicyInfo>() {
41,42c38,39
<         public OrgPolicyInfo apply(OrgPolicy protobuf) {
<           return OrgPolicyInfo.fromProtobuf(protobuf);
---
>         public OrgPolicyInfo apply(Policy policyProtobuf) {
>           return OrgPolicyInfo.fromProtobuf(policyProtobuf);
45,46c42,43
<   static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =
<       new Function<OrgPolicyInfo, OrgPolicy>() {
---
>   static final Function<OrgPolicyInfo, Policy> TO_PROTOBUF_FUNCTION =
>       new Function<OrgPolicyInfo, Policy>() {
48c45
<         public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {
---
>         public Policy apply(OrgPolicyInfo orgPolicyInfo) {
57c54
<   private RestoreDefault restoreDefault;
---
>   private Policy.RestoreDefault restoreDefault;
96,97c93,95
<     BooleanPolicy toProtobuf() {
<       return new BooleanPolicy().setEnforced(enforce);
---
>     Policy.BooleanPolicy toProtobuf() {
>       // Create a new instance of the v3 BooleanPolicy and set the enforcement flag.
>       return new Policy.BooleanPolicy().setEnforced(enforce);
100c98
<     static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {
---
>     static BoolPolicy fromProtobuf(Policy.BooleanPolicy booleanPolicy) {
109,119c107,110
<    * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the
<    * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:
<    * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote
<    * specific values, and is required only if the value contains a ":". Values prefixed with "is:"
<    * are treated the same as values with no prefix. Ancestry subtrees must be in one of the
<    * following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g.
<    * "folders/1234" - "organizations/", e.g. "organizations/1234" The supportsUnder field of the
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
---
>    * hierarchy (Organizations, Folders, Projects) that are allowed or denied. In the previous API,
>    * fields like allowedValues, deniedValues, allValues, inheritFromParent, and suggestedValue were
>    * configurable. In the new v3 API these setters and getters have been removed. As a result, the
>    * conversion routines here no longer propagate those values.
125c116
<     private final List<java.lang.String> deniedValues;
---
>     private final List<String> deniedValues;
196,197c187
<       return Objects.hash(
<           allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
---
>       return Objects.hash(allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
200,206c190,194
<     ListPolicy toProtobuf() {
<       return new ListPolicy()
<           .setAllValues(allValues)
<           .setAllowedValues(allowedValues)
<           .setDeniedValues(deniedValues)
<           .setInheritFromParent(inheritFromParent)
<           .setSuggestedValue(suggestedValue);
---
>     Policy.ListPolicy toProtobuf() {
>       // The new v3 Policy.ListPolicy does not support the previous setters for allValues,
>       // allowedValues, deniedValues, inheritFromParent, and suggestedValue.
>       // Therefore, we simply create a new instance without setting these values.
>       return new Policy.ListPolicy();
209,215c197,200
<     static Policies fromProtobuf(ListPolicy listPolicy) {
<       return new Policies(
<           listPolicy.getAllValues(),
<           listPolicy.getAllowedValues(),
<           listPolicy.getDeniedValues(),
<           listPolicy.getInheritFromParent(),
<           listPolicy.getSuggestedValue());
---
>     static Policies fromProtobuf(Policy.ListPolicy listPolicy) {
>       // The getters for these values are no longer supported in the new v3 API.
>       // We return a Policies instance with all fields set to null.
>       return new Policies(null, null, null, null, null);
219c204
<   /** Builder for {@code OrganizationPolicyInfo}. */
---
>   /** Builder for {@code OrgPolicyInfo}. */
225c210
<     private RestoreDefault restoreDefault;
---
>     private Policy.RestoreDefault restoreDefault;
261c246
<     Builder setRestoreDefault(RestoreDefault restoreDefault) {
---
>     Builder setRestoreDefault(Policy.RestoreDefault restoreDefault) {
312c297
<   public RestoreDefault getRestoreDefault() {
---
>   public Policy.RestoreDefault getRestoreDefault() {
346,347c331
<     return Objects.hash(
<         boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
---
>     return Objects.hash(boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
360,361c344,345
<   OrgPolicy toProtobuf() {
<     OrgPolicy orgPolicyProto = new OrgPolicy();
---
>   Policy toProtobuf() {
>     Policy orgPolicyProto = new Policy();
365c349
<     orgPolicyProto.setConstraint(constraint);
---
>     // The constraint field is no longer set in the new v3 API.
371c355
<     orgPolicyProto.setUpdateTime(updateTime);
---
>     // updateTime is not set because the setter has been removed.
376c360
<   static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {
---
>   static OrgPolicyInfo fromProtobuf(Policy orgPolicyProtobuf) {
381c365
<     builder.setConstraint(orgPolicyProtobuf.getConstraint());
---
>     // The constraint field is not available in the new v3 API.
387c371
<     builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());
---
>     // updateTime is not available in the new v3 API.
