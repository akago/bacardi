26,29d25
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
< 
203c199,200
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 // Replace CoverTree with a simple list for nearest neighbor search.
>                 final List<PVector> tree = new ArrayList<>();
209,210c206,207
<                         steinerPoints = StreamSupport.stream(tin.triangles().spliterator(), false).filter(filterBorderTriangles)
<                                         .map(PGS_CirclePacking::centroid).collect(Collectors.toList());
---
>                         steinerPoints = StreamSupport.stream(tin.triangles().spliterator(), false)
>                                         .filter(filterBorderTriangles).map(PGS_CirclePacking::centroid).collect(Collectors.toList());
213,214c210
<                 // Model shape vertices as circles of radius 0, to constrain packed circles
<                 // within shape edge
---
>                 // Model shape vertices as circles of radius 0, to constrain packed circles within shape edge.
216,217c212,216
<                 Collections.shuffle(vertices); // shuffle vertices to reduce tree imbalance during insertion
<                 vertices.forEach(p -> tree.insert(new double[] { p.x, p.y, 0 }, p));
---
>                 Collections.shuffle(vertices); // shuffle vertices to reduce imbalance during insertion
>                 vertices.forEach(p -> {
>                         p.z = 0;
>                         tree.add(p);
>                 });
219,222c218,219
<                 /*
<                  * "To find the circle nearest to a center (x, y), do a proximity search at (x,
<                  * y, R), where R is greater than or equal to the maximum radius of a circle."
<                  */
---
>                 // "To find the circle nearest to a center (x, y), find the circle in the current tree 
>                 // whose boundary is closest to the candidate center."
226,235c223,235
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
< 
<                         /*
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                         float nearestDistance = Float.MAX_VALUE;
>                         PVector nearest = null;
>                         for (PVector candidate : tree) {
>                                 float dx = p.x - candidate.x;
>                                 float dy = p.y - candidate.y;
>                                 float d = (float) Math.sqrt(dx * dx + dy * dy) - candidate.z;
>                                 if (d < nearestDistance) {
>                                         nearestDistance = d;
>                                         nearest = candidate;
>                                 }
>                         }
>                         // Calculate maximum possible radius for a new circle at p.
>                         final float radius = nearestDistance;
239c239
<                                 tree.insert(new double[] { p.x, p.y, radius }, p); // insert circle into tree
---
>                                 tree.add(p);
247c247
<          * Generates a random circle packing of tangential circles with varying radii
---
>          * Generates a circle packing of tangential circles with varying radii
286,287c286
<                                 // if center point not in circle, check whether circle overlaps with shape using
<                                 // intersects() (somewhat slower)
---
>                                 // if center point not in circle, check whether circle overlaps with shape using intersects() (somewhat slower)
627,656d625
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
<          */
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
<                 final double dx = p1[0] - p2[0];
<                 final double dy = p1[1] - p2[1];
<                 final double dz = p1[2] - p2[2];
< 
<                 double euclideanDistance = Math.sqrt(dx * dx + dy * dy);
<                 double absZDifference = Math.abs(dz);
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
< 
<         /**
