3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
108,113c110,127
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 // Set the data source using the new API method on ClassicConfiguration.
>                 flywayConfig.setDataSource(this.dataSource());
>                 // Set the class loader.
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
>                 // Convert the comma-separated locations string to an array of Location objects.
>                 String locationsProperty = prop.getProperty("flyway.locations");
>                 String[] locationStrings = locationsProperty.split(",\\s*");
>                 Location[] locations = new Location[locationStrings.length];
>                 for (int i = 0; i < locationStrings.length; i++) {
>                         locations[i] = new Location(locationStrings[i]);
>                 }
>                 flywayConfig.setLocations(locations);
>                 // Set validation on migrate.
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 // Instantiate Flyway using the new constructor with a Configuration parameter.
>                 return new Flyway(flywayConfig);
