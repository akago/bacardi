3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
107,113c109,114
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
>                 config.setLocations(new Location[] { new Location(prop.getProperty("flyway.locations")) });
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 return new Flyway(config);
255,256c256,257
<                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), "consensus algorithm",
<                                 featureSupplierMap);
---
>                 return BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),
>                                 "consensus algorithm", featureSupplierMap);
