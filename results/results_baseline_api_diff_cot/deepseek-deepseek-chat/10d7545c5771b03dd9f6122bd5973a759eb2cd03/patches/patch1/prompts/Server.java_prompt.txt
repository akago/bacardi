 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
//
// Wire
// Copyright (C) 2016 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

package com.wire.lithium;

import com.codahale.metrics.Gauge;
import com.codahale.metrics.health.HealthCheck;
import com.codahale.metrics.jmx.JmxReporter;
import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.wire.lithium.healthchecks.Alice2Bob;
import com.wire.lithium.healthchecks.CryptoHealthCheck;
import com.wire.lithium.healthchecks.Outbound;
import com.wire.lithium.healthchecks.StorageHealthCheck;
import com.wire.lithium.server.filters.AuthenticationFeature;
import com.wire.lithium.server.monitoring.RequestMdcFactoryFilter;
import com.wire.lithium.server.monitoring.StatusResource;
import com.wire.lithium.server.monitoring.VersionResource;
import com.wire.lithium.server.resources.BotsResource;
import com.wire.lithium.server.resources.MessageResource;
import com.wire.lithium.server.tasks.AvailablePrekeysTask;
import com.wire.lithium.server.tasks.ConversationTask;
import com.wire.xenon.Const;
import com.wire.xenon.MessageHandlerBase;
import com.wire.xenon.crypto.CryptoDatabase;
import com.wire.xenon.crypto.CryptoFile;
import com.wire.xenon.crypto.storage.JdbiStorage;
import com.wire.xenon.factories.CryptoFactory;
import com.wire.xenon.factories.StorageFactory;
import com.wire.xenon.state.FileState;
import com.wire.xenon.state.JdbiState;
import com.wire.xenon.tools.Logger;
import io.dropwizard.Application;
import io.dropwizard.client.JerseyClientBuilder;
import io.dropwizard.configuration.EnvironmentVariableSubstitutor;
import io.dropwizard.configuration.SubstitutingSourceProvider;
import io.dropwizard.servlets.tasks.Task;
import io.dropwizard.setup.Bootstrap;
import io.dropwizard.setup.Environment;
import io.federecio.dropwizard.swagger.SwaggerBundle;
import io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;
import org.flywaydb.core.Flyway;
import org.glassfish.jersey.media.multipart.MultiPartFeature;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.sqlobject.SqlObjectPlugin;

import javax.annotation.Nullable;
import javax.ws.rs.client.Client;
import java.util.SortedMap;
import java.util.concurrent.TimeUnit;

/**
 * Entry point for your Application
 *
 * @param <Config> Dropwizard configuration
 */
public abstract class Server<Config extends Configuration> extends Application<Config> {
    protected ClientRepo repo;
    protected Config config;
    protected Environment environment;
    protected Client client;
    protected MessageHandlerBase messageHandler;
    protected Jdbi jdbi;

    /**
     * This method is called once by the sdk in order to create the main message handler
     *
     * @param config Configuration object (yaml)
     * @param env    Environment object
     * @return Instance of your class that implements {@link MessageHandlerBase}
     * @throws Exception allowed to throw exception
     */
    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;

    /**
     * Override this method to put your custom initialization
     * NOTE: MessageHandler is not yet set when this method is invoked!
     *
     * @param config Configuration object (yaml)
     * @param env    Environment object
     * @throws Exception allowed to throw exception
     */
    @SuppressWarnings("RedundantThrows") // this method can be overridden
    protected void initialize(Config config, Environment env) throws Exception {

    }

    /**
     * Override this method in case you need to add custom Resource and/or Task
     * {@link #addResource(Object)}
     * and {@link #addTask(io.dropwizard.servlets.tasks.Task)}
     *
     * @param config Configuration object (yaml)
     * @param env    Environment object
     * @throws Exception allowed to throw exception
     */
    @SuppressWarnings("RedundantThrows") // this method can be overridden
    protected void onRun(Config config, Environment env) throws Exception {

    }

    @Override
    public void initialize(Bootstrap<Config> bootstrap) {
        bootstrap.setConfigurationSourceProvider(new SubstitutingSourceProvider(
                bootstrap.getConfigurationSourceProvider(), new EnvironmentVariableSubstitutor(false)));
        bootstrap.addBundle(new SwaggerBundle<>() {
            @Override
            protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(Config configuration) {
                return configuration.swagger;
            }
        });
    }

    @Override
    public void run(final Config config, Environment env) throws Exception {
        this.config = config;
        this.environment = env;

        System.setProperty(Const.WIRE_BOTS_SDK_TOKEN, config.token);
        System.setProperty(Const.WIRE_BOTS_SDK_API, config.apiHost);

        setupDatabase(config.database);

        jdbi = buildJdbi(config.database, env);

        client = createHttpClient(config, env);

        repo = createClientRepo();

        initialize(config, env);

        messageHandler = createHandler(config, env);

        addResources();

        initTelemetry();

        if (config.healthchecks) {
            runHealthChecks();
        }

        onRun(config, env);
    }

    private Client createHttpClient(Config config, Environment env) {
        return new JerseyClientBuilder(env)
                .using(config.getJerseyClient())
                .withProvider(MultiPartFeature.class)
                .withProvider(JacksonJsonProvider.class)
                .build(getName());
    }

    protected ClientRepo createClientRepo() {
        StorageFactory storageFactory = getStorageFactory();
        CryptoFactory cryptoFactory = getCryptoFactory();
        return new ClientRepo(getClient(), cryptoFactory, storageFactory);
    }

    @Nullable
    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {
        if (database.getDriverClass().equalsIgnoreCase("fs"))
            return null;

        return Jdbi
                .create(database.build(env.metrics(), getName()))
                .installPlugin(new SqlObjectPlugin());
    }

    protected void setupDatabase(Configuration.Database database) {
        if (!database.getDriverClass().equalsIgnoreCase("fs")) {
            Flyway flyway = Flyway
                    .configure()
                    .dataSource(database.getUrl(), database.getUser(), database.getPassword())
                    .baselineOnMigrate(database.baseline)
                    .load();
            flyway.migrate();
        }
    }

    public StorageFactory getStorageFactory() {
        if (config.database.getDriverClass().equalsIgnoreCase("fs")) {
            return botId -> new FileState(config.database.getUrl(), botId);
        }

        return botId -> new JdbiState(botId, getJdbi());
    }

    public CryptoFactory getCryptoFactory() {
        if (config.database.getDriverClass().equalsIgnoreCase("fs")) {
            return (botId) -> new CryptoFile(config.database.getUrl(), botId);
        }

        return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));
    }

    private void addResources() {
        /* --- Wire Common --- */
        addResource(new VersionResource()); // add version endpoint
        addResource(new StatusResource()); // empty status for k8s
        addResource(new RequestMdcFactoryFilter()); // MDC data
        /* //- Wire Common --- */

        botResource();
        messageResource();

        addTask(new ConversationTask(getRepo()));
        addTask(new AvailablePrekeysTask(getRepo()));
    }

    protected void messageResource() {
        addResource(new MessageResource(messageHandler, getRepo()));
    }

    protected void botResource() {
        StorageFactory storageFactory = getStorageFactory();
        CryptoFactory cryptoFactory = getCryptoFactory();

        addResource(new BotsResource(messageHandler, storageFactory, cryptoFactory));
    }

    protected void addTask(Task task) {
        environment.admin().addTask(task);
    }

    protected void addResource(Object component) {
        environment.jersey().register(component);
    }

    private void initTelemetry() {
        /* --- Wire Common --- */
        environment.jersey().register(new RequestMdcFactoryFilter());
        /* //- Wire Common --- */

        final CryptoFactory cryptoFactory = getCryptoFactory();
        final StorageFactory storageFactory = getStorageFactory();

        registerFeatures();

        environment.healthChecks().register("Storage", new StorageHealthCheck(storageFactory));
        environment.healthChecks().register("Crypto", new CryptoHealthCheck(cryptoFactory));
        environment.healthChecks().register("Alice2Bob", new Alice2Bob(cryptoFactory));
        environment.healthChecks().register("Outbound", new Outbound(getClient()));

        environment.metrics().register("logger.errors", (Gauge<Integer>) Logger::getErrorCount);
        environment.metrics().register("logger.warnings", (Gauge<Integer>) Logger::getWarningCount);

        JmxReporter jmxReporter = JmxReporter.forRegistry(environment.metrics())
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build();
        jmxReporter.start();
    }

    private void runHealthChecks() {
        Logger.info("Running health checks...");
        final SortedMap<String, HealthCheck.Result> results = environment.healthChecks().runHealthChecks();
        for (String name : results.keySet()) {
            final HealthCheck.Result result = results.get(name);
            if (!result.isHealthy()) {
                Logger.error("%s failed with: %s", name, result.getMessage());
                throw new RuntimeException(result.getError());
            }
        }
    }

    protected void registerFeatures() {
        this.environment.jersey().register(AuthenticationFeature.class);
    }

    public ClientRepo getRepo() {
        return repo;
    }

    public Config getConfig() {
        return config;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public Client getClient() {
        return client;
    }

    public Jdbi getJdbi() {
        return jdbi;
    }
}

```

2. The error information:
<error_information>
[ERROR] /lithium/src/main/java/com/wire/lithium/Server.java:[160,16] cannot access io.dropwizard.core.setup.Environment
  class file for io.dropwizard.core.setup.Environment not found
</error_information>

3. The changes in the API of the dependency:
<api_changes>
     Method io.dropwizard.client.JerseyClientConfiguration has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(com.codahale.metrics.httpclient.HttpClientMetricNameStrategy) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.client5.http.protocol.RedirectStrategy) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.conn.routing.HttpRoutePlanner) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.client5.http.HttpRequestRetryStrategy) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.client.ServiceUnavailableRetryStrategy) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.client.HttpRequestRetryHandler) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(io.dropwizard.setup.Environment) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.client.CredentialsProvider) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.hc.client5.http.HttpRequestRetryStrategy) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(io.dropwizard.core.setup.Environment) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.conn.DnsResolver) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.client5.http.DnsResolver) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.core5.http.protocol.HttpProcessor) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.hc.core5.http.config.Registry) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.protocol.HttpProcessor) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.client.RedirectStrategy) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.client.CredentialsProvider) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.client5.http.auth.CredentialsStore) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.hc.client5.http.auth.CredentialsStore) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.client.HttpRequestRetryHandler) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.hc.client5.http.routing.HttpRoutePlanner) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.conn.DnsResolver) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(javax.validation.Validator) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(com.codahale.metrics.httpclient5.HttpClientMetricNameStrategy) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.core5.http.config.Registry) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.hc.client5.http.routing.HttpRoutePlanner) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(jakarta.validation.Validator) has been added in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.client.ServiceUnavailableRetryStrategy) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.hc.client5.http.DnsResolver) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.config.Registry) has been removed in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(org.apache.http.conn.routing.HttpRoutePlanner) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(org.apache.http.config.Registry) has been removed in the new version of the dependency.
     Method io.dropwizard.client.HttpClientBuilder.using(com.codahale.metrics.httpclient5.HttpClientMetricNameStrategy) has been added in the new version of the dependency.
     Method io.dropwizard.client.JerseyClientBuilder.using(com.codahale.metrics.httpclient.HttpClientMetricNameStrategy) has been removed in the new version of the dependency.
     Construct io.dropwizard.client.JerseyClientBuilder(io.dropwizard.core.setup.Environment) has been added in the new version of the dependency.
     Constructor io.dropwizard.client.JerseyClientBuilder(io.dropwizard.setup.Environment) has been removed in the new version of the dependency.

</api_changes>


Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
