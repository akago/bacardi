10c10
< import redis.clients.jedis.Client;
---
> import redis.clients.jedis.Connection;
12a13,15
> import redis.clients.jedis.commands.ProtocolCommand;
> import redis.clients.jedis.util.RedisOutputStream;
> import redis.clients.jedis.CommandArguments;
25,27c28,29
< 
<     public RedisGraphPipeline(Client client, RedisGraph redisGraph){
<         super.setClient(client);
---
>     public RedisGraphPipeline(Connection connection, RedisGraph redisGraph) {
>         super(connection);
31,36d32
<     /**
<      * Execute a Cypher query.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @return a response which builds the result set with the query answer.
<      */
39c35
<         client.sendCommand(RedisGraphCommand.QUERY, graphId, query, Utils.COMPACT_STRING);
---
>         sendCommand(RedisGraphCommand.QUERY, graphId, query, Utils.COMPACT_STRING);
49,54d44
<     /**
<      * Execute a Cypher read-oly query.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @return a response which builds the result set with the query answer.
<      */
57c47
<         client.sendCommand(RedisGraphCommand.RO_QUERY, graphId, query, Utils.COMPACT_STRING);
---
>         sendCommand(RedisGraphCommand.RO_QUERY, graphId, query, Utils.COMPACT_STRING);
67,75d56
<     /**
<      * Execute a Cypher query with timeout.
<      *
<      * NOTE: timeout is simply sent to DB. Socket timeout will not be changed.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param timeout
<      * @return a response which builds the result set with the query answer.
<      */
78c59
<         client.sendCommand(RedisGraphCommand.QUERY, graphId, query, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
---
>         sendCommand(RedisGraphCommand.QUERY, graphId, query, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
89,97d69
<     /**
<      * Execute a Cypher read-only query with timeout.
<      *
<      * NOTE: timeout is simply sent to DB. Socket timeout will not be changed.
<      * @param graphId a graph to perform the query on
<      * @param query Cypher query
<      * @param timeout
<      * @return a response which builds the result set with the query answer.
<      */
100c72
<         client.sendCommand(RedisGraphCommand.RO_QUERY, graphId, query, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
---
>         sendCommand(RedisGraphCommand.RO_QUERY, graphId, query, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
111,117d82
<     /**
<      * Executes a cypher query with parameters.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @return  a response which builds the result set with the query answer.
<      */
121c86
<         client.sendCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
---
>         sendCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
131,137d95
<     /**
<      * Executes a cypher read-only query with parameters.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @return  a response which builds the result set with the query answer.
<      */
141c99
<         client.sendCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
---
>         sendCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
151,161d108
<     /**
<      * Executes a cypher query with parameters and timeout.
<      *
<      * NOTE: timeout is simply sent to DB. Socket timeout will not be changed.
<      * timeout.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @param timeout
<      * @return  a response which builds the result set with the query answer.
<      */
165c112
<         client.sendCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
---
>         sendCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING,
176,186d122
<     /**
<      * Executes a cypher read-only query with parameters and timeout.
<      *
<      * NOTE: timeout is simply sent to DB. Socket timeout will not be changed.
<      * timeout.
<      * @param graphId a graph to perform the query on.
<      * @param query Cypher query.
<      * @param params parameters map.
<      * @param timeout
<      * @return  a response which builds the result set with the query answer.
<      */
190c126
<         client.sendCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING,
---
>         sendCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING,
202,207d137
<     /**
<      * Invokes stored procedures without arguments
<      * @param graphId a graph to perform the query on
<      * @param procedure procedure name to invoke
<      * @return response with result set with the procedure data
<      */
212,218d141
<     /**
<      * Invokes stored procedure with arguments
<      * @param graphId a graph to perform the query on
<      * @param procedure procedure name to invoke
<      * @param args procedure arguments
<      * @return response with result set with the procedure data
<      */
223,231d145
< 
<     /**
<      * Invoke a stored procedure
<      * @param graphId a graph to perform the query on
<      * @param procedure - procedure to execute
<      * @param args - procedure arguments
<      * @param kwargs - procedure output arguments
<      * @return response with result set with the procedure data
<      */
238,243d151
< 
<     /**
<      * Deletes the entire graph
<      * @param graphId graph to delete
<      * @return response with the deletion running time statistics
<      */
245,246c153
< 
<         client.sendCommand(RedisGraphCommand.DELETE, graphId);
---
>         sendCommand(RedisGraphCommand.DELETE, graphId);
