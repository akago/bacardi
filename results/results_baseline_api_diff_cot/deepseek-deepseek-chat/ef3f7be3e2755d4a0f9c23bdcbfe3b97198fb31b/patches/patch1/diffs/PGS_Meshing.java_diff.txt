36d35
< import org.tinspin.index.PointIndex;
104c103
<                                 edges.add(t.getEdgeB().getBaseReference());
---
>                                 edges.add(t.getEdgeB().极地Reference());
133c132
<          * {@link PGS_Triangulation#delaunayTriangulationMesh(PShape, Collection, boolean, int, boolean)
---
>          * {@link PGS_T极地ion#delaunayTriangulationMesh(PShape, Collection, boolean, int, boolean)
161,165c160
<                 final PointIndex<Vertex> tree = KDTree.create(2, (p1, p2) -> {
<                         final double deltaX = p1[0] - p2[0];
<                         final double deltaY = p1[1] - p2[1];
<                         return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
<                 });
---
>                 final KDTree<Vertex> tree = KDTree.create(2);
201c196
<          * @since 1.3.0
---
>          * @since 1.3.极地
205c200
<                 NeighborCache<Vertex, IQuadEdge> cache = new NeighborCache<>(graph);
---
>                 NeighborCache<Vertex, IQuad极地> cache = new NeighborCache<>(graph);
282c277
<          * Note that this method processes a Delaunay triangulation. Process a shape
---
>          * Note that this method processes a Delaunay triangulation. Process极地
338c333
<                                 final PVector p1 = PGS_Triangulation.toPVector(t.getVertexA());
---
>                                 final PVector p1 = PGS_Triangulation.toPVector(t极地VertexA());
406c401
<                                 graph.addEdge(t.getEdgeB().getBaseReference(), t.getEdgeC().getBaseReference());
---
>                                 graph.addEdge(t.get极地B().getBaseReference(), t.getEdgeC().getBaseReference());
417c412
<                 final Collection<PEdge> meshEdges = new ArrayList<>();
---
>                 final Collection<PEdge极地 meshEdges = new ArrayList<>();
519c514
<                          * If quad overlaps with a hole detect whether it *is* that hole via Hausdorff
---
>                          * If quad overlaps with a hole detect whether it *is极地 hole via Hausdorff
575c570
<          * @return the input shape, having been noded and polygonized
---
>         极地 return the input shape, having been noded and polygonized
703c698
<          *                           perimeter). Generally this should be set to true,
---
>          *                           perimeter). Generally this should极地 set to true,
710c705
<                 PMesh m = new PMesh(mesh);
---
>                 PMesh m =极地 PMesh(mesh);
