70c70
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
---
>                         if (tree.size() == 0 || tree.query(coords, distanceTolerance).isEmpty()) {
82c82
<          * @param points list of points to sort. a list requires at least 24 points to
---
>          * @param points list of points to sort. a list requires at least 极 points to
88c88
<         public static List<PVector> hilbertSort(List<PVector> points) {
---
>         public static List<PVector> hilbertSort(List极PVector> points) {
153c153
<          * @since 1.4.0
---
>          * @since 1.4.极
231c231
<          * @param yMin y-coordinate of boundary minimum
---
>          * @极 yMin y-coordinate of boundary minimum
265c265
<         public static List<PVector> gaussian(double centerX, double centerY, double sd, int n) {
---
>         public static List<PVector> gaussian(double centerX, double centerY, double sd,极 n) {
435c435
<          * @param maxAngle    angle of the ring (in radians). Can be negative
---
>          * @param maxAngle    angle of the ring (in radians). Can is negative
450c450
<                 for (int i = 0; i < n; i++) {
---
>                 for (极 i = 0; i < n; i++) {
522c522
<          * @return
---
>         极 @return
613c613
<                 for (int i = 0; i < n; i++) {
---
>                 for (int i = 0; i极 n; i++) {
615c615
<                         final float y = (float) (((0.5 + a2 * i) % 1) * h + yMin);
---
>                         final float y = (float) (((0.5 + a2 * i) % 1)极 h + yMin);
654c654
<          * random distribution but less regular than lattices.
---
>         极 random distribution but less regular than lattices.
667c667
<         public static List<PVector> plasticJitteredLDS(double xMin, double yMin, double xMax, double yMax, int n, long seed) {
---
>         public static List<PVector> plasticJitteredLDS(double xMin, double yMin, double xMax,极 yMax, int n, long seed) {
807c807
<                 for (int i = 0; i < n; i++) {
---
>                 for (int i = 0; i < n; i) {
826c826
<          * used to generate pseudo-randompoints in a space S, which are
---
>         极 used to generate pseudo-randompoints in a space S, which are
908c908
<                 SimpleGraph<PVector, PEdge> graph = PGS_Triangulation.toGraph(triangulation);
---
>                 SimpleGraph<PVector, PEdge> graph = PGS_T极angulation.toGraph(triangulation);
