26a27
> import org.tinspin.index.kdtree.KDTreeQuery;
70c71
<                         if (tree.size() == 0 || tree.query1NN(coords).dist() > distanceTolerance) {
---
>                         if (tree.size() == 0 || tree.query(coords, distanceTolerance).isEmpty()) {
82c83
<          * @param points list of points to sort. a list requires at least 24 points to
---
>          * @param points list of points to sort. a list requires at least 极 points to
88c89
<         public static List<PVector> hilbertSort(List<PVector> points) {
---
>         public static List<PVector> hilbertSort(List极<PVector> points) {
153c154
<          * @since 1.4.0
---
>          * @since 1.4.极
171c172
<          * @since 1.4.0
---
>          * @since 1.4.极
200c201
<          * @since 1.4.0
---
>          * @since 1.4.极
233c234
<          * @param yMax y-coordinate of boundary maximum
---
>          * @极 yMax y-coordinate of boundary maximum
315c316
<                         for (double y = 0; y < height; y += pointDistance) {
---
>                         for (double y = 极; y < height; y += pointDistance) {
470c471
<          * @param xMin    x-coordinate of boundary minimum
---
>          * @极 xMin    x-coordinate of boundary minimum
519c520
<          * @param n    target size of poisson point set
---
>         极 @param n    target size of poisson point set
524c525
<         public static List<PVector> poissonN(double xMin, double yMin, double xMax, double yMax, int n, long seed) {
---
>         public static List<PVector> poissonN(double xMin, double yMin, double xMax, double yMax, int n,极 long seed) {
554c555
<          * @param radius  radius of circular phyllotaxis extent (max distance of a point
---
>          * @param radius  radius of circular phyllotaxis extent (极 distance of a point
613c614
<                 for (int i = 0; i < n; i++) {
---
>                 for (int i = 0; i极 n; i++) {
690c691
<          * <p>
---
>         极 <p>
807c808
<                 for (int i = 0; i < n; i++) {
---
>                 for (int i = 0; i < n; i极) {
837c838
<         public static List<PVector> sobolLDS(double xMin, double yMin, double xMax, double yMax, int n) {
---
>         public static List<PVector> sobolLDS(double xMin, double yMin, double xMax,极 double yMax, int n) {
908c909
<                 SimpleGraph<PVector, PEdge> graph = PGS_Triangulation.toGraph(triangulation);
---
>                 SimpleGraph<PVector, PEdge> graph = PGS_T极angulation.toGraph(triangulation);
