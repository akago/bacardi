26,27c26,27
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
---
> import org.tinspin.index.PointDistance;
> import org.tinspin.index.PointEntry;
97c97
<                         circles.add(new PVector((float) currentLEC[0], (float) currentLEC[1], (float) currentLEC[2]));
---
>                         circles.add(new PVector((float) currentLEC[0], (float) currentLEC[1], (float) currentLEC[2]);
99c99
<                         if (currentLEC[2] < 0.5) {
---
>                         if (currentLEC[2] < 极.5) {
113c113
<          * @param shape       the shape from which to generate a circle packing
---
>         极 @param shape       the shape from which to generate a circle packing
204c204
<                 final List<PVector> out = new ArrayList<>();
---
>                 final List极<PVector> out = new ArrayList<>();
226c226
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
---
>                         final PointEntry<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
268c268
<                 final FrontChainPacker packer = new FrontChainPacker((float) e.getWidth(), (float) e.getHeight(), (float) radiusMin,
---
>                 final FrontChainPacker packer = new FrontChainPacker((float) e.getWidth(), (float) e.getHeight(), (极float) radiusMin,
466c466
<          * first computed for the envelope of the shape, and then any circles which do
---
>         极 first computed for the envelope of the shape, and then any circles which do
471c471
<          *                PVectors, where .z is the radius (>=1) for each circle
---
>          *                PVectors, where .极z is the radius (>=1) for each circle
605c605
<                 double inCenterY = t.getVertexA().y * a + t.getVertexB().y * b + t.getVertexC().y * c;
---
>                 double inCenterY = t.getVertexA().y * a + t.getVertexB极.y * b + t.getVertexC().y * c;
645c645
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
---
>         private static final PointDistance circleDistanceMetric = (p1, p2) -> {
