21c21,27
< import org.codehaus.plexus.util.xml.Xpp3Dom;
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
> 
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
> import org.xml.sax.InputSource;
22a29
> import java.io.StringReader;
70,72c77,94
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
<                     .flatMap(aggregate -> stream(aggregate.getChildren("path")))
---
>         if (config instanceof String) {
>             try {
>                 DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
>                 DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
>                 org.w3c.dom.Document doc = dBuilder.parse(new InputSource(new StringReader((String) config)));
>                 doc.getDocumentElement().normalize();
> 
>                 NodeList annotationProcessorPathsList = doc.getElementsByTagName("annotationProcessorPaths");
> 
>                 return stream(IntStream.range(0, annotationProcessorPathsList.getLength()).mapToObj(annotationProcessorPathsList::item).toArray(Node[]::new))
>                         .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                         .map(node -> (Element) node)
>                         .flatMap(aggregate -> {
>                             NodeList pathList = aggregate.getElementsByTagName("path");
>                             return stream(IntStream.range(0, pathList.getLength()).mapToObj(pathList::item).toArray(Node[]::new))
>                                     .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                                     .map(node -> (Element) node);
>                         })
83a106,109
> 
>             } catch (Exception e) {
>                 throw new RuntimeException(e);
>             }
99,101c125,159
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
<         return child == null ? "" : child.getValue();
---
>     private static String extractChildValue(Element node, String name) {
>         NodeList nodeList = node.getElementsByTagName(name);
>         if (nodeList.getLength() > 0) {
>             return nodeList.item(0).getTextContent();
>         }
>         return "";
>     }
> 
>     private static String extractChildValue(org.w3c.dom.Node node, String name) {
>         if (node instanceof Element) {
>             return extractChildValue((Element) node, name);
>         }
>         return "";
>     }
> 
>     private static <T> stream(T[] array) {
>         return java.util.Arrays.stream(array);
>     }
> 
>     private static <T> stream(Node[] array) {
>         return java.util.Arrays.stream(array);
>     }
> 
>     private static <T> stream(Element[] array) {
>         return java.util.Arrays.stream(array);
>     }
> 
>     private static <T> stream(org.w3c.dom.NodeList list) {
>         return IntStream.range(0, list.getLength()).mapToObj(list::item);
>     }
> 
>     private static class IntStream {
>         public static java.util.stream.IntStream range(int startInclusive, int endExclusive) {
>             return java.util.stream.IntStream.range(startInclusive, endExclusive);
>         }
