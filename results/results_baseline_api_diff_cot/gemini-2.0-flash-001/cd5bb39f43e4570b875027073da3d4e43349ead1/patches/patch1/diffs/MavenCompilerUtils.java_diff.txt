21c21,27
< import org.codehaus.plexus.util.xml.Xpp3Dom;
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
> 
> import javax.xml.parsers.DocumentBuilder;
> import javax.xml.parsers.DocumentBuilderFactory;
> import org.xml.sax.InputSource;
22a29
> import java.io.StringReader;
24a32
> import java.util.stream.IntStream;
70,71c78,80
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
---
>         if (config instanceof org.codehaus.plexus.util.xml.Xpp3Dom) {
>             org.codehaus.plexus.util.xml.Xpp3Dom xpp3DomConfig = (org.codehaus.plexus.util.xml.Xpp3Dom) config;
>             return stream(xpp3DomConfig.getChildren("annotationProcessorPaths"))
83a93,125
>         } else if (config instanceof String) {
>             try {
>                 DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
>                 DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
>                 org.w3c.dom.Document doc = dBuilder.parse(new InputSource(new StringReader((String) config)));
>                 doc.getDocumentElement().normalize();
> 
>                 NodeList annotationProcessorPathsList = doc.getElementsByTagName("annotationProcessorPaths");
> 
>                 return IntStream.range(0, annotationProcessorPathsList.getLength())
>                         .mapToObj(annotationProcessorPathsList::item)
>                         .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                         .map(node -> (Element) node)
>                         .flatMap(aggregate -> {
>                             NodeList pathList = aggregate.getElementsByTagName("path");
>                             return IntStream.range(0, pathList.getLength())
>                                     .mapToObj(pathList::item)
>                                     .filter(node -> node.getNodeType() == Node.ELEMENT_NODE)
>                                     .map(node -> (Element) node);
>                         })
>                         .map(processor -> system.createArtifact(
>                                 extractChildValue(processor, "groupId", processor),
>                                 extractChildValue(processor, "artifactId", processor),
>                                 extractChildValue(processor, "version", processor),
>                                 PACKAGING))
>                         .filter(a -> !a.getGroupId().isEmpty())
>                         .filter(a -> !a.getArtifactId().isEmpty())
>                         .filter(a -> !a.getVersion().isEmpty())
>                         .collect(Collectors.toSet());
> 
>             } catch (Exception e) {
>                 throw new RuntimeException("Error parsing XML configuration", e);
>             }
99,100c141,142
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
---
>     private static String extractChildValue(org.codehaus.plexus.util.xml.Xpp3Dom node, String name) {
>         org.codehaus.plexus.util.xml.Xpp3Dom child = node.getChild(name);
102a145,152
> 
>     private static String extractChildValue(Element node, String name, Element processor) {
>         NodeList children = processor.getElementsByTagName(name);
>         if (children.getLength() > 0) {
>             return children.item(0).getTextContent();
>         }
>         return "";
>     }
