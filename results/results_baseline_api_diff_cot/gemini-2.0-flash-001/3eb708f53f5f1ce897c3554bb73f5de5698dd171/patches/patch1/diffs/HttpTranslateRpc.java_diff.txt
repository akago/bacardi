11c11
<  * distributed under the License is distributed on an "AS IS" BASIS,
---
>  * is distributed on an "AS IS" BASIS,
25,28d24
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
34a31
> 
37a35,39
> import com.google.api.services.translate.v3.Translate;
> import com.google.api.services.translate.v3.model.DetectLanguageResponse;
> import com.google.api.services.translate.v3.model.Language;
> import com.google.api.services.translate.v3.model.TranslateTextResponse;
> import com.google.api.services.translate.v3.model.Translation;
69c71
<   public List<List<DetectionsResourceItems>> detect(List<String> texts) {
---
>   public List<List<com.google.api.services.translate.v3.model.Detection>> detect(List<String> texts) {
71,73c73,81
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
---
>       ImmutableList.Builder<List<com.google.api.services.translate.v3.model.Detection>> detectionsResult = ImmutableList.builder();
>       for (String text : texts) {
>         Translate.Projects.DetectLanguage detectLanguage = translate.projects().detectLanguage("projects/" + options.getProjectId());
>         detectLanguage.setQ(ImmutableList.of(text));
>         detectLanguage.setKey(options.getApiKey());
>         DetectLanguageResponse response = detectLanguage.execute();
>         detectionsResult.add(response.getDetections());
>       }
>       return detectionsResult.build();
80c88
<   public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
---
>   public List<Language> listSupportedLanguages(Map<Option, ?> optionMap) {
82,87c90
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
---
>       String targetLanguage =
89,92c92,97
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
---
>               Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       Translate.Projects.Locations.GetSupportedLanguages list = translate.projects().locations().getSupportedLanguages("projects/" + options.getProjectId() + "/locations/" + options.getLocation());
>       list.setTarget(targetLanguage);
>       list.setKey(options.getApiKey());
>       List<Language> languages = list.execute().getLanguages();
>       return languages != null ? languages : ImmutableList.<Language>of();
99c104
<   public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
---
>   public List<com.google.api.services.translate.v3.model.Translation> translate(List<String> texts, Map<Option, ?> optionMap) {
104,113c109,117
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
---
>       ImmutableList.Builder<com.google.api.services.translate.v3.model.Translation> translationsResult = ImmutableList.builder();
> 
>       for (String text : texts) {
>         Translate.Projects.Locations.TranslateText translateText = translate.projects().locations().translateText("projects/" + options.getProjectId() + "/locations/" + options.getLocation(), new com.google.api.services.translate.v3.model.TranslateTextRequest().setContents(ImmutableList.of(text)).setTargetLanguageCode(targetLanguage).setSourceLanguageCode(sourceLanguage).setMimeType("text/plain"));
>         translateText.setKey(options.getApiKey());
>         TranslateTextResponse response = translateText.execute();
>         translationsResult.addAll(response.getTranslations());
>       }
> 
115,116c119,120
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
---
>           translationsResult.build(),
>           new Function<com.google.api.services.translate.v3.model.Translation, com.google.api.services.translate.v3.model.Translation>() {
118,121c122
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
---
>             public com.google.api.services.translate.v3.model.Translation apply(com.google.api.services.translate.v3.model.Translation translationsResource) {
