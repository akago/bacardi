30c30,34
< import org.cactoos.collection.Filtered;
---
> import org.cactoos.Func;
> import org.cactoos.Scalar;
> import org.cactoos.Text;
> import org.cactoos.collection.CollectionOf;
> import org.cactoos.iterable.Filtered;
36d39
< import org.cactoos.scalar.CheckedScalar;
38d40
< import org.cactoos.scalar.UncheckedScalar;
40d41
< import org.cactoos.text.SplitText;
42a44,46
> import java.util.function.Predicate;
> import java.util.stream.Collectors;
> import java.util.stream.StreamSupport;
201,202c205
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             Scalar<Long> scalar = () -> Long.parseUnsignedLong(
204c207
<                         new SplitText(
---
>                     new org.cactoos.text.Split(
211,213c214,219
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             );
>             try {
>                 return scalar.value();
>             } catch (Exception e) {
>                 throw new IOException(e);
>             }
247,250c253,257
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
---
>             Predicate<Transaction> incomingPredicate = incoming ->
>                 StreamSupport.stream(ledger.spliterator(), false)
>                     .filter(origin -> {
>                         try {
>                             return new Or(
257,262c264,275
<                         )
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
<             );
---
>                             ).value();
>                         } catch (Exception e) {
>                             throw new IllegalStateException(e);
>                         }
>                     })
>                     .findAny()
>                     .isEmpty();
> 
>             final Iterable<Transaction> candidates = StreamSupport.stream(other.ledger().spliterator(), false)
>                 .filter(incomingPredicate)
>                 .collect(Collectors.toList());
> 
265c278
<                 new Joined<Transaction>(ledger, candidates)
---
>                 new Joined<Transaction>(ledger, new CollectionOf<>(candidates))
275c288
<                         new SplitText(
---
>                         new org.cactoos.text.Split(
