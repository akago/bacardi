12a13,15
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
> 
14c17,18
< import org.spongepowered.api.command.CommandException;
---
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandCause;
16,19c20,21
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.exception.CommandException;
> import org.spongepowered.api.command.parameter.CommandContext;
22,23d23
< import org.spongepowered.api.text.Text;
< import org.spongepowered.api.text.serializer.TextSerializers;
25c25
< public class InfoCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class InfoCommand implements org.spongepowered.api.command.CommandExecutor, ChangeSkinCommand {
35c35
<     public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {
---
>     public CommandResult execute(CommandCause src, CommandContext args) throws CommandException {
42c42
<         Task.builder().async()
---
>         Sponge.asyncScheduler().submit(Task.builder().plugin(plugin)
45c45
<                     Task.builder().execute(() -> sendSkinDetails(uniqueId, preferences)).submit(plugin);
---
>                     Sponge.server().scheduler().submit(Task.builder().plugin(plugin).execute(() -> sendSkinDetails(uniqueId, preferences)).build());
47c47
<                 .submit(plugin);
---
>                 .build());
53,54c53,54
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         return Command.builder()
61c61
<         Optional<Player> optPlayer = Sponge.getServer().getPlayer(uuid);
---
>         Optional<Player> optPlayer = Sponge.server().player(uuid);
70c70
<                 Text text = TextSerializers.LEGACY_FORMATTING_CODE.deserialize(formatted);
---
>                 Component text = LegacyComponentSerializer.legacySection().deserialize(formatted);
