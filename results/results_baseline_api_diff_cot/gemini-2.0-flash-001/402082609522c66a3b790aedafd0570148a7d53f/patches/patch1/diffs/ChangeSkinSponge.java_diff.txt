19a20,21
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
21c23
< import org.spongepowered.api.Platform.Type;
---
> import org.spongepowered.api.Platform;
23,24c25
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
---
> import org.spongepowered.api.command.Command;
27,31c28,32
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
---
> import org.spongepowered.api.event.lifecycle.GameInitializationEvent;
> import org.spongepowered.api.event.lifecycle.GamePreInitializationEvent;
> import org.spongepowered.api.event.lifecycle.GameStoppingServerEvent;
> import org.spongepowered.api.network.channel.raw.RawDataChannel;
> import org.spongepowered.api.network.channel.raw.RawDataChannel.Listener;
33c34
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.plugin.PluginContainer;
42c43
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> public class ChangeSkinSponge implements PlatformPlugin<org.spongepowered.api.command.CommandCause> {
77c78
<         CommandManager cmdManager = Sponge.getCommandManager();
---
>         PluginContainer pluginContainer = Sponge.pluginManager().plugin(ARTIFACT_ID).orElse(null);
80,85c81
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
---
>         Sponge.eventManager().registerListeners(this, injector.getInstance(LoginListener.class));
87c83,90
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
---
>         if (pluginContainer != null) {
>             Sponge.commandManager().register(pluginContainer, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>             Sponge.commandManager().register(pluginContainer, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>             Sponge.commandManager().register(pluginContainer, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>             Sponge.commandManager().register(pluginContainer, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>             Sponge.commandManager().register(pluginContainer, injector.getInstance(InvalidateCommand.class)
>                     .buildSpec(), "skininvalidate", "skin-invalidate");
>         }
90d92
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
93,96c95,100
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
> 
>         RawDataChannel updateChannel = Sponge.channelRegistry().register(pluginContainer, updateChannelName);
>         RawDataChannel permChannel = Sponge.channelRegistry().register(pluginContainer, permissionChannelName);
> 
>         updateChannel.addListener(injector.getInstance(UpdateSkinListener.class));
>         permChannel.addListener(injector.getInstance(CheckPermissionListener.class));
109c113
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
---
>     public boolean hasSkinPermission(org.spongepowered.api.command.CommandCause invoker, UUID uuid, boolean sendMessage) {
142c146
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(org.spongepowered.api.command.CommandCause receiver, String key) {
145c149,150
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             Component component = LegacyComponentSerializer.legacySection().deserialize(message);
>             receiver.sendMessage(component);
