13a14
> import java.util.function.Consumer;
15c16
< import org.spongepowered.api.Platform.Type;
---
> import org.spongepowered.api.Platform;
17,21c18,23
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelBuf;
< import org.spongepowered.api.network.ChannelRegistrar;
< import org.spongepowered.api.network.RawDataListener;
< import org.spongepowered.api.network.RemoteConnection;
---
> import org.spongepowered.api.network.channel.raw.RawDataChannel;
> import org.spongepowered.api.network.channel.raw.RawDataListener;
> import org.spongepowered.api.network.channel.ChannelRegistrar;
> import org.spongepowered.api.network.EngineConnection;
> import org.spongepowered.api.network.channel.ChannelBuf;
> import org.spongepowered.api.entity.living.player.server.ServerPlayer;
40c42
<     public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
---
>     public void handlePayload(ChannelBuf data, EngineConnection connection, Platform.Type side) {
42c44
<         ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
---
>         ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.readByteArray());
83c85,89
<         permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
---
> 
>         byte[] bytes = dataOutput.toByteArray();
>         Consumer<ChannelBuf> consumer = buf -> buf.writeByteArray(bytes);
> 
>         permissionsResultChannel.sendTo((ServerPlayer) receiver, consumer);
