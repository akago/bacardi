 You are an advanced Automatic Program Repair (APR) tool specialized in fixing breaking dependency updates. Your task is to analyze client code that is failing due to changes in an external dependency's API and propose a fix that can be applied to the client code.
First, review the following information:

1. The client code that is failing:
```java
package com.redislabs.redisgraph;

import redis.clients.jedis.Response;
import redis.clients.jedis.commands.BasicRedisPipeline;
import redis.clients.jedis.commands.BinaryRedisPipeline;
import redis.clients.jedis.commands.BinaryScriptingCommandsPipeline;
import redis.clients.jedis.commands.ClusterPipeline;
import redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline;
import redis.clients.jedis.commands.MultiKeyCommandsPipeline;
import redis.clients.jedis.commands.RedisPipeline;
import redis.clients.jedis.commands.ScriptingCommandsPipeline;

import java.io.Closeable;
import java.util.List;
import java.util.Map;

/**
 * An interface which aligned to Jedis transactional interface
 */
public interface RedisGraphTransaction extends
        MultiKeyBinaryRedisPipeline,
        MultiKeyCommandsPipeline, ClusterPipeline,
        BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline,
        BasicRedisPipeline, BinaryRedisPipeline, RedisPipeline, Closeable {

    /**
     * Execute a Cypher query.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query);

    /**
     * Execute a Cypher read-only query.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query);

    /**
     * Execute a Cypher query with timeout.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param timeout
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, long timeout);

    /**
     * Execute a Cypher read-only query with timeout.
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param timeout
     * @return a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, long timeout);

    /**
     * Execute a Cypher query with arguments
     * @param graphId a graph to perform the query on
     * @param query Cypher query
     * @param args
     * @return a response which builds the result set with the query answer.
     * @deprecated use {@link #query(String, String, Map)} instead.
     */
    @Deprecated
    Response<ResultSet> query(String graphId, String query, Object ...args);

    /**
     * Executes a cypher query with parameters.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, Map<String, Object> params);

    /**
     * Executes a cypher read-only query with parameters.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, Map<String, Object> params);

    /**
     * Executes a cypher query with parameters and timeout.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @param timeout
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> query(String graphId, String query, Map<String, Object> params, long timeout);

    /**
     * Executes a cypher read-only query with parameters and timeout.
     * @param graphId a graph to perform the query on.
     * @param query Cypher query.
     * @param params parameters map.
     * @param timeout
     * @return  a response which builds the result set with the query answer.
     */
    Response<ResultSet> readOnlyQuery(String graphId, String query, Map<String, Object> params, long timeout);

    /**
     * Invokes stored procedures without arguments
     * @param graphId a graph to perform the query on
     * @param procedure procedure name to invoke
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure);

    /**
     * Invokes stored procedure with arguments
     * @param graphId a graph to perform the query on
     * @param procedure procedure name to invoke
     * @param args procedure arguments
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure, List<String> args);

    /**
     * Invoke a stored procedure
     * @param graphId a graph to perform the query on
     * @param procedure - procedure to execute
     * @param args - procedure arguments
     * @param kwargs - procedure output arguments
     * @return a response which builds result set with the procedure data
     */
    Response<ResultSet> callProcedure(String graphId, String procedure, List<String> args  , Map<String, List<String>> kwargs);

    /**
     * Deletes the entire graph
     * @param graphId graph to delete
     * @return a response which builds the delete running time statistics
     */
    Response<String> deleteGraph(String graphId);


    /**
     * executes the transaction
     * @return a list of the executed transaction commands answers, in case of successful transaction, null otherwise
     */
    List<Object> exec();

    /**
     * If object is in transaction mode,
     * flushes all previously queued commands in a transaction and restores the connection state to normal
     */
    void clear();

    /**
     *
     * @return
     */
    List<Response<?>> execGetResponse();

    /**
     * Flushes all previously queued commands in a transaction and restores the connection state to normal
     */
    String discard();
}

```

2. The error information:
<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[22,9] cannot find symbol
</error_information>
  symbol: class MultiKeyCommandsPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[8,36] cannot find symbol
</error_information>
  symbol:   class MultiKeyBinaryRedisPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[23,9] cannot find symbol
</error_information>
  symbol: class BinaryScriptingCommandsPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[9,36] cannot find symbol
</error_information>
  symbol:   class MultiKeyCommandsPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[11,36] cannot find symbol
</error_information>
  symbol:   class ScriptingCommandsPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
</error_information>
  symbol: class BasicRedisPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
</error_information>
  symbol: class BasicRedisPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[6,36] cannot find symbol
</error_information>
  symbol:   class BinaryScriptingCommandsPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[24,9] cannot find symbol
</error_information>
  symbol: class BasicRedisPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[4,36] cannot find symbol
</error_information>
  symbol:   class BasicRedisPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[22,9] cannot find symbol
</error_information>
  symbol: class MultiKeyCommandsPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[23,9] cannot find symbol
</error_information>
  symbol: class BinaryScriptingCommandsPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[7,36] cannot find symbol
</error_information>
  symbol:   class ClusterPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[21,9] cannot find symbol
</error_information>
  symbol: class MultiKeyBinaryRedisPipeline

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[5,36] cannot find symbol
</error_information>
  symbol:   class BinaryRedisPipeline
  location: package redis.clients.jedis.commands

<error_information>
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/RedisGraphTransaction.java:[10,36] cannot find symbol
</error_information>
  symbol:   class RedisPipeline
  location: package redis.clients.jedis.commands


3. The changes in the API of the dependency:
<api_changes>
     Class redis.clients.jedis.commands.MultiKeyCommandsPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.MultiKeyBinaryRedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.BinaryScriptingCommandsPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.ScriptingCommandsPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.BinaryRedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.RedisPipeline has been removed in the new version of the dependency.
     Class redis.clients.jedis.commands.BasicRedisPipeline has been removed in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(java.util.Set,redis.clients.jedis.JedisClientConfig,org.apache.commons.pool2.impl.GenericObjectPoolConfig) has been added in the new version of the dependency.
     Class redis.clients.jedis.commands.ClusterPipeline has been removed in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(redis.clients.jedis.providers.ClusterConnectionProvider) has been added in the new version of the dependency.
     Type reference redis.clients.jedis.ClusterPipeline(java.util.Set,redis.clients.jedis.JedisClientConfig) has been added in the new version of the dependency.
     Interface redis.clients.jedis.ClusterPipeline has been added in the new version of the dependency.

</api_changes>



Before proposing a fix, please analyze the situation and plan your approach within <repair_strategy> tags:

1. Identify the specific API changes that are causing the failure in the client code.
2. Compare the old and new API versions, noting any changes in method signatures, return types, or parameter lists.
3. Determine which parts of the client code need to be updated to accommodate these API changes.
4. Consider any constraints or requirements for the fix (e.g., not changing function signatures, potential import adjustments).
5. Plan the minimal set of changes needed to fix the issue while keeping the code functional and compliant with the new API.
6. Consider potential side effects of the proposed changes on other parts of the code.
7. Ensure that the planned changes will result in a complete and compilable class.
8. If applicable, note any additional imports that may be needed due to the API changes.

Now, implement your fix based on your analysis. When creating your solution, adhere to the following guidelines:

1. Provide a complete and compilable class in a fenced code block.
2. Do not remove any code that you don't want to update; keep it in the code block.
3. Do not use placeholders like "// ... (rest of the code remains unchanged)" in your response.
4. You CANNOT change the function signature of any method, but you may create variables if it simplifies the code.
5. You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
6. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
7. Avoid removing any existing code unless it directly causes a compilation or functionality error.
8. Ensure that your fix addresses the breaking dependency update and returns the whole class, as per the user's feedback.

Return only the fixed class, ensuring it fully compiles and adheres to these constraints. Begin your response with the fenced code block containing the complete, fixed class.
