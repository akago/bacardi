1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
36d12
< import org.cactoos.scalar.CheckedScalar;
38d13
< import org.cactoos.scalar.UncheckedScalar;
40d14
< import org.cactoos.text.SplitText;
42d15
< import org.cactoos.text.UncheckedText;
44,51d16
< /**
<  * Wallet.
<  * @since 0.1
<  * @todo #16:30min Merge method should update transactions
<  *  in wallet's file and return concrete implementation not a fake one.
<  *  Beware that tests should be refactored to take care of file cleanup
<  *  after each case that merges wallets.
<  */
55,61d19
<     /**
<      * This wallet's ID: an unsigned 64-bit integer.
<      * @return This wallet's id
<      * @throws IOException If an IO error occurs
<      * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
<      * @checkstyle MethodName (2 lines)
<      */
64,69d21
<     /**
<      * Make a payment.
<      * @param amt Amount to pay in zents
<      * @param bnf Wallet ID of beneficiary
<      * @throws IOException If an IO error occurs
<      */
72,78d23
<     /**
<      * Merge both {@code this} and {@code other}. Fails if they are not the
<      * same wallet, as identified by their {@link #id() id}.
<      * @param other Other wallet
<      * @return The merged wallet
<      * @throws IOException If an IO error occurs
<      */
81,84d25
<     /**
<      * This wallet's ledger.
<      * @return This wallet's ledger
<      */
87,90d27
<     /**
<      * This wallet's RSA key.
<      * @return This wallet's RSA key.
<      */
93,103d29
<     /**
<      * A Fake {@link Wallet}.
<      * @since 1.0
<      * @todo #65:30min Complete Wallet implementations with id, public RSA
<      *  key and network id. Wallets.create(Long, String, String) must
<      *  create a Wallet with these strings set and a constructor must be
<      *  added to all Walletl realizations (Wallet(final long id, final String
<      *  pubkey, final String network, final Transaction... transactions). After
<      *  completing these implementations fix tests that uses Wallets.create()
<      *  and all Wallet realizations.
<      */
105,108d30
< 
<         /**
<          * The wallet id.
<          */
110,113d31
< 
<         /**
<          * Transactions.
<          */
116,119d33
<         /**
<          * Constructor.
<          * @param id The wallet id.
<          */
124,128d37
<         /**
<          * Ctor.
<          * @param id The wallet id.
<          * @param transactions Transactions.
<          */
133,139d41
<         /**
<          * Constructor.
<          * @param id The wallet id.
<          * @param pubkey The public RSA key of the wallet owner.
<          * @param network The network the walet belongs to.
<          * @checkstyle UnusedFormalParameter (2 lines)
<          */
144,148d45
<         /**
<          * Ctor.
<          * @param id The wallet id.
<          * @param transactions Transactions.
<          */
180,183d76
<     /**
<      * Default File implementation.
<      * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)
<      */
185,188d77
< 
<         /**
<          * Path of this wallet.
<          */
191,194d79
<         /**
<          * Ctor.
<          * @param path Path of wallet
<          */
201,202c86
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return Long.parseUnsignedLong(
204,209c88,89
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
---
>                     new TextOf(this.path).asString().split("\n")
>                 )[2],
211,213c91
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>             );
224,232d101
<         // @todo #16:30min Following transactions should be ignored according
<         //  to the whitepaper:
<         //  a) If the transaction is negative and its signature is not valid,
<         //  it is ignored;
<         //  b) If the transaction makes the balance of the wallet negative,
<         //  it is ignored;
<         //  c) If the transaction is positive and it’s absent in the paying
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
237d105
<                     new UncheckedText(
242d109
<                         )
249,258c116,120
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
---
>                     origin -> 
>                         incoming.equals(origin) ||
>                         (incoming.id() == origin.id() && incoming.bnf().equals(origin.bnf())) ||
>                         (incoming.id() == origin.id() && incoming.amount() < 0L) ||
>                         incoming.prefix().equals(origin.prefix()),
275,278c137
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).asString().split("\\n")
280d138
<                     // @checkstyle MagicNumberCheck (1 line)
286,288d143
<         // @todo #54:30min Implement key method. This should return the
<         //  public RSA key of the wallet owner in Base64. Also add a unit test
<         //  to replace WalletTest.keyIsNotYetImplemented().
