37,48c37,43
< import javax.validation.Validator;
< import javax.validation.constraints.NotBlank;
< import javax.validation.constraints.NotEmpty;
< import javax.validation.constraints.NotNull;
< import javax.validation.metadata.BeanDescriptor;
< import javax.validation.metadata.ConstraintDescriptor;
< import javax.validation.metadata.ElementDescriptor;
< 
< import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
< import com.premiumminds.wicket.crudifier.IObjectRenderer;
< import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
< import com.premiumminds.wicket.crudifier.form.EntityProvider;
---
> import jakarta.validation.Validator;
> import jakarta.validation.constraints.NotBlank;
> import jakarta.validation.constraints.NotEmpty;
> import jakarta.validation.constraints.NotNull;
> import jakarta.validation.metadata.BeanDescriptor;
> import jakarta.validation.metadata.ConstraintDescriptor;
> import jakarta.validation.metadata.ElementDescriptor;
64,68c59
<         private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
< 
<         private List<ObjectProperties> objectProperties;
<         private CrudifierEntitySettings entitySettings;
<         private Map<Class<?>, IObjectRenderer<?>> renderers;
---
>         private Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();
85,105d75
<                 typesControlGroups.put(Boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(boolean.class, CheckboxControlGroup.class);
<                 typesControlGroups.put(Set.class, CollectionControlGroup.class);
< 
<                 objectProperties = new ArrayList<ObjectProperties>();
<                 this.entitySettings = entitySettings;
<                 this.renderers = renderers;
<         }
< 
<         private Set<String> getPropertiesByOrder(Class<?> modelClass) {
<                 Set<String> properties = new LinkedHashSet<String>();
< 
<                 for(String property : entitySettings.getOrderOfFields()){
<                         if(!entitySettings.getHiddenFields().contains(property))
<                                 properties.add(property);
<                 }
<                 for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
<                         if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
<                            !properties.contains(descriptor.getName()) &&
<                            !descriptor.getName().equals("class"))
<                                 properties.add(descriptor.getName());
108,112d77
<                 return properties;
<         }
< 
<         protected abstract EntityProvider<?> getEntityProvider(String name);
< 
165d129
< 
210c174
<         @SuppressWarnings("unchecked")
---
>         @SuppressWarnings("rawtypes")
