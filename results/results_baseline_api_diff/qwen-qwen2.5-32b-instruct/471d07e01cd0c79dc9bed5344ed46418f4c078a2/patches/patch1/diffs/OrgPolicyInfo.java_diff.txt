1,15d0
< /*
<  * Copyright 2020 Google LLC
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *       http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
18,21c3,5
< import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;
< import com.google.api.services.cloudresourcemanager.model.ListPolicy;
< import com.google.api.services.cloudresourcemanager.model.OrgPolicy;
< import com.google.api.services.cloudresourcemanager.model.RestoreDefault;
---
> import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;
> import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;
> import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;
37a22
> {
53c38
<   private BoolPolicy boolPolicy;
---
>   private BooleanPolicy boolPolicy;
57d41
<   private RestoreDefault restoreDefault;
63d46
< 
116,119c99,102
<    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues
<    * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are
<    * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues
<    * and deniedValues must be unset.
---
>    * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues and
>    * deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are used
>    * to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues and
>    * deniedValues must be unset.
122d104
< 
125c107
<     private final List<java.lang.String> deniedValues;
---
>     private final List<String> deniedValues;
130c112
<         String allValues,
---
>         (String allValues,
197c179
<           allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
---
>           (allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
211c193
<           listPolicy.getAllValues(),
---
>           (listPolicy.getAllValues(),
221c203
<     private BoolPolicy boolPolicy;
---
>     private BooleanPolicy boolPolicy;
225d206
<     private RestoreDefault restoreDefault;
236d216
<       this.restoreDefault = info.restoreDefault;
241c221
<     Builder setBoolPolicy(BoolPolicy boolPolicy) {
---
>     Builder setBoolPolicy(BooleanPolicy boolPolicy) {
261,265d240
<     Builder setRestoreDefault(RestoreDefault restoreDefault) {
<       this.restoreDefault = restoreDefault;
<       return this;
<     }
< 
286d260
<     this.restoreDefault = builder.restoreDefault;
292c266
<   public BoolPolicy getBoolPolicy() {
---
>   public BooleanPolicy getBoolPolicy() {
311,315d284
<   /** Restores the default behavior of the constraint. */
<   public RestoreDefault getRestoreDefault() {
<     return restoreDefault;
<   }
< 
339d307
<         && Objects.equals(restoreDefault, policyInfo.restoreDefault)
346,347c314,315
<     return Objects.hash(
<         boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);
---
>     return Objects.hash
>         (boolPolicy, constraint, etag, policies, updateTime, version);
369d336
<     orgPolicyProto.setRestoreDefault(restoreDefault);
383c350
<       builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));
---
>       builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy());
385d351
<     builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());
388c354
<     builder.setVersion(orgPolicyProtobuf.getVersion());
---
>     builder.setVersion(orgPolicyProtobuf.getVersion);
