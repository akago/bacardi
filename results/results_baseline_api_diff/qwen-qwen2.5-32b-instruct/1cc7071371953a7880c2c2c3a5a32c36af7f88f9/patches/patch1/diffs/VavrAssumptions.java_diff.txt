1,12d0
< /*
<  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
<  * the License. You may obtain a copy of the License at
<  *
<  * http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
<  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
<  * specific language governing permissions and limitations under the License.
<  *
<  * Copyright 2017-2022 the original author or authors.
<  */
24,33c12,18
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.scaffold.TypeValidation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.matcher.ElementMatchers;
40,43d24
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
< import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
< 
46,49c27
<     /**
<      * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.
<      * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.
<      */
---
> {
51,53c29
<             .with(new AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
< 
<     private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
---
>             .with(new net.bytebuddy.implementation.bind.annotation.AuxiliaryType.NamingStrategy.SuffixingRandom("Assertj$Assumptions"));
55c31
<     private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);
---
>     private static final MethodDelegation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);
57c33
<     private static final class AssumptionMethodInterceptor {
---
>     private static final net.bytebuddy.dynamic.loading.ClassLoadingStrategy.CachingTypeCache CACHE = new net.bytebuddy.dynamic.loading.ClassLoadingStrategy.CachingTypeCache();
58a35,36
>     private static final class AssumptionMethodInterceptor
>     {
60,61c38,41
<         public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {
<             try {
---
>         public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception
>         {
>             try
>             {
63c43,44
<                 if (result != assertion && result instanceof AbstractVavrAssert) {
---
>                 if (result != assertion && result instanceof AbstractVavrAssert)
>                 {
68c49,51
<             } catch (AssertionError e) {
---
>             }
>             catch (AssertionError e)
>             {
74,84c57,58
<     /**
<      * Creates a new instance of <code>{@link EitherAssert}</code> assumption.
<      *
<      * @param <LEFT>  type of the left value contained in the {@link Either}.
<      * @param <RIGHT> type of the right value contained in the {@link Either}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {
---
>     public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual)
>     {
88,97c62,63
<     /**
<      * Creates a new instance of <code>{@link LazyAssert}</code> assumption.
<      *
<      * @param <VALUE>    type of the value contained in the {@link Lazy}.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {
---
>     public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual)
>     {
101,111c67,68
<     /**
<      * Creates a new instance of <code>{@link MapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the map.
<      * @param <V>    the type of values in the map.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {
---
>     public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual)
>     {
115,125c72,73
<     /**
<      * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.
<      *
<      * @param <K>    the type of keys in the multimap.
<      * @param <V>    the type of values in the multimap.
<      * @param actual the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {
---
>     public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual)
>     {
129,138c77,78
<     /**
<      * Creates a new instance of <code>{@link OptionAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link Option}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {
---
>     public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual)
>     {
142,164c82,83
<     /**
<      * Creates a new instance of <code>{@link SetAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Set}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {
<         return asAssumption(SetAssert.class, Set.class, actual);
<     }
< 
<     /**
<      * Creates a new instance of <code>{@link SeqAssert}</code> assumption.
<      *
<      * @param <ELEMENT> type of elements contained in the {@link Seq}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {
---
>     public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual)
>     {
168,177c87,88
<     /**
<      * Creates a new instance of <code>{@link TryAssert}</code> assumption.
<      *
<      * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.
<      * @param actual    the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {
---
>     public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual)
>     {
181,191c92,93
<     /**
<      * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.
<      *
<      * @param <INVALID> type of the value in the case of the invalid {@link Validation}.
<      * @param <VALID>   type of the value in the case of the valid {@link Validation}.
<      * @param actual  the actual value.
<      * @return the created assumption for assertion object.
<      */
<     @CheckReturnValue
<     @SuppressWarnings("unchecked")
<     public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {
---
>     public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual)
>     {
197,198c99,101
<                                                               Object actual) {
<         return asAssumption(assertionType, array(actualType), array(actual));
---
>                                                                Object actual)
>     {
>         return asAssumption(assertionType, new Class<?>[]{actualType}, new Object[]{actual});
203,204c106,109
<                                                       Object... constructorParams) {
<         try {
---
>                                                       Object... constructorParams)
>     {
>         try
>         {
207,208c112,115
<             return constructor.newInstance(constructorParams);
<         } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {
---
>             return constructor.newInstance(constructorParam);
>         }
>         catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e)
>         {
213,215c120,122
<     @SuppressWarnings("unchecked")
<     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {
<         SimpleKey cacheKey = new SimpleKey(assertClass);
---
>     private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertionType)
>     {
>         net.bytebuddy.dynamic.loading.ClassLoadingStrategy.CachingTypeCache.SimpleKey cacheKey = new net.bytebuddy.dynamic.loading.ClassLoadingStrategy.CachingTypeCache.SimpleKey(assertionType);
218c125,126
<                 () -> generateAssumptionClass(assertClass));
---
>                 () -> generateAssumptionClass(assertionType));
>         );
221c129,130
<     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {
---
>     private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType)
>     {
223c132
<                 .method(any())
---
>                 .method(ElementMatchers.any())
226c135
<                 .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))
---
>                 .load(VavrAssumptions.class.getClassLoader())
230c139,140
<     private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {
---
>     private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException
>     {
243,244c153,156
<     private static Class<?> getAssumptionClass(String className) {
<         try {
---
>     private static Class<?> getAssumptionClass(String className)
>     {
>         try
>         {
246c158,160
<         } catch (ClassNotFoundException e) {
---
>         }
>         catch (ClassNotFoundException e)
>         {
251,252c165,166
<     private static RuntimeException assumptionNotMet(Class<?> exceptionClass,
<                                                      AssertionError e) throws ReflectiveOperationException {
---
>     private static RuntimeException assumptionNotMet(Class<?> exceptionClass, AssertionErrorError e) throws ReflectiveOperationException
>     {
257,259c171,172
<     // for method that change the object under test (e.g. extracting)
<     private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {
<         // @format:off
---
>     private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion)
>     {
261,269c174,178
<         if (assertion instanceof LazyAssert) return asAssumption(LazyAssert.class, Lazy.class, actual);
<         if (assertion instanceof EitherAssert) return asAssumption(EitherAssert.class, Either.class, actual);
<         if (assertion instanceof MapAssert) return asAssumption(MapAssert.class, Map.class, actual);
<         if (assertion instanceof OptionAssert) return asAssumption(OptionAssert.class, Option.class, actual);
<         if (assertion instanceof SeqAssert) return asAssumption(SeqAssert.class, Seq.class, actual);
<         if (assertion instanceof TryAssert) return asAssumption(TryAssert.class, Try.class, actual);
<         if (assertion instanceof ValidationAssert) return asAssumption(ValidationAssert.class, Validation.class, actual);
<         // @format:on
<         // should not arrive here
---
>         if (actual instanceof AbstractVavrAssert)
>         {
>             final AbstractVavrAssert<?, ?> assumption = asAssumption((AbstractVavrAssert<?, ?>) actual);
>             return assumption.withAssertionState(assertion);
>         }
272d180
< 
