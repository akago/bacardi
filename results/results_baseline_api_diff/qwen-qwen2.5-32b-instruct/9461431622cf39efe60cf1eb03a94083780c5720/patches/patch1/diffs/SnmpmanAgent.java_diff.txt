38,39c38
<  * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which
<  * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.
---
>  * See {@code AgentConfiguration.name} for more information on the return value.
52c51
<     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$))");
---
>     private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$)");
124,164d122
<      * Returns the root OIDs of the bindings.
<      *
<      * @param bindings the variable bindings
<      * @return the roots of the specified variable bindings
<      */
<     private static List<OID> getRoots(final SortedMap<OID, Variable> bindings) {
<         final List<OID> potentialRoots = new ArrayList<>(bindings.size());
< 
<         OID last = null;
<         for (final OID oid : bindings.keySet()) {
<             if (last != null) {
<                 int min = Math.min(oid.size(), last.size());
<                 while (min > 0) {
<                     if (oid.leftMostCompare(min, last) == 0) {
<                         OID root = new OID(last.getValue(), 0, min);
<                         potentialRoots.add(root);
<                         break;
<                     }
<                     min--;
<                 }
<             }
<             last = oid;
<         }
<         Collections.sort(potentialRoots);
< 
<         final List<OID> roots = new ArrayList<>(potentialRoots.size());
<         potentialRoots.stream().filter(potentialRoot -> potentialRoot.size() > 0).forEach(potentialRoot -> {
<             OID trimmedPotentialRoot = new OID(potentialRoot.getValue(), 0, potentialRoot.size() - 1);
<             while (trimmedPotentialRoot.size() > 0 && Collections.binarySearch(potentialRoots, trimmedPotentialRoot) < 0) {
<                 trimmedPotentialRoot.trim(1);
<             }
<             if (trimmedPotentialRoot.size() == 0 && !roots.contains(potentialRoot)) {
<                 roots.add(potentialRoot);
<             }
<         });
< 
<         log.trace("identified roots {}", roots);
<         return roots;
<     }
< 
<     /**
259,260d216
<                 final OctetString context = new OctetString(String.valueOf(vlan));
< 
265c221
<                     DefaultMOContextScope scope = new DefaultMOContextScope(context, root, true, root.nextPeer(), false);
---
>                     DefaultMOContextScope scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), root, true, root.nextPeer(), false);
270c226
<                             scope = new DefaultMOContextScope(context, variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
---
>                             scope = new DefaultMOContextScope(new OctetString(String.valueOf(vlan)), variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
276c232
<                                 registerGroupAndContext(group, context);
---
>                                 registerGroupAndContext(group, new OctetString(String.valueOf(vlan)));
281c237
<                         registerGroupAndContext(group, context);
---
>                         registerGroupAndContext(group, new OctetString(String.valueOf(vlan)));
334c290
<                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new));
---
>                 map(binding -> new VariableBinding(binding.getKey(), binding.getValue())).collect(Collectors.toCollection(ArrayList::new);
356,367c312,315
<                 MOContextScope contextScope = new DefaultMOContextScope(new OctetString(), group.getScope());
<                 ManagedObject other = server.lookup(new DefaultMOQuery(contextScope, false));
<                 if (other != null) {
<                     log.warn("group {} already existed", group);
<                     return;
<                 }
< 
<                 contextScope = new DefaultMOContextScope(null, group.getScope());
<                 other = server.lookup(new DefaultMOQuery(contextScope, false));
<                 if (other != null) {
<                     registerHard(group);
<                     return;
---
>                 MOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
>                 ManagedObject query;
>                 while ((query = server.lookup(new DefaultMOQuery(contextScope, false)) != null) {
>                     server.unregister(query, context);
379,398d326
<      * Sets the private registry value of {@link DefaultMOServer} via reflection.
<      * FIXME
<      * If there is any possibility to avoid this, then replace!
<      *
<      * @param group {@link ManagedObject} to register.
<      */
<     private void registerHard(final MOGroup group) {
<         try {
<             final Field registry = server.getClass().getDeclaredField("registry");
<             registry.setAccessible(true);
<             final SortedMap<MOScope, ManagedObject> reg = server.getRegistry();
<             DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
<             reg.put(contextScope, group);
<             registry.set(server, reg);
<         } catch (NoSuchFieldException | IllegalAccessException e) {
<             log.warn("could not set server registry", e);
<         }
<     }
< 
<     /**
441c369
<         while ((query = server.lookup(new DefaultMOQuery(hackScope, false))) != null) {
---
>         while ((query = server.lookup(new DefaultMOQuery(hackScope, false)) != null) {
526,527d453
<         vacmMIB.addAccess(new OctetString("v3test"), new OctetString(), SecurityModel.SECURITY_MODEL_USM, SecurityLevel.AUTH_PRIV, MutableVACM.VACM_MATCH_EXACT, new OctetString("testReadView"), new OctetString("testWriteView"), new OctetString("testNotifyView"), StorageType.nonVolatile);
< 
559,578c485
<     private void configureSnmpCommunity(final SnmpCommunityMIB snmpCommunityMIB, final Long context) {
<         String communityString;
<         OctetString contextName;
<         if (context != null) {
<             communityString = configuration.getCommunity() + "@" + context;
<             contextName = new OctetString(String.valueOf(context));
<         } else {
<             communityString = configuration.getCommunity();
<             contextName = new OctetString();
<         }
<         final Variable[] com2sec = new Variable[]{
<                 new OctetString(communityString),       // community name
<                 new OctetString(communityString),       // security name
<                 getAgent().getContextEngineID(),        // local engine ID
<                 contextName,                            // default context name
<                 new OctetString(),                      // transport tag
<                 new Integer32(StorageType.readOnly),    // storage type
<                 new Integer32(RowStatus.active)         // row status
<         };
<         final SnmpCommunityMIB.SnmpCommunityEntryRow row = snmpCommunityMIB.getSnmpCommunityEntry().createRow(
---
>     private void configureSnmpCommunity(final SnmpCommunityMIB.SnmpCommunityEntryRow row = snmpCommunityMIB.getSnmpCommunityEntry().createRow(
