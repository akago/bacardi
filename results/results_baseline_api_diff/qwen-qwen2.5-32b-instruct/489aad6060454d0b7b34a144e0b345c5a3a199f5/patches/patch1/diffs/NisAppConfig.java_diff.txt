3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
21d21
< import org.nem.nis.pox.pos.PosImportanceCalculator;
103c103
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c108,114
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(prop.getProperty("flyway.locations").split(","));
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(configuration);
129c130
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
---
>                 return new DefaultBlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
197a199,237
>         // region mappers
> 
>         @Bean
>         public Flyway flyway() throws IOException {
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(prop.getProperty("flyway.locations").split(","));
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 return new Flyway(configuration);
>         }
> 
>         // endregion
> 
>         // region other beans
> 
>         @Bean
>         public DataSource dataSource() throws IOException {
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 // replace url parameters with values from configuration
>                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
>                                 configuration.getNetworkName());
> 
>                 final DriverManagerDataSource dataSource = new DriverManagerDataSource();
>                 dataSource.setDriverClassName(prop.getProperty("jdbc.driverClassName"));
>                 dataSource.setUrl(jdbcUrl);
>                 dataSource.setUsername(prop.getProperty("jdbc.username"));
>                 dataSource.setPassword(prop.getProperty("jdbc.password"));
>                 return dataSource;
>         }
> 
