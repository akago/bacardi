1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
29a7,10
> import org.cactoos.Func;
> import org.cactoos.IterableOf;
> import org.cactoos.Scalar;
> import org.cactoos.Text;
30a12
> import org.cactoos.iterable.Filtered;
36,38d17
< import org.cactoos.scalar.CheckedScalar;
< import org.cactoos.scalar.Or;
< import org.cactoos.scalar.UncheckedScalar;
96,102c75,77
<      * @todo #65:30min Complete Wallet implementations with id, public RSA
<      *  key and network id. Wallets.create(Long, String, String) must
<      *  create a Wallet with these strings set and a constructor must be
<      *  added to all Walletl realizations (Wallet(final long id, final String
<      *  pubkey, final String network, final Transaction... transactions). After
<      *  completing these implementations fix tests that uses Wallets.create()
<      *  and all Wallet realizations.
---
>      * @todo #65:30min Implement key method. This should return the
>      *  public RSA key of the wallet owner in Base64. Also add a unit test
>      *  to replace WalletTest.keyIsNotYetImplemented().
134c109
<          * Constructor.
---
>          * Ctor.
165,166c140,172
<         public Wallet merge(final Wallet other) {
<             return other;
---
>         public Wallet merge(final Wallet other) throws IOException {
>             if (other.id() != this.id()) {
>                 throw new IOException(
>                     new UncheckedText(
>                         new FormattedText(
>                             "Wallet ID mismatch, ours is %d, theirs is %d",
>                             other.id(),
>                             this.id()
>                         )
>                     ).asString()
>                 );
>             }
>             final Iterable<Transaction> ledger = this.ledger();
>             final Iterable<Transaction> candidates = new Filtered<>(
>                 incoming -> new Filtered<>(
>                     origin -> new Func<Boolean, Transaction>() {
>                         @Override
>                         public Boolean apply(final Transaction input) {
>                             return incoming.equals(origin)
>                                 || (incoming.id() == origin.id()
>                                     && incoming.bnf().equals(origin.bnf()))
>                                 || (incoming.id() == origin.id() && incoming.amount() < 0L)
>                                 || incoming.prefix().equals(origin.prefix());
>                         }
>                     },
>                     ledger
>                 ).isEmpty(),
>                 other.ledger()
>             );
>             return new Wallet.Fake(
>                 this.id(),
>                 new Joined<Transaction>(ledger, candidates)
>             );
171c177,189
<             return this.transactions;
---
>             return new Mapped<>(
>                 txt -> new RtTransaction(txt.asString()),
>                 new Skipped<>(
>                     new ListOf<>(
>                         new SplitText(
>                             new TextOf(this.path),
>                             "\\n"
>                         )
>                     ),
>                     // @checkstyle MagicNumberCheck (1 line)
>                     5
>                 )
>             );
173a192,194
>         // @todo #54:30min Implement key method. This should return the
>         //  public RSA key of the wallet owner in Base64. Also add a unit test
>         //  to replace WalletTest.keyIsNotYetImplemented().
176c197,199
<             return Long.toString(this.id);
---
>             throw new UnsupportedOperationException(
>                 "key() not yet supported"
>             );
201,202c224,227
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return new Scalar<Long>() {
>                 @Override
>                 public Long value() throws Exception {
>                     return Long.parseUnsignedLong(
211,213c236,238
<                 ),
<                 e -> new IOException(e)
<             ).value();
---
>                     );
>                 }
>             }.value();
231,232c256
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
---
>         //  wallet (which exists at the node), it’s ignored;
249,258c273,282
<                     origin -> new UncheckedScalar<>(
<                         new Or(
<                             () -> incoming.equals(origin),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.bnf().equals(origin.bnf()),
<                             () -> incoming.id() == origin.id()
<                                 && incoming.amount() < 0L,
<                             () -> incoming.prefix().equals(origin.prefix())
<                         )
<                     ).value(),
---
>                     origin -> new Func<Boolean, Transaction>() {
>                         @Override
>                         public Boolean apply(final Transaction input) {
>                             return incoming.equals(origin)
>                                 || (incoming.id() == origin.id()
>                                     && incoming.bnf().equals(origin.bnf()))
>                                 || (incoming.id() == origin.id() && incoming.amount() < 0L)
>                                 || incoming.prefix().equals(origin.prefix());
>                         }
>                     },
