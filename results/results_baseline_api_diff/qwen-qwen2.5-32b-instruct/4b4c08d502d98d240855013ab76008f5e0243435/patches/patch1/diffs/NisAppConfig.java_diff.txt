3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
93c94
<                                 configuration.getNetworkName());
---
>                                 configuration.getNetworkInfo().getName());
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
105,106c106,110
<                 final Properties prop = new Properties();
<                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
---
>                 final ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setLocations(prop.getProperty("flyway.locations").split(","));
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
108,113c112
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 return new Flyway(config);
129,130c128,129
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
<                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
---
>                 return new DefaultBlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.transactionValidatorFactory(),
>                                 this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
189,192c188,189
<         public SingleTransactionValidator transactionValidator() {
<                 // this is only consumed by the TransactionController and used in transaction/prepare,
<                 // which should propagate incomplete transactions
<                 return this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();
---
>         public Function<Address, Collection<Address>> cosignatoryLookup() {
>                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
195c192,195
<         // endregion
---
>         @Bean
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
>         }
198c198,269
<         public Harvester harvester() {
---
>         public NisMain nisMain() {
>                 return new NisMain(this.blockDao, this.nisCache(), System::exit);
>         }
> 
>         @Bean
>         public BlockChain blockChain() {
>                 return new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());
>         }
> 
>         @Bean
>         public BlockChainServices blockChainServices() {
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
>                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public BlockChainUpdater blockChainUpdater() {
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public BlockChainContextFactory blockChainContextFactory() {
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
>                                 this.unconfirmedTransactions());
>         }
> 
>         @Bean
>         public SynchronizedAccountCache accountCache() {
>                 return new SynchronizedAccountCache(new DefaultAccountCache());
>         }
> 
>         @Bean
>         public SynchronizedAccountStateCache accountStateCache() {
>                 return new SynchronizedAccountStateCache(new DefaultAccountStateCache());
>         }
> 
>         @Bean
>         public SynchronizedHashCache transactionHashCache() {
>                 return new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));
>         }
> 
>         @Bean
>         public SynchronizedPoxFacade poxFacade() {
>                 return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));
>         }
> 
>         @Bean
>         public SynchronizedNamespaceCache namespaceCache() {
>                 return new SynchronizedNamespaceCache(new DefaultNamespaceCache());
>         }
> 
>         @Bean
>         public NisConfiguration nisConfiguration() {
>                 return new NisConfiguration();
>         }
> 
>         @Bean
>         public TimeProvider timeProvider() {
>                 return CommonStarter.TIME_PROVIDER;
>         }
> 
>         @Bean
>         public TrustProvider trustProvider() {
>                 final int LOW_COMMUNICATION_NODE_WEIGHT = 30;
>                 final int TRUST_CACHE_TIME = 15 * 60;
>                 return new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,
>                                 this.timeProvider());
>         }
> 
>         @Bean
>         public NisPeerNetworkHost nisPeerNetworkHost() {
205c276
<                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
---
>                 return new NisPeerNetworkHost(this.nisCache(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
209a281,286
>         public Harvester harvester() {
>                 return new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
>                                 this.blockChain().getGenerator());
>         }
> 
>         @Bean
296,300d372
<         public HibernateTransactionManager transactionManager() throws IOException {
<                 return new HibernateTransactionManager(this.sessionFactory());
<         }
< 
<         @Bean
321,322c393
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),
<                                 this.nisConfiguration(), this.blockAnalyzer(), System::exit);
---
>                 return new NisMain(this.blockDao, this.nisCache(), System::exit);
371,381c442
<         public NisConfiguration nisConfiguration() {
<                 return new NisConfiguration();
<         }
< 
<         @Bean
<         public TimeProvider timeProvider() {
<                 return CommonStarter.TIME_PROVIDER;
<         }
< 
<         @Bean
<         public TrustProvider trustProvider() {
---
>         public TrustProvider trsutProvider() {
389,393d449
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
