3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
108,113c109,114
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setLocations(prop.getProperty("flyway.locations").split(","));
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 return new Flyway(config);
197a199,205
>         // region mappers
> 
>         @Bean
>         public NisMain nisMain() {
>                 return new NisMain(this.blockDao, this.nisCache(), this.nisConfiguration());
>         }
> 
245d252
<         @SuppressWarnings("serial")
279,280c286,367
<         public Supplier<BlockHeight> lastBlockHeight() {
<                 return this.blockChainLastBlockLayer::getLastBlockHeight;
---
>         public SynchronizedPoxFacade poxFacade() {
>                 return new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));
>         }
> 
>         @Bean
>         public HibernateTransactionManager transactionManager() throws IOException {
>                 return new HibernateTransactionManager(this.sessionFactory());
>         }
> 
>         @Bean
>         public NisMain nisMain() {
>                 final NisConfiguration nisConfiguration = this.nisConfiguration();
> 
>                 // initialize network info
>                 NetworkInfos.setDefault(nisConfiguration.getNetworkInfo());
> 
>                 // initialize other globals
>                 final BlockHeight mosaicRedefinitionForkHeight = nisConfiguration.getForkConfiguration().getMosaicRedefinitionForkHeight();
> 
>                 NemNamespaceEntry.setDefault(mosaicRedefinitionForkHeight);
>                 return new NisMain(this.blockDao, this.nisCache(), nisConfiguration);
>         }
> 
>         @Bean
>         public DataSource dataSource() throws IOException {
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 // replace url parameters with values from configuration
>                 final String jdbcUrl = prop.getProperty("jdbc.url").replace("${nem.folder}", nemFolder).replace("${nem.network}",
>                                 configuration.getNetworkName());
> 
>                 final DriverManagerDataSource dataSource = new DriverManagerDataSource();
>                 dataSource.setDriverClassName(prop.getProperty("jdbc.driverClassName"));
>                 dataSource.setUrl(jdbcUrl);
>                 dataSource.setUsername(prop.getProperty("jdbc.username"));
>                 dataSource.setPassword(prop.getProperty("jdbc.password"));
>                 return dataSource;
>         }
> 
>         @Bean
>         public Flyway flyway() throws IOException {
>                 final Properties prop = new Properties();
>                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
> 
>                 final ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setLocations(prop.getProperty("flyway.locations").split(","));
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 return new Flyway(config);
>         }
> 
>         @Bean
>         @DependsOn("flyway")
>         public SessionFactory sessionFactory() throws IOException {
>                 return SessionFactoryLoader.load(this.dataSource());
>         }
> 
>         @Bean
>         public BlockChain blockChain() {
>                 return new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());
>         }
> 
>         @Bean
>         public BlockChainServices blockChainServices() {
>                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
>                                 this.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         @Bean
>         public BlockChainUpdater blockChainUpdater() {
>                 return new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),
>                                 this.unconfirmedTransactions(), this.nisConfiguration());
>         }
> 
>         @Bean
>         public BlockChainContextFactory blockChainContextFactory() {
>                 return new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),
>                                 this.unconfirmedTransactions());
