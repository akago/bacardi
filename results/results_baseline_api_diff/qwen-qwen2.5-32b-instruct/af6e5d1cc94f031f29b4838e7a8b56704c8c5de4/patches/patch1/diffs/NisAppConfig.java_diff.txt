3a4
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
103c104
<         @Bean(initMethod = "migrate")
---
>         @Bean
105,106c106,110
<                 final Properties prop = new Properties();
<                 prop.load(NisAppConfig.class.getClassLoader().getResourceAsStream("db.properties"));
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setLocations(new String[]{"db/migration"});
>                 configuration.setValidateOnMigrate(Boolean.valueOf(true));
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
108,113c112
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 return new Flyway(configuration);
117d115
<         @DependsOn("flyway")
129c127
<                 return new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
---
>                 return new DefaultBlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),
197a196,205
>         // region mappers
> 
>         @Bean
>         public NisMain nisMain() {
>                 return new NisMain(this.blockDao, this.nisCache(), this.nisDbModelToModelMapper(), this.nisConfiguration(), this.blockChainLastBlockLayer,
>                                 this.unconfirmedTransactions(), this.nisConfiguration().getForkConfiguration());
>         }
> 
>         // endregion
> 
245d252
<         @SuppressWarnings("serial")
289,291c296,297
<                 final UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,
<                                 this.nisCache());
<                 return new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);
---
> 
>                 return new DefaultUnconfirmedTransactions(unconfirmedStateFactory, this.nisCache());
326,327c332,333
<                 return new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(), nisConfiguration,
<                                 this.blockAnalyzer(), System::exit);
---
>                 return new NisMain(this.blockDao, this.nisCache(), this.nisDbModelToModelMapper(), nisConfiguration,
>                                 this.blockChainLastBlockLayer, this.unconfirmedTransactions(), nisConfiguration.getForkConfiguration());
330,331c336,337
<         @SuppressWarnings("serial")
<         private Supplier<WeightedBalances> weighedBalancesSupplier() {
---
>         @Bean
>         public Supplier<WeightedBalances> weighedBalancesSupplier() {
335c341
<                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);
---
>                                 this.put(BlockChainFeature.WB_IMMEDIATE_VESTING, AlwaysVestedBalances::new);
344,376d349
<         public BlockAnalyzer blockAnalyzer() {
<                 final int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();
<                 final ForkConfiguration forkConfiguration = this.nisConfiguration().getForkConfiguration();
<                 return new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),
<                                 estimatedBlocksPerYear, forkConfiguration);
<         }
< 
<         @Bean
<         public HttpConnectorPool httpConnectorPool() {
<                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
<                                 ? CommunicationMode.BINARY
<                                 : CommunicationMode.JSON;
<                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
<         }
< 
<         @Bean
<         public NisPeerNetworkHost nisPeerNetworkHost() {
<                 final HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());
< 
<                 final PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);
< 
<                 final CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());
< 
<                 return new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),
<                                 this.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());
<         }
< 
<         @Bean
<         public NetworkHostBootstrapper networkHostBootstrapper() {
<                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
<         }
< 
<         @Bean
395,417c368,369
<         public NemConfigurationPolicy configurationPolicy() {
<                 return new NisConfigurationPolicy();
<         }
< 
<         @Bean
<         public ChainServices chainServices() {
<                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
<         }
< 
<         @Bean
<         public CommonStarter commonStarter() {
<                 return CommonStarter.INSTANCE;
<         }
< 
<         @Bean
<         public ValidationState validationState() {
<                 return NisCacheUtils.createValidationState(this.nisCache());
<         }
< 
<         @Bean
<         public LocalHostDetector localHostDetector() {
<                 return new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());
<         }
---
>         public NisPeerNetworkHost nisPeerNetworkHost() {
>                 final HarvestingTask harvestingTask = new HarvestingTask(this.nisCache(), this.blockChain(), this.harvester(), this.unconfirmedTransactions());
419,421c371,374
<         @Bean
<         public NodeCompatibilityChecker nodeCompatibilityChecker() {
<                 return new DefaultNodeCompatibilityChecker();
---
>                 final BlockGenerator generator = new BlockGenerator(this.nisCache(), harvestingTask, this.blockDao,
>                                 new BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));
>                 return new NisPeerNetworkHost(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),
>                                 generator);
425,436c378,379
<         public EnumSet<ObserverOption> observerOptions() {
<                 final EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);
<                 if (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {
<                         observerOptions.add(ObserverOption.NoHistoricalDataPruning);
<                 }
< 
<                 final BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();
<                 if (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {
<                         observerOptions.add(ObserverOption.NoOutlinkObserver);
<                 }
< 
<                 return observerOptions;
---
>         public NetworkHostBootstrapper networkHostBootstrapper() {
>                 return new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());
440,441c383,387
<         public Function<Address, Collection<Address>> cosignatoryLookup() {
<                 return a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();
---
>         public HttpConnectorPool httpConnectorPool() {
>                 final CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()
>                                 ? CommunicationMode.BINARY
>                                 : CommunicationMode.JSON;
>                 return new HttpConnectorPool(communicationMode, this.outgoingAudits());
445,446c391,392
<         public MosaicIdCache mosaicIdCache() {
<                 return new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());
---
>         public ChainServices chainServices() {
>                 return new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());
