1,6d0
< /*
<  * Copyright  2020 The BtrPlace Authors. All rights reserved.
<  * Use of this source code is governed by a LGPL-style
<  * license that can be found in the LICENSE.txt file.
<  */
< 
15c9
< import com.github.javaparser.printer.PrettyPrinterConfiguration;
---
> import com.github.javaparser.printer.configuration.PrettyPrinterConfiguration;
41d34
< import java.util.stream.Collectors;
43,45d35
< /**
<  * @author Fabien Hermenier
<  */
57c47
<     ////@Test
---
>     //@Test
59a50
> 
67,73c58
<                 Bench.population = p;
<                 Bench.scale = s;
<                 List<TestCampaign> campaigns = sc.testGroups("sides");
<                 if (campaigns.isEmpty()) {
<                     Assert.fail("Nothing to test");
<                 }
<                 campaigns.stream().forEach(c -> System.out.println(c.go().toString()));
---
>                 System.out.println(sc.test(Bench.class).stream().mapToInt(TestCampaign::go).sum());
82,84d66
<         //Warm-up
<         Bench.transitions = true;
< 
88,101d69
<      /*   for (int i = 10; i <= 30; i+=2) {
<             Bench.transitions = false;
<             Bench.population = 100;
<             Bench.scale = i;
<             System.out.println("--- scaling factor " + i + "; transitions= " + Bench.transitions +" ---");
<             Bench.report = new CSVReport(p,"");
<             System.out.println(sc.test(Bench.class).stream().mapToInt(TestCampaign::go).sum());
<         }*/
< 
< 
<         //GOGO
<         p = Paths.get(root, "testing-speed-notrans.csv");
<         Files.deleteIfExists(p);
<         Bench.mode = Bench.Mode.DEFAULT;
102a71
>             System.out.println("--- scaling factor " + i + "; transitions= " + Bench.transitions +" ---");
106d74
<             System.out.println("--- scaling factor " + i + "; transitions= " + Bench.transitions + " ---");
126,186d93
<         SpecScanner sc = new SpecScanner();
<         List<Constraint> l = sc.scan();
<         System.out.println(l.stream().map(Constraint::pretty).collect(Collectors.joining("\n")));
< 
<         Path path = Paths.get(root, "inv.csv");
<         String out = l.stream()
<                 .map(c -> Integer.toString(c.proposition().toString().length()))
<                 .collect(Collectors.joining("\n"));
<         Files.write(path, out.getBytes());
< 
<         List<Integer> funcs = new ArrayList<>();
<         List<Path> paths = Files.list(Paths.get("safeplace/src/main/java/org/btrplace/safeplace/spec/term/func"))
<                 .filter(Files::isRegularFile).collect(Collectors.toList());
<         for (Path p : paths) {
<             try (InputStream in = Files.newInputStream(p)) {
<                 ParseResult<CompilationUnit> cu = new JavaParser().parse(in);
<                 new FunctionVisitor(funcs).visit(cu.getResult().get(), null);
<             }
<         }
<         path = Paths.get(root, "func.csv");
<         out = funcs.stream()
<                         .map(c -> Integer.toString(c))
<                         .collect(Collectors.joining("\n"));
<         Files.write(path, out.getBytes());
<     }
< 
<     //@Test
<     public void funcFrequency() throws Exception {
<         SpecScanner sc = new SpecScanner();
<         List<Constraint> l = sc.scan();
<         Pattern p = Pattern.compile("([a-zA-Z]+\\()+");
<         Map<String, Integer> map = new HashMap<>();
<         for (Constraint c : l) {
<             String prop = c.proposition().toString();
<             Matcher m = p.matcher(prop);
<             System.out.println(prop);
<             int start = 0;
<             while (m.find(start)) {
<                 String name = prop.substring(m.start(), m.end() - 1);
<                 if (Character.isLowerCase(name.charAt(0))) {
<                     if (!map.containsKey(name)) {
<                         map.put(name, 1);
<                     } else {
<                         map.put(name, map.get(name) + 1);
<                     }
<                 }
<                 System.out.println("\t" + prop.substring(m.start(), m.end() - 1));
<                 start = m.end();
<             }
<         }
<         System.out.println(map);
<         Path out = Paths.get(root, "func-freq.csv");
<         Files.deleteIfExists(out);
<         String cnt = "name;freq\n" +
<                     map.entrySet().stream().map(e -> e.getKey()+";" + e.getValue() + "\n").collect(Collectors.joining());
<         Files.write(out, cnt.getBytes());
< 
<     }
< 
<     //@Test
<     public void specVsCheckers() throws Exception {
188,197d94
<         Bench.population = 500;
<         Bench.scale = 10;
<         Path p = Paths.get(root, "verifier_stable.csv");
<         Files.deleteIfExists(p);
<         boolean first = true;
<         for (Verifier v : new Verifier[]{new SpecVerifier(), new CheckerVerifier()}) {
<             if (first) {
<                 Bench.mode = Bench.Mode.SAVE;
<                 first = !first;
<             } else {
199,207c96,97
<             }
<             System.out.println("--- Verifier: " + v.getClass() + " ---");
<             Bench.report = new CSVReport(p, v.id());
<             sc.test(Bench.class).forEach(c -> {
<                 c.verifyWith(v);
<                 System.out.println(c.go().toString());
<             });
<         }
<     }
---
>         Bench.population = 1000;
>         Bench.scale = 5;
209,227c99,100
<     //@Test
<     public void discreteVsContinuous() throws Exception {
<         TestScanner sc = newScanner();
<         Bench.population = 500;
<         Bench.scale = 10;
<         Path path = Paths.get(root, "restriction_stable.csv");
<         Files.deleteIfExists(path);
<         boolean first = true;
<         for (Restriction r : EnumSet.allOf(Restriction.class)) {
<             if (first) {
<                 Bench.mode = Bench.Mode.SAVE;
<                 first = !first;
<             } else {
<                 Bench.mode = Bench.Mode.REPLAY;
<             }
<             System.out.println("--- Restriction: " + r + "; replay= " + first + " ---");
<             Bench.report = new CSVReport(path, r.toString());
<             sc.testGroups("bi").forEach(x -> {
<                 Bench.restrictions = EnumSet.of(r);
---
>         sc.test(Bench.class).forEach(x -> {
>             x.reportTo(new StoredReport(Paths.get("xp-dsn", "errors.txt"), r -> !r.result().equals(Result.SUCCESS)));
231,233d103
<         //restore
<         Bench.restrictions = EnumSet.allOf(Restriction.class);
<     }
236c106
<     public void repairVsRebuild() throws Exception {
---
>     public void specVsCheckers() throws Exception {
259,313d128
<     //@Test
<     public void errors() throws Exception {
<         TestScanner sc = newScanner();
<         Bench.source = "xp-dsn";
<         Bench.mode = Bench.Mode.REPLAY;
<         Bench.population = 1000;
<         Bench.scale = 5;
<         Path p = Paths.get(root, "errors.csv");
<         Files.deleteIfExists(p);
<         Bench.report = new CSVReport(p, "");
<         sc.test(Bench.class).stream().forEach(x -> System.out.println(x.go()));
<     }
< 
<     //@Test
<     public void prettyErrors() throws Exception {
<         TestScanner sc = newScanner();
<         Bench.mode = Bench.Mode.REPLAY;
<         Bench.population = 1000;
<         Bench.scale = 5;
< 
<         sc.test(Bench.class).forEach(x -> {
<             x.reportTo(new StoredReport(Paths.get("xp-dsn", "errors.txt"), r -> !r.result().equals(Result.SUCCESS)));
<             System.out.println(x.go());
<         });
<     }
< 
< 
<     //@Test
<     //Extract the number of line of codes of tests
<     public void testSloc() throws Exception {
<         //Parse the legacy unit tests
<         List<Integer> unitTests = new ArrayList<>();
<         List<Path> paths = Files.list(Paths.get("choco/src/test/java/org/btrplace/scheduler/choco/constraint/")).filter(Files::isRegularFile).collect(Collectors.toList());
<         for (Path p : paths) {
<             try (InputStream in = Files.newInputStream(p)){
<                 ParseResult<CompilationUnit> cu = new JavaParser().parse(in);
<                 new UnitTestsVisitor(unitTests).visit(cu.getResult().get(), null);
<             }
<         }
< 
<         //Parse the new unit tests
<         List<Integer> safeTests = new ArrayList<>();
< 
<         try (InputStream in = Files.newInputStream(Paths.get("safeplace/src/test/java/org/btrplace/safeplace/testing/TestSafePlace.java"))){
<             ParseResult<CompilationUnit> cu = new JavaParser().parse(in);
<             new SafeplaceTestsVisitor(safeTests).visit(cu.getResult().get(), null);
<         }
< 
<         String sb = "testing;sloc\n" +
<                 unitTests.stream().map(i -> "btrPlace;" + i).collect(Collectors.joining("\n", "", "\n")) +
<                 safeTests.stream().map(i -> "safePlace;" + i).collect(Collectors.joining("\n", "", "\n"));
<         Path path = Paths.get(root, "sloc.csv");
<         Files.write(path, sb.getBytes());
<     }
< 
