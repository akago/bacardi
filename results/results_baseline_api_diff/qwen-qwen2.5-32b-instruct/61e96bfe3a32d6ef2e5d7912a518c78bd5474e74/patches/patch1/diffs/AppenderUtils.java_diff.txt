1,15d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  * 
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  * 
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  * 
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
22c7
< import ch.qos.logback.core.encoder.EncoderBase;
---
> import ch.qos.logback.core.encoder.Encoder;
38,40d22
< /**
<  * Utils to create logback appenders
<  */
48,51c30
<   /**
<    * Encoder for LogMessage objects.
<    */
<   public static class LogMessageEncoder extends EncoderBase<LogMessage> {
---
>   public static class LogMessageEncoder implements Encoder<LogMessage> {
57d35
<     @Override
60,61d37
<       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
<       // log.
63,64c39
<       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
<           bufferCapacity);
---
>       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os), bufferCapacity);
69c44
<     public void doEncode(LogMessage logMessage) throws IOException {
---
>     public byte[] encode(LogMessage logMessage) throws IOException {
70a46,48
>         byte[] bytes = new byte[0];
>         try (TTransport transport = new TFastFramedTransport(null)) {
>           TProtocol protocol = new TBinaryProtocol(transport);
72c50,52
<         framedTransport.flush();
---
>           bytes = transport.getBuffer().array();
>         }
>         return bytes;
79c59,64
<     public void close() throws IOException {
---
>     public void start() {
>     }
> 
>     @Override
>     public void stop() {
>       if (framedTransport != null) {
84,92c69,97
<   /**
<    * Create the basic thrift appender which logs to a file
<    * and rolls the file when it exceeds a certain size.
<    *
<    * @param basePath base directory the files are under.
<    * @param topic the topic name for the current appender.
<    * @param rotateThresholdKBytes threshold in kilobytes to rotate after.
<    * @param context the logback context.
<    */
---
>     @Override
>     public void setContext(Context context) {
>     }
> 
>     @Override
>     public Context getContext() {
>       return null;
>     }
> 
>     @Override
>     public void setProperty(String key, String value) {
>     }
> 
>     @Override
>     public String getProperty(String key) {
>       return null;
>     }
> 
>     @Override
>     public byte[] headerBytes() {
>       return new byte[0];
>     }
> 
>     @Override
>     public byte[] footerBytes() {
>       return new byte[0];
>     }
>   }
> 
99c104
<     RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();
---
>     RollingFileAppender<LogMessage> appender = new RollingFileAppender<>();
108c113
<     TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();
---
>     TimeBasedRollingPolicy<LogMessage> policy = new TimeBasedRollingPolicy<>();
115d119
<     // Also impose a max size per file policy.
