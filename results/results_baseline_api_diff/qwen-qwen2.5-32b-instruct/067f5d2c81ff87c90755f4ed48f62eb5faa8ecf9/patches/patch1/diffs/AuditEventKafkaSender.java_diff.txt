1,16d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
32a17,18
> import org.apache.thrift.protocol.TBinaryProtocol;
> import org.apache.thrift.protocol.TProtocolFactory;
47,51d32
< /**
<  *  LoggingAuditEventSender implementations that dequeue LoggingAuditEvent and send it to Kafka.
<  *
<  *  Each instance of this class should be executed in its own thread.
<  */
60,87c41,45
<   /**
<    *  When sender send audit events to Kafka,  it chooses a random partition and if it fails, it
<    *  will choose another GOOD partition, this retry will happen at most numOfPartitionsToTrySending
<    *  times before dropping the event. Note that, this is different from the retry handled by
<    *  kafka client
<    *  library when sending an event to a certain partition.
<    */
<   private static final int NUM_OF_PARTITIONS_TO_TRY_SENDING = 3;
< 
<   /**
<    *  maximum time to wait when sender tries to dequeue events before returning null.
<    */
<   private static final int DEQUEUE_WAIT_IN_SECONDS = 30;
< 
< 
<   /**
<    *   when gracefully shutting down the Sender, the calling thread sleeps for some time and let
<    *   the sender to send out audit events left in the queue if there are any.
<    *   stopGracePeriodInSeconds is the maximum time reserved and
<    *   stopGracePeriodInSeconds / THREAD_SLEEP_IN_SECONDS is the total rounds the calling thread
<    *   will sleep.
<    */
<   private static final int THREAD_SLEEP_IN_SECONDS = 10;
< 
<   /**
<    *  when gracefully shutting down the Sender, this field specifies maximum time for main thread
<    *  to wait, in order to let the sender send out audit events left in the queue if there are any.
<    */
---
>   private String topic;
>   private LinkedBlockingDeque<LoggingAuditEvent> queue;
>   private LoggingAuditStage stage;
>   private String host;
>   private String name;
89,115d46
< 
< 
<   /**
<    * Logging audit stage, can be THRIFTLOGGER, SINGER, MERCED and so on
<    */
<   private final LoggingAuditStage stage;
< 
<   /**
<    * host name
<    */
<   private final String host;
< 
<   /**
<    *  LinkedBlockingDequeue to store the LoggingAuditEvents.  The max capacity is specified when
<    *  creating this deque in the LoggingAuditClient.java
<    *
<    *  The AuditEventKafkaSender dequeue from the beginning of the deque, if does not send out event
<    *  successfully, it will enqueue this event to the beginning of the queue.  Note that, if enqueue
<    *  the failed event at the end of the queue, this event could be processed with quite some delay
<    *  and this is not the behavior we want.  That's we use LinkedBlockingDequeue,
<    *  not ArrayBlockingQueue.
<    */
<   private final LinkedBlockingDeque<LoggingAuditEvent> queue;
< 
<   /**
<    * KafkaProducer instance to send audit events
<    */
117,125c48
< 
<   /**
<    * Serialize key and value to byte[]
<    */
<   private TSerializer serializer = new TSerializer();
< 
<   /**
<    *  flag to control the start and stop of the executing thread.
<    */
---
>   private TSerializer serializer = new TSerializer(new TBinaryProtocol.Factory());
127,145d49
< 
<   /**
<    *  topic to store the audit events
<    */
<   private String topic;
< 
<   /**
<    *  name of this sender instance
<    */
<   private String name;
< 
<   /**
<    *  executing thread
<    */
<   private Thread thread;
< 
<   /**
<    *  List of PartitionInfo
<    */
147,150d50
< 
<   /**
<    *  last time when partition list was refreshed. we want to refresh partition list every 5 mins.
<    */
152,156d51
< 
<   /**
<    *  If sending out to one partition fails, this partition is added to set;
<    *  If sending out to one partition succeeds, this partition is removed if it was added before.
<    */
158,165d52
< 
<   /**
<    * For each event (identified by LoggingAuditHeaders, key of the map), track the number of tries
<    * for sending to Kafka. Each try will choose a different and partition that is not in the
<    * badPartitions.  When event is send out successfully or dropped, the corresponding entry in
<    * this map is removed.
<    */
< 
167,173d53
< 
<   /**
<    *  currentPartitionId specifies the partition of audit_event topic used to receive audit events.
<    *  The currentPartitionId will be reset in resetCurrentPartitionIdIfNeeded() method. This reduces
<    *  the number of TCP connections from audit client to the Kafka Cluster hosting the audit_event
<    *  topic.
<    */
188d67
< 
198d76
<     // refresh every 30 seconds
205,206c83,84
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
---
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_COUNT, 1,
210c88
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
---
>             (LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_PARTITIONS_REFRESH_ERROR, 1,
232,233c110,111
<           OpenTsdbMetricConverter.incr(
<               LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
---
>           OpenTsdbMetricConverter
>               .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_KAFKA_CURRENT_PARTITION_RESET, 1,
240,294c118
<       LOG.warn("After {} trials, set current partition to {}",
<           MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
< 
<     }
<   }
< 
<   /**
<    *  Sender dequeues LoggingAuditEvents and sends them to Kafka cluster. If send to one partition
<    *  fails, it will choose another partition. For each event, it will try at most
<    *  NUM_OF_PARTITIONS_TO_TRY_SENDING times (3 times) before dropping this event. Metrics are
<    *  used to track the queue size and usuage, number of events sent out to Kafka successfully, and
<    *  the number of events dropped.
<    */
<   @Override
<   public void run() {
<     LoggingAuditEvent event = null;
<     ProducerRecord<byte[], byte[]> record;
<     byte[] value = null;
< 
<     while (!cancelled.get()) {
<       try {
<         refreshPartitionIfNeeded();
<         if (currentPartitionId == -1){
<           Thread.sleep(100);
<           continue;
<         }
<         event = queue.poll(DEQUEUE_WAIT_IN_SECONDS, TimeUnit.SECONDS);
<         if (event != null) {
<           try {
<             value = serializer.serialize(event);
<             record = new ProducerRecord<>(this.topic, currentPartitionId , null, value);
<             kafkaProducer.send(record, new KafkaProducerCallback(event, currentPartitionId));
<           } catch (TException e) {
<             LOG.debug("[{}] failed to construct ProducerRecord because of serialization exception.",
<                 Thread.currentThread().getName(), e);
<             OpenTsdbMetricConverter
<                 .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_SERIALIZATION_EXCEPTION, 1,
<                     "host=" + host, "stage=" + stage.toString(),
<                     "logName=" + event.getLoggingAuditHeaders().getLogName());
<             eventTriedCount.remove(event.getLoggingAuditHeaders());
<           }
<         }
<       } catch (InterruptedException e) {
<         LOG.warn("[{}] got interrupted when polling the queue and while loop is ended!",
<             Thread.currentThread().getName(), e);
<         OpenTsdbMetricConverter.incr(
<             LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_DEQUEUE_INTERRUPTED_EXCEPTION, 1,
<                 "host=" + host, "stage=" + stage.toString());
<         break;
<       } catch (Exception e) {
<         LOG.warn("Exit the while loop and finish the thread execution due to exception: ", e);
<         OpenTsdbMetricConverter.incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_EXCEPTION, 1,
<             "host=" + host, "stage=" + stage.toString());
<         break;
<       }
---
>       LOG.warn("After {} trials, set current partition to {}", MAX_RETRIES_FOR_SELECTION_RANDOM_PARTITION, currentPartitionId);
298d121
< 
310d132
<       // if exception thrown (i.e. the send failed), the partition is added to badPartitions.
317,319d138
<       // retry the failed event by inserting it at the beginning of the deque.
<       // If number of tries reaches 3, meaning that 3 partitions have been tried sending to but
<       // still failed, this event is dropped.
350,353c169,170
<         LOG.debug(
<             "Enqueuing LoggingAuditEvent at head of the queue was interrupted in callback. "
<                 + "Drop this event");
<         eventTriedCount.remove(event.getLoggingAuditHeaders());
---
>         LOG.warn("[{}] got interrupted while waiting for [{}] to send out LoggingAuditEvents left "
>             + "in the queue.", Thread.currentThread().getName(), name, ex);
366,367d182
<           // if send is successful, remove the event from the map eventTriedCount if it was added
<           // LoggingAuditHeaders can uniquely identify an event.
369d183
<           // if send out successfully, remove the partition from the badPartitions if it was added.
375c189
<         LOG.warn("Exception throws in the callback. Drop this event {}", event, t);
---
>         LOG.warn("Exception is thrown in the callback. Drop this event {}", event, t);
383,385c197,241
<   /**
<    *  start the executing thread and let the Sender run.
<    */
---
>   public void run() {
>     LoggingAuditEvent event = null;
>     ProducerRecord<byte[], byte[]> record;
>     byte[] value = null;
> 
>     while (!cancelled.get()) {
>       try {
>         refreshPartitionIfNeeded();
>         if (currentPartitionId == -1){
>           Thread.sleep(100);
>           continue;
>         }
>         event = queue.poll(DEQUEUE_WAIT_IN_SECONDS, TimeUnit.SECONDS);
>         if (event != null) {
>           try {
>             value = serializer.serialize(event);
>             record = new ProducerRecord<>(this.topic, currentPartitionId , null, value);
>             kafkaProducer.send(record, new KafkaProducerCallback(event, currentPartitionId));
>           } catch (TException e) {
>             LOG.debug("[{}] failed to construct ProducerRecord because of serialization exception.",
>                 Thread.currentThread().getName(), e);
>             OpenTsdbMetricConverter
>                 .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_SERIALIZATION_EXCEPTION, 1,
>                     "host=" + host, "stage=" + stage.toString(),
>                     "logName=" + event.getLoggingAuditHeaders().getLogName());
>             eventTriedCount.remove(event.getLoggingAuditHeaders());
>           }
>         }
>       } catch (InterruptedException e) {
>         LOG.warn("[{}] got interrupted when polling the queue and while loop is ended!",
>             Thread.currentThread().getName(), e);
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_DEQUEUE_INTERRUPTED_EXCEPTION, 1,
>                 "host=" + host, "stage=" + stage.toString());
>         break;
>       } catch (Exception e) {
>         LOG.warn("Exit the while loop and finish the thread execution due to exception: ", e);
>         OpenTsdbMetricConverter
>             .incr(LoggingAuditClientMetrics.AUDIT_CLIENT_SENDER_EXCEPTION, 1,
>                 "host=" + host, "stage=" + stage.toString());
>         break;
>       }
>     }
>   }
> 
398,401d253
<   /**
<    *  reserve some time (by default 30 seconds at most)to let AuditEventKafkaSender to send out
<    *  LoggingAuditEvent in the queue and gracefully stop AuditEventKafkaSender.
<    */
433d284
< 
