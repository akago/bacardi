1d0
< 
6,15c5,9
< import javax.mvc.MvcContext;
< //https://www.mvc-spec.org/learn/cookbook/multilang_en.html
< /**
<  * Provides I18n messages for the UI per request. To get the correct locale, the method {@link MvcContext#getLocale()}
<  * is used. This method uses the built-in {@link javax.mvc.locale.LocaleResolver} of the used MVC Implementation.
<  *
<  * @author Tobias Erdle
<  * @see MvcContext#getLocale()
<  * @see javax.mvc.locale.LocaleResolver
<  */
---
> import jakarta.mvc.locale.LocaleResolver;
> import jakarta.mvc.locale.LocaleResolverContext;
> import jakarta.mvc.locale.LocaleResolverFactory;
> import java.util.Locale;
> 
23c17
<     private MvcContext mvcContext;
---
>     private LocaleResolverFactory localeResolverFactory;
25,31d18
<     /**
<      * Get the assigned message to some key based on the {@link java.util.Locale} of the current request.
<      *
<      * @param key the message key to use
<      * @return the correct translation assigned to the key for the request locale, a fallback translation or a
<      * placeholder for unknown keys.
<      */
33c20,33
<         final ResourceBundle bundle = ResourceBundle.getBundle(BASE_NAME, mvcContext.getLocale());
---
>         LocaleResolver localeResolver = localeResolverFactory.getLocaleResolver();
>         Locale locale = localeResolver.resolveLocale(new LocaleResolverContext() {
>             @Override
>             public Locale getDefaultLocale() {
>                 return Locale.getDefault();
>             }
> 
>             @Override
>             public Locale getLocale() {
>                 return Locale.getDefault();
>             }
>         });
> 
>         final ResourceBundle bundle = ResourceBundle.getBundle(BASE_NAME, locale);
