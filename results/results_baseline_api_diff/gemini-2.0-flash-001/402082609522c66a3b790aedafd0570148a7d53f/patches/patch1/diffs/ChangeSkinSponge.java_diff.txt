19a20,21
> import net.kyori.adventure.text.Component;
> import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
21c23
< import org.spongepowered.api.Platform.Type;
---
> import org.spongepowered.api.Platform;
23,24c25
< import org.spongepowered.api.command.CommandManager;
< import org.spongepowered.api.command.CommandSource;
---
> import org.spongepowered.api.command.Command;
27,31c28,31
< import org.spongepowered.api.event.game.state.GameInitializationEvent;
< import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
< import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
< import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
< import org.spongepowered.api.network.ChannelRegistrar;
---
> import org.spongepowered.api.event.lifecycle.ConstructPluginEvent;
> import org.spongepowered.api.event.lifecycle.StartedEngineEvent;
> import org.spongepowered.api.event.lifecycle.StoppingEngineEvent;
> import org.spongepowered.api.network.channel.raw.RawDataChannel;
33c33
< import org.spongepowered.api.text.serializer.TextSerializers;
---
> import org.spongepowered.api.plugin.PluginContainer;
40,42c40,41
< @Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
<         url = PomData.URL, description = PomData.DESCRIPTION)
< public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {
---
> @Plugin(ARTIFACT_ID)
> public class ChangeSkinSponge implements PlatformPlugin<org.spongepowered.api.command.CommandCause> {
46a46
>     private final PluginContainer pluginContainer;
55c55
<     ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
---
>     ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector, PluginContainer pluginContainer) {
58a59
>         this.pluginContainer = pluginContainer;
62c63
<     public void onPreInit(GamePreInitializationEvent preInitEvent) {
---
>     public void onConstructPlugin(ConstructPluginEvent constructEvent) {
73,74c74,75
<     public void onInit(GameInitializationEvent initEvent) {
<         if (!initialized)
---
>     public void onInit(StartedEngineEvent<org.spongepowered.api.Server> initEvent) {
>         if (!initialized) {
76,77c77
< 
<         CommandManager cmdManager = Sponge.getCommandManager();
---
>         }
80,85c80
<         cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
<         cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
<         cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
<         cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
<         cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
<                 .buildSpec(), "skininvalidate", "skin-invalidate");
---
>         Sponge.eventManager().registerListeners(this, injector.getInstance(LoginListener.class));
87c82
<         Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));
---
>         registerCommands();
90d84
<         ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
93,96c87,97
<         RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
<         RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
<         updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
<         permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
---
> 
>         Sponge.channelRegistry().register(updateChannelName, injector.getInstance(UpdateSkinListener.class));
>         Sponge.channelRegistry().register(permissionChannelName, injector.getInstance(CheckPermissionListener.class));
>     }
> 
>     private void registerCommands() {
>         Sponge.commandManager().register(pluginContainer, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
>         Sponge.commandManager().register(pluginContainer, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
>         Sponge.commandManager().register(pluginContainer, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
>         Sponge.commandManager().register(pluginContainer, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
>         Sponge.commandManager().register(pluginContainer, injector.getInstance(InvalidateCommand.class).buildSpec(), "skininvalidate", "skin-invalidate");
100c101
<     public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
---
>     public void onShutdown(StoppingEngineEvent<org.spongepowered.api.Server> stoppingServerEvent) {
109c110
<     public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
---
>     public boolean hasSkinPermission(org.spongepowered.api.command.CommandCause invoker, UUID uuid, boolean sendMessage) {
142c143
<     public void sendMessage(CommandSource receiver, String key) {
---
>     public void sendMessage(org.spongepowered.api.command.CommandCause receiver, String key) {
145c146,147
<             receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
---
>             Component component = LegacyComponentSerializer.legacySection().deserialize(message);
>             receiver.sendMessage(component);
