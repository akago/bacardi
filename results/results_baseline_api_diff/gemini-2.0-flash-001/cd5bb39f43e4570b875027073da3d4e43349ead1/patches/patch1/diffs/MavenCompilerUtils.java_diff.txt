21,22c21,30
< import org.codehaus.plexus.util.xml.Xpp3Dom;
< 
---
> import org.w3c.dom.Element;
> import org.w3c.dom.Node;
> import org.w3c.dom.NodeList;
> 
> import javax.xml.xpath.XPath;
> import javax.xml.xpath.XPathConstants;
> import javax.xml.xpath.XPathExpression;
> import javax.xml.xpath.XPathExpressionException;
> import javax.xml.xpath.XPathFactory;
> import java.util.HashSet;
70,83c78,95
<         if (config instanceof Xpp3Dom) {
<             return stream(((Xpp3Dom) config).getChildren("annotationProcessorPaths"))
<                     .flatMap(aggregate -> stream(aggregate.getChildren("path")))
<                     .map(processor -> system.createArtifact(
<                             extractChildValue(processor, "groupId"),
<                             extractChildValue(processor, "artifactId"),
<                             extractChildValue(processor, "version"),
<                             PACKAGING))
<                     // A path specification is automatically ignored in maven-compiler-plugin if version is absent,
<                     // therefore there is little use in logging incomplete paths that are filtered out.
<                     .filter(a -> !a.getGroupId().isEmpty())
<                     .filter(a -> !a.getArtifactId().isEmpty())
<                     .filter(a -> !a.getVersion().isEmpty())
<                     .collect(Collectors.toSet());
---
>         if (config instanceof org.codehaus.plexus.util.xml.Xpp3Dom) {
>             org.codehaus.plexus.util.xml.Xpp3Dom xpp3DomConfig = (org.codehaus.plexus.util.xml.Xpp3Dom) config;
>             org.codehaus.plexus.util.xml.Xpp3Dom[] annotationProcessorPaths = xpp3DomConfig.getChildren("annotationProcessorPaths");
> 
>             Set<Artifact> artifacts = new HashSet<>();
>             for (org.codehaus.plexus.util.xml.Xpp3Dom annotationProcessorPath : annotationProcessorPaths) {
>                 org.codehaus.plexus.util.xml.Xpp3Dom[] paths = annotationProcessorPath.getChildren("path");
>                 for (org.codehaus.plexus.util.xml.Xpp3Dom path : paths) {
>                     String groupId = extractChildValuePlexus(path, "groupId");
>                     String artifactId = extractChildValuePlexus(path, "artifactId");
>                     String version = extractChildValuePlexus(path, "version");
> 
>                     if (!groupId.isEmpty() && !artifactId.isEmpty() && !version.isEmpty()) {
>                         artifacts.add(system.createArtifact(groupId, artifactId, version, PACKAGING));
>                     }
>                 }
>             }
>             return artifacts;
99,100c111,112
<     private static String extractChildValue(Xpp3Dom node, String name) {
<         final Xpp3Dom child = node.getChild(name);
---
>     private static String extractChildValuePlexus(org.codehaus.plexus.util.xml.Xpp3Dom node, String name) {
>         org.codehaus.plexus.util.xml.Xpp3Dom child = node.getChild(name);
102a115,119
> 
>     private static String extractChildValue(Element node, String name) {
>         Node child = node.getElementsByTagName(name).item(0);
>         return child == null ? "" : child.getTextContent();
>     }
