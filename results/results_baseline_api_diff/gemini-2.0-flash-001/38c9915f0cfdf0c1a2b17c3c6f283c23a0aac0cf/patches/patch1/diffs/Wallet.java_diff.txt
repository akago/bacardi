10,11c10
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
---
>  * copies of the Software, and to permit persons to do so, subject to the following conditions:
18c17
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
---
>  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
30,31c29,34
< import org.cactoos.collection.Filtered;
< import org.cactoos.iterable.IterableOf;
---
> import java.util.stream.Collectors;
> import java.util.stream.StreamSupport;
> import org.cactoos.Func;
> import org.cactoos.Scalar;
> import org.cactoos.Text;
> import org.cactoos.collection.IterableOf;
36d38
< import org.cactoos.scalar.CheckedScalar;
38d39
< import org.cactoos.scalar.UncheckedScalar;
40d40
< import org.cactoos.text.SplitText;
201,202c201,202
<             return new CheckedScalar<>(
<                 () -> Long.parseUnsignedLong(
---
>             return new org.cactoos.scalar.Checked<>(
>                 (Scalar<Long>) () -> Long.parseUnsignedLong(
204,208c204,205
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
---
>                         new TextOf(this.path).asString().split("\n")
>                     ).get(2),
247,250c244,249
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
<                     origin -> new UncheckedScalar<>(
<                         new Or(
---
>             final Iterable<Transaction> candidates = StreamSupport.stream(other.ledger().spliterator(), false)
>                 .filter(incoming -> StreamSupport.stream(ledger.spliterator(), false)
>                     .noneMatch(origin -> {
>                         try {
>                             return new org.cactoos.scalar.Unchecked<>(
>                                 (Scalar<Boolean>) () -> new Or(
256a256,261
>                                 ).value()
>                             ).value();
>                         } catch (final Exception ex) {
>                             throw new IllegalStateException(ex);
>                         }
>                     })
258,262c263
<                     ).value(),
<                     ledger
<                 ).isEmpty(),
<                 other.ledger()
<             );
---
>                 .collect(Collectors.toList());
265c266
<                 new Joined<Transaction>(ledger, candidates)
---
>                 new Joined<Transaction>(ledger, (Iterable<Transaction>) candidates)
275,278c276
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).asString().split("\\n")
