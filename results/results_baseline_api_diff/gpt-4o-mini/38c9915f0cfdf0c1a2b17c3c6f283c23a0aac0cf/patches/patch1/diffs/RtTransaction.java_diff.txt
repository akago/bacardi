1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
35d11
< import org.cactoos.scalar.IoCheckedScalar;
37d12
< import org.cactoos.scalar.StickyScalar;
40d14
< import org.cactoos.text.SplitText;
43d16
< import org.cactoos.text.UncheckedText;
88c61
<     private final IoCheckedScalar<String> transaction;
---
>     private final String transaction;
95,97d67
<         this.transaction = new IoCheckedScalar<>(
<             new StickyScalar<>(
<                 () -> {
99,101c69
<                         new TrimmedText(
<                             new TextOf(trnsct)
<                         ).asString().isEmpty()
---
>             new TextOf(trnsct).asString().isEmpty()
103c71
<                         throw new IOException(
---
>             throw new IllegalArgumentException(
109c77
<                             new SplitText(trnsct, ";")
---
>                 new TextOf(trnsct).asString().split(";")
113c81
<                         throw new IOException(
---
>             throw new IllegalArgumentException(
121,124c89
<                     return trnsct;
<                 }
<             )
<         );
---
>         this.transaction = trnsct;
130,136c95,97
<         final String ident = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     0, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String ident = new ItemAt<>(
>             0, this.transaction.split(";")
>         ).value();
139d99
<                 new UncheckedText(
144d103
<                     )
155,156d113
<             new UncheckedText(
<                 new IoCheckedScalar<>(
158,161c115,116
<                         1, new SplitText(this.transaction.value(), ";")
<                     )
<                 ).value()
<             ).asString(),
---
>                 1, this.transaction.split(";")
>             ).value(),
168,174c123,125
<         final String amnt = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     2, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String amnt = new ItemAt<>(
>             2, this.transaction.split(";")
>         ).value();
177d127
<                 new UncheckedText(
182d131
<                     )
192,199c141,143
<         final String prefix = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     3, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String prefix = new ItemAt<>(
>             3, this.transaction.split(";")
>         ).value();
212,219c156,158
<         final String bnf = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     4, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String bnf = new ItemAt<>(
>             4, this.transaction.split(";")
>         ).value();
222d160
<                 new UncheckedText(
227d164
<                     )
236,243c173,175
<         final String dtls = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     5, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String dtls = new ItemAt<>(
>             5, this.transaction.split(";")
>         ).value();
246d177
<                 new UncheckedText(
251d181
<                     )
260,267c190,192
<         final String sign = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     6, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String sign = new ItemAt<>(
>             6, this.transaction.split(";")
>         ).value();
272d196
<                 new UncheckedText(
277d200
<                     )
286c209
<         return new UncheckedScalar<>(this.transaction).value();
---
>         return this.transaction;
