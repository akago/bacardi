18,22c18,19
< import com.google.api.services.cloudresourcemanager.model.BooleanConstraint;
< import com.google.api.services.cloudresourcemanager.model.Constraint;
< import com.google.api.services.cloudresourcemanager.model.ListConstraint;
< import com.google.common.base.Function;
< import com.google.common.base.MoreObjects;
---
> import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;
> import com.google.api.services.cloudresourcemanager.v3.model.Policy;
35,38c32,34
<   static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION =
<       new Function<Constraint, ConstraintInfo>() {
<         @Override
<         public ConstraintInfo apply(Constraint protobuf) {
---
>   static final com.google.common.base.Function<Policy, ConstraintInfo> FROM_PROTOBUF_FUNCTION =
>       new com.google.common.base.Function<Policy, ConstraintInfo>() {
>         public ConstraintInfo apply(Policy protobuf) {
42,45c38,40
<   static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION =
<       new Function<ConstraintInfo, Constraint>() {
<         @Override
<         public Constraint apply(ConstraintInfo constraintInfo) {
---
>   static final com.google.common.base.Function<ConstraintInfo, Policy> TO_PROTOBUF_FUNCTION =
>       new com.google.common.base.Function<ConstraintInfo, Policy>() {
>         public Policy apply(ConstraintInfo constraintInfo) {
50c45
<   private BooleanConstraint booleanConstraint;
---
>   private ListPolicy listPolicy;
54d48
<   private Constraints constraints;
58,122d51
<   /**
<    * A Constraint that allows or disallows a list of string values, which are configured by an
<    * Organization's policy administrator with a Policy.
<    */
<   static class Constraints {
< 
<     private final String suggestedValue;
<     private final Boolean supportsUnder;
< 
<     Constraints(String suggestedValue, Boolean supportsUnder) {
<       this.suggestedValue = suggestedValue;
<       this.supportsUnder = supportsUnder;
<     }
< 
<     /**
<      * The Google Cloud Console tries to default to a configuration that matches the value specified
<      * in this Constraint.
<      */
<     String getSuggestedValue() {
<       return suggestedValue;
<     }
< 
<     /**
<      * Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in
<      * Policy.allowed_values and Policy.denied_values.
<      */
<     Boolean getSupportsUnder() {
<       return supportsUnder;
<     }
< 
<     @Override
<     public String toString() {
<       return MoreObjects.toStringHelper(this)
<           .add("suggestedValue", getSuggestedValue())
<           .add("supportsUnder", getSupportsUnder())
<           .toString();
<     }
< 
<     @Override
<     public int hashCode() {
<       return Objects.hash(suggestedValue, supportsUnder);
<     }
< 
<     @Override
<     public boolean equals(Object o) {
<       if (this == o) {
<         return true;
<       }
<       if (o == null || getClass() != o.getClass()) {
<         return false;
<       }
<       Constraints that = (Constraints) o;
<       return Objects.equals(suggestedValue, that.suggestedValue)
<           && Objects.equals(supportsUnder, that.supportsUnder);
<     }
< 
<     ListConstraint toProtobuf() {
<       return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);
<     }
< 
<     static Constraints fromProtobuf(ListConstraint listConstraint) {
<       return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());
<     }
<   }
< 
125c54
<     private BooleanConstraint booleanConstraint;
---
>     private ListPolicy listPolicy;
129d57
<     private Constraints constraints;
138c66
<       this.booleanConstraint = info.booleanConstraint;
---
>       this.listPolicy = info.listPolicy;
142d69
<       this.constraints = info.constraints;
147,148c74,75
<     Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {
<       this.booleanConstraint = booleanConstraint;
---
>     Builder setListPolicy(ListPolicy listPolicy) {
>       this.listPolicy = listPolicy;
167,171d93
<     Builder setConstraints(Constraints constraints) {
<       this.constraints = constraints;
<       return this;
<     }
< 
188c110
<     this.booleanConstraint = builder.booleanConstraint;
---
>     this.listPolicy = builder.listPolicy;
192d113
<     this.constraints = builder.constraints;
197,201d117
<   /** Returns the boolean constraint to check whether the constraint is enforced or not. */
<   public BooleanConstraint getBooleanConstraint() {
<     return booleanConstraint;
<   }
< 
217,221d132
<   /** Returns the listConstraintInfo. */
<   public Constraints getConstraints() {
<     return constraints;
<   }
< 
241c152
<     return Objects.equals(booleanConstraint, that.booleanConstraint)
---
>     return Objects.equals(listPolicy, that.listPolicy)
245d155
<         && Objects.equals(constraints, that.constraints)
252,253c162
<     return Objects.hash(
<         booleanConstraint, constraintDefault, description, displayName, constraints, name, version);
---
>     return Objects.hash(listPolicy, constraintDefault, description, displayName, name, version);
266,292c175,193
<   Constraint toProtobuf() {
<     Constraint constraintProto = new Constraint();
<     constraintProto.setBooleanConstraint(booleanConstraint);
<     constraintProto.setConstraintDefault(constraintDefault);
<     constraintProto.setDescription(description);
<     constraintProto.setDisplayName(displayName);
<     if (constraints != null) {
<       constraintProto.setListConstraint(constraints.toProtobuf());
<     }
<     constraintProto.setName(name);
<     constraintProto.setVersion(version);
<     return constraintProto;
<   }
< 
<   static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {
<     Builder builder = newBuilder(constraintProtobuf.getName());
<     builder.setBooleanConstraint(constraintProtobuf.getBooleanConstraint());
<     builder.setConstraintDefault(constraintProtobuf.getConstraintDefault());
<     builder.setDescription(constraintProtobuf.getDescription());
<     builder.setDisplayName(constraintProtobuf.getDisplayName());
<     if (constraintProtobuf.getListConstraint() != null) {
<       builder.setConstraints(Constraints.fromProtobuf(constraintProtobuf.getListConstraint()));
<     }
<     if (constraintProtobuf.getName() != null && !constraintProtobuf.getName().equals("Unnamed")) {
<       builder.setName(constraintProtobuf.getName());
<     }
<     builder.setVersion(constraintProtobuf.getVersion());
---
>   Policy toProtobuf() {
>     Policy policyProto = new Policy();
>     policyProto.setConstraintDefault(constraintDefault);
>     policyProto.setDescription(description);
>     policyProto.setDisplayName(displayName);
>     policyProto.setName(name);
>     policyProto.setVersion(version);
>     if (listPolicy != null) {
>       policyProto.setListPolicy(listPolicy);
>     }
>     return policyProto;
>   }
> 
>   static ConstraintInfo fromProtobuf(Policy policyProtobuf) {
>     Builder builder = newBuilder(policyProtobuf.getName());
>     builder.setConstraintDefault(policyProtobuf.getConstraintDefault());
>     builder.setDescription(policyProtobuf.getDescription());
>     builder.setDisplayName(policyProtobuf.getDisplayName());
>     builder.setVersion(policyProtobuf.getVersion());
