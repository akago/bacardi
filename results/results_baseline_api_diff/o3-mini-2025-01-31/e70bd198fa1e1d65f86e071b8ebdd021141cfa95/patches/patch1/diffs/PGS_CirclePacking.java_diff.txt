22a23
> 
26,28d26
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
< import org.tinspin.index.covertree.CoverTree;
57,61d54
<         /*-
<          * Roadmap (see/implement): 'A LINEARIZED CIRCLE PACKING ALGORITHM'? 
<          * 'A note on circle packing' Young Joon AHN.
<          */
< 
158c151
<          *         the center point and .z represents radius.
---
>          *         the center point, and .z represents the radius.
203c196
<                 final CoverTree<PVector> tree = CoverTree.create(3, 2, circleDistanceMetric);
---
>                 final SimplePointIndex tree = new SimplePointIndex();
226,227c219
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
< 
---
>                         final PVector nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
229,235c221,225
<                          * nn.dist() does not return the radius (since it's a distance metric used to
<                          * find nearest circle), so calculate maximum radius for candidate circle using
<                          * 2d euclidean distance between center points minus radius of nearest circle.
<                          */
<                         final float dx = p.x - nn.value().x;
<                         final float dy = p.y - nn.value().y;
<                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.value().z);
---
>                          * Calculate maximum radius for candidate circle using 2d euclidean distance between center points minus radius of nearest circle.
>                          */
>                         final float dx = p.x - nn.x;
>                         final float dy = p.y - nn.y;
>                         final float radius = (float) (Math.sqrt(dx * dx + dy * dy) - nn.z);
285d274
< 
627,643c616,617
<          * Calculate the distance between two points in 3D space, where each point
<          * represents a circle with (x, y, r) coordinates. This custom metric considers
<          * both the Euclidean distance between the centers of the circles and the
<          * absolute difference of their radii.
<          * <p>
<          * The metric is defined as follows: Given two points A and B, representing
<          * circles centered at (x1, y1) and (x2, y2) with radii r1 and r2 respectively,
<          * the distance is calculated as sqrt((x1 - x2)^2 + (y1 - y2)^2) + |r1 - r2|.
<          * <p>
<          * This metric can be used to find the nearest circle to a given center (x, y)
<          * in a proximity search. To perform the search, use a point (x, y, R) where R
<          * is greater than or equal to the maximum radius of a circle in the proximity
<          * structure.
<          *
<          * @param p1 3D point representing the first circle (x1, y1, r1)
<          * @param p2 3D point representing the second circle (x2, y2, r2)
<          * @return the distance between the two points based on the custom metric
---
>          * A streams filter to remove triangulation triangles that share at least one
>          * edge with the shape edge.
645,646c619,623
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
---
>         private static final Predicate<SimpleTriangle> filterBorderTriangles = t -> t.getContainingRegion() != null
>                         && !t.getEdgeA().isConstrainedRegionBorder() && !t.getEdgeB().isConstrainedRegionBorder()
>                         && !t.getEdgeC().isConstrainedRegionBorder();
> 
>         private static double circleDistance(double[] p1, double[] p2) {
650d626
< 
653,654c629,630
<                 return euclideanDistance + absZDifference; // negative if inside
<         };
---
>                 return euclideanDistance + absZDifference;
>         }
656,662c632,647
<         /**
<          * A streams filter to remove triangulation triangles that share at least one
<          * edge with the shape edge.
<          */
<         private static final Predicate<SimpleTriangle> filterBorderTriangles = t -> t.getContainingRegion() != null
<                         && !t.getEdgeA().isConstrainedRegionBorder() && !t.getEdgeB().isConstrainedRegionBorder()
<                         && !t.getEdgeC().isConstrainedRegionBorder();
---
>         private static class SimplePointIndex {
>                 private static class Entry {
>                         double[] coords;
>                         PVector value;
> 
>                         Entry(double[] coords, PVector value) {
>                                 this.coords = coords;
>                                 this.value = value;
>                         }
>                 }
> 
>                 private final List<Entry> entries = new ArrayList<>();
> 
>                 public void insert(double[] coords, PVector value) {
>                         entries.add(new Entry(coords, value));
>                 }
663a649,661
>                 public PVector query1NN(double[] query) {
>                         double bestDist = Double.MAX_VALUE;
>                         PVector best = null;
>                         for (Entry e : entries) {
>                                 double d = circleDistance(query, e.coords);
>                                 if (d < bestDist) {
>                                         bestDist = d;
>                                         best = e.value;
>                                 }
>                         }
>                         return best;
>                 }
>         }
