11a12,13
> import org.pitest.classinfo.ClassInfoVisitor;
> import org.pitest.classinfo.ClassName;
12a15
> import java.io.ByteArrayOutputStream;
14a18
> import java.io.InputStream;
15a20,21
> import java.net.URL;
> import java.net.URLConnection;
103a110,113
>     byte[] classBytes = loadClassBytes(data.getMutatedClass());
>     long lastModified = getLastModified(data.getMutatedClass());
>     ClassInfoVisitor visitor = new ClassInfoVisitor();
>     Object classInfo = visitor.getClassInfo(data.getMutatedClass(), classBytes, lastModified);
105c115
<         data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));
---
>         data.getMutations(), classInfo);
136a147,179
>   
>   private byte[] loadClassBytes(final ClassName className) {
>     String resourceName = className.asJavaName().replace('.', '/') + ".class";
>     InputStream is = this.getClass().getClassLoader().getResourceAsStream(resourceName);
>     if (is == null) {
>       throw new RuntimeException("Cannot find class resource: " + resourceName);
>     }
>     try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
>          InputStream input = is) {
>       byte[] buffer = new byte[4096];
>       int read;
>       while ((read = input.read(buffer)) != -1) {
>         baos.write(buffer, 0, read);
>       }
>       return baos.toByteArray();
>     } catch (IOException e) {
>       throw new RuntimeException(e);
>     }
>   }
>   
>   private long getLastModified(final ClassName className) {
>     try {
>       String resourceName = className.asJavaName().replace('.', '/') + ".class";
>       URL url = this.getClass().getClassLoader().getResource(resourceName);
>       if (url == null) {
>         throw new RuntimeException("Cannot find class resource: " + resourceName);
>       }
>       URLConnection connection = url.openConnection();
>       return connection.getLastModified();
>     } catch (IOException e) {
>       throw new RuntimeException(e);
>     }
>   }
