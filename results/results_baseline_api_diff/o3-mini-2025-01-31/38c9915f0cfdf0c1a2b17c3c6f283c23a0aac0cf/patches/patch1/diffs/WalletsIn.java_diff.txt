1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
37,38d13
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.SolidScalar;
40d14
< import org.cactoos.text.JoinedText;
53c27
<     private final IoCheckedScalar<Path> path;
---
>     private final Scalar<Path> path;
101,105c75,76
<     public WalletsIn(final Scalar<Path> pth, final String ext,
<         final Random random) {
<         this.path = new IoCheckedScalar<>(
<             new SolidScalar<>(pth)
<         );
---
>     public WalletsIn(final Scalar<Path> pth, final String ext, final Random random) {
>         this.path = pth;
118,124c89,96
<         final Path wpth = this.path.value().resolve(
<             new JoinedText(
<                 ".",
<                 Long.toHexString(this.random.nextLong()),
<                 this.ext
<             ).asString()
<         );
---
>         final String walletName = Long.toHexString(this.random.nextLong()) + "." + this.ext;
>         final Path base;
>         try {
>             base = this.path.value();
>         } catch (final Exception ex) {
>             throw new IOException(ex);
>         }
>         final Path wpth = base.resolve(walletName);
140,145c112
<     // @todo #65:30min Create the new wallet in the path with all wallets.
<     //  It should contain the correct content according to the
<     //  white paper (network, protocol version, id and public RSA key). After
<     //  this remove exception expect for tests on WalletsInTest.
<     public Wallet create(final long id, final String pubkey, final String
<         network) throws IOException {
---
>     public Wallet create(final long id, final String pubkey, final String network) throws IOException {
153a121
>             final Path base = this.path.value();
156c124
<                 new Filtered<>(this.filter, new Directory(this.path.value()))
---
>                 new Filtered<>(this.filter, new Directory(base))
158c126
<         } catch (final IOException ex) {
---
>         } catch (final Exception ex) {
