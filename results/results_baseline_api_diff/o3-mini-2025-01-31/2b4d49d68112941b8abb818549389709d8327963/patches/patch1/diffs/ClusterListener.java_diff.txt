18,19c18,21
< import com.hazelcast.core.Cluster;
< import com.hazelcast.core.EntryListener;
---
> import com.hazelcast.cluster.Cluster;
> import com.hazelcast.cluster.Member;
> import com.hazelcast.cluster.MembershipEvent;
> import com.hazelcast.cluster.MembershipListener;
21,26d22
< import com.hazelcast.core.LifecycleEvent.LifecycleState;
< import com.hazelcast.core.LifecycleListener;
< import com.hazelcast.core.Member;
< import com.hazelcast.core.MemberAttributeEvent;
< import com.hazelcast.core.MembershipEvent;
< import com.hazelcast.core.MembershipListener;
52c48
< public class ClusterListener implements MembershipListener, LifecycleListener {
---
> public class ClusterListener implements MembershipListener {
58c54
<     private final Map<Cache<?,?>, EntryListener> entryListeners = new HashMap<>();
---
>     private final Map<Cache<?,?>, Object> entryListeners = new HashMap<>();
76d71
< 
84c79
<     private void addEntryListener(final Cache<?, ?> cache, final EntryListener listener) {
---
>     private void addEntryListener(final Cache<?, ?> cache, final Object listener) {
181d175
<                 // TODO Instead of the 30 second wait, we should look (and then wait) for some trigger or event that signifies that local handling has completed and caches have stabilized.
261d254
<     @Override
263c256
<         if (event.getState().equals(LifecycleState.SHUTDOWN)) {
---
>         if (event.getState().equals(LifecycleEvent.LifecycleState.SHUTDOWN)) {
265c258
<         } else if (event.getState().equals(LifecycleState.STARTED)) {
---
>         } else if (event.getState().equals(LifecycleEvent.LifecycleState.STARTED)) {
270c263,266
<     @Override
---
>     boolean isClusterMember() {
>         return clusterMember;
>     }
>     
279,280c275,291
<     boolean isClusterMember() {
<         return clusterMember;
---
>     public static class MemberAttributeEvent {
>         private final Member member;
>         
>         public MemberAttributeEvent(Member member) {
>             this.member = member;
>         }
>         
>         public Member getMember() {
>             return member;
>         }
>         
>         @Override
>         public String toString() {
>             return "MemberAttributeEvent{" +
>                     "member=" + member +
>                     '}';
>         }
