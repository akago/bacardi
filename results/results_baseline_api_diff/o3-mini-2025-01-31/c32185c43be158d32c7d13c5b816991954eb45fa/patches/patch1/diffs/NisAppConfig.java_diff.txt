3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
5,6c7,12
< import org.nem.core.model.*;
< import org.nem.core.model.primitive.*;
---
> import org.nem.core.model.AccountDaoLookupAdapter;
> import org.nem.core.model.BlockChainFeature;
> import org.nem.core.model.NemGlobals;
> import org.nem.core.model.NemStateGlobals;
> import org.nem.core.model.primitive.Amount;
> import org.nem.core.model.primitive.BlockHeight;
9,14c15,67
< import org.nem.deploy.*;
< import org.nem.nis.*;
< import org.nem.nis.audit.AuditCollection;
< import org.nem.nis.boot.*;
< import org.nem.nis.cache.*;
< import org.nem.nis.connect.*;
---
> import org.nem.deploy.BlockAnalyzer;
> import org.nem.deploy.BlockChain;
> import org.nem.deploy.BlockChainContextFactory;
> import org.nem.deploy.BlockChainLastBlockLayer;
> import org.nem.deploy.BlockChainServices;
> import org.nem.deploy.BlockChainUpdater;
> import org.nem.deploy.BlockGenerator;
> import org.nem.deploy.BlockScorer;
> import org.nem.deploy.CanHarvestPredicate;
> import org.nem.deploy.CommonStarter;
> import org.nem.deploy.HarvestAwareNetworkHostBootstrapper;
> import org.nem.deploy.Harvester;
> import org.nem.deploy.HarvestingTask;
> import org.nem.deploy.HttpConnectorPool;
> import org.nem.deploy.NetworkHostBootstrapper;
> import org.nem.deploy.NemConfigurationPolicy;
> import org.nem.deploy.NisConfiguration;
> import org.nem.deploy.NisConfigurationPolicy;
> import org.nem.deploy.NisMain;
> import org.nem.deploy.NisPeerNetworkHost;
> import org.nem.deploy.NisTransactionFeeCalculator.DefaultTransactionFeeCalculator;
> import org.nem.deploy.NisTransactionFeeCalculator.ZeroTransactionFeeCalculator;
> import org.nem.deploy.NamespaceCacheLookupAdapters;
> import org.nem.deploy.blockchain.BlockChainFeatureDependentFactory;
> import org.nem.deploy.cache.DefaultAccountCache;
> import org.nem.deploy.cache.DefaultAccountStateCache;
> import org.nem.deploy.cache.DefaultHashCache;
> import org.nem.deploy.cache.DefaultMosaicIdCache;
> import org.nem.deploy.cache.SynchronizedAccountCache;
> import org.nem.deploy.cache.SynchronizedAccountStateCache;
> import org.nem.deploy.cache.SynchronizedHashCache;
> import org.nem.deploy.cache.SynchronizedMosaicIdCache;
> import org.nem.deploy.pox.DefaultPoxFacade;
> import org.nem.deploy.pox.poi.PoiImportanceCalculator;
> import org.nem.deploy.pox.poi.PoiOptionsBuilder;
> import org.nem.deploy.secret.CachedTrustProvider;
> import org.nem.deploy.secret.EigenTrustPlusPlus;
> import org.nem.deploy.secret.LowComTrustProvider;
> import org.nem.deploy.state.DefaultUnconfirmedTransactions;
> import org.nem.deploy.state.SynchronizedUnconfirmedTransactions;
> import org.nem.deploy.state.UnconfirmedStateFactory;
> import org.nem.deploy.state.UnconfirmedTransactions;
> import org.nem.deploy.state.UnlockedAccounts;
> import org.nem.deploy.time.BlockMarkerConstants;
> import org.nem.deploy.validators.BlockTransactionObserverFactory;
> import org.nem.deploy.validators.BlockValidatorFactory;
> import org.nem.deploy.validators.ObserverOption;
> import org.nem.deploy.validators.TransactionValidatorFactory;
> import org.nem.deploy.validators.SingleTransactionValidator;
> import org.nem.nis.NemGlobals;
> import org.nem.nis.NemStateGlobals;
> import org.nem.nis.cache.DefaultNisCache;
> import org.nem.nis.cache.ReadOnlyNisCache;
16,18c69,77
< import org.nem.nis.dao.*;
< import org.nem.nis.harvesting.*;
< import org.nem.nis.mappers.*;
---
> import org.nem.nis.dao.AccountDao;
> import org.nem.nis.dao.BlockDao;
> import org.nem.nis.dao.TransferDao;
> import org.nem.nis.harvesting.HarvestingTask;
> import org.nem.nis.mappers.DefaultMapperFactory;
> import org.nem.nis.mappers.MapperFactory;
> import org.nem.nis.mappers.NisDbModelToModelMapper;
> import org.nem.nis.mappers.NisMapperFactory;
> import org.nem.nis.mappers.NisModelToDbModelMapper;
20c79
< import org.nem.nis.pox.poi.*;
---
> import org.nem.nis.pox.poi.PoiOptionsBuilder;
22c81
< import org.nem.nis.secret.*;
---
> import org.nem.nis.secret.CachedTrustProvider;
24,26c83,85
< import org.nem.nis.state.*;
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
---
> import org.nem.nis.sync.BlockChainContextFactory;
> import org.nem.nis.sync.BlockChainUpdater;
> import org.nem.nis.validators.TransactionValidatorFactory;
28,31c87,92
< import org.nem.peer.node.*;
< import org.nem.peer.services.ChainServices;
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
---
> import org.nem.peer.node.ChainServices;
> import org.nem.peer.node.DefaultChainServices;
> import org.nem.peer.trust.TrustProvider;
> import org.nem.specific.deploy.NisMain;
> import org.nem.specific.deploy.appconfig.NisConfiguration;
> import org.nem.specific.deploy.appconfig.NisConfigurationPolicy;
33c94,99
< import org.springframework.context.annotation.*;
---
> import org.springframework.context.annotation.Bean;
> import org.springframework.context.annotation.ComponentScan;
> import org.springframework.context.annotation.ComponentScan.Filter;
> import org.springframework.context.annotation.Configuration;
> import org.springframework.context.annotation.DependsOn;
> import org.springframework.context.annotation.FilterType;
40,41c106,113
< import java.util.*;
< import java.util.function.*;
---
> import java.util.Collection;
> import java.util.Collections;
> import java.util.EnumSet;
> import java.util.HashMap;
> import java.util.Map;
> import java.util.Properties;
> import java.util.function.Function;
> import java.util.function.Supplier;
107,113c179,184
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
>                 configuration.setLocations(new Location[] { new Location(prop.getProperty("flyway.locations")) });
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 return new Flyway(configuration);
