3a4,5
> import org.flywaydb.core.api.Location;
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
5,6c7,10
< import org.nem.core.model.*;
< import org.nem.core.model.primitive.*;
---
> import org.nem.core.model.BlockChain;
> import org.nem.core.model.BlockHeight;
> import org.nem.core.model.WeightedBalances;
> import org.nem.core.model.primitive.Amount;
9,26c13,81
< import org.nem.deploy.*;
< import org.nem.nis.*;
< import org.nem.nis.audit.AuditCollection;
< import org.nem.nis.boot.*;
< import org.nem.nis.cache.*;
< import org.nem.nis.connect.*;
< import org.nem.nis.controller.interceptors.LocalHostDetector;
< import org.nem.nis.dao.*;
< import org.nem.nis.harvesting.*;
< import org.nem.nis.mappers.*;
< import org.nem.nis.pox.ImportanceCalculator;
< import org.nem.nis.pox.poi.*;
< import org.nem.nis.pox.pos.PosImportanceCalculator;
< import org.nem.nis.secret.*;
< import org.nem.nis.service.BlockChainLastBlockLayer;
< import org.nem.nis.state.*;
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
---
> import org.nem.deploy.BlockAnalyzer;
> import org.nem.deploy.BlockChainServices;
> import org.nem.deploy.BlockChainUpdater;
> import org.nem.deploy.Harvester;
> import org.nem.deploy.HarvestingTask;
> import org.nem.deploy.HttpConnectorPool;
> import org.nem.deploy.NemGlobals;
> import org.nem.deploy.NemStateGlobals;
> import org.nem.deploy.NisMain;
> import org.nem.deploy.NisConfiguration;
> import org.nem.deploy.NisConfigurationPolicy;
> import org.nem.deploy.UnconfirmedTransactions;
> import org.nem.deploy.UnconfirmedTransactionsFilter;
> import org.nem.deploy.UnlockedAccounts;
> import org.nem.deploy.chain.BlockChainContextFactory;
> import org.nem.deploy.chain.BlockChainConfiguration;
> import org.nem.deploy.chain.BlockChainFeature;
> import org.nem.deploy.chain.BlockChainFeatureDependentFactory;
> import org.nem.deploy.chain.DefaultChainServices;
> import org.nem.deploy.chain.PeerNetworkScheduler;
> import org.nem.deploy.chain.SynchronizedUnconfirmedTransactions;
> import org.nem.deploy.connect.HttpConnectorPool;
> import org.nem.deploy.controller.interceptors.LocalHostDetector;
> import org.nem.deploy.dao.AccountDao;
> import org.nem.deploy.dao.BlockDao;
> import org.nem.deploy.dao.TransferDao;
> import org.nem.deploy.harvesting.BlockGenerator;
> import org.nem.deploy.harvesting.BlockScorer;
> import org.nem.deploy.harvesting.DefaultNewBlockTransactionsProvider;
> import org.nem.deploy.harvesting.HarvestingTask;
> import org.nem.deploy.mappers.DefaultMapperFactory;
> import org.nem.deploy.mappers.MapperFactory;
> import org.nem.deploy.mappers.NisDbModelToModelMapper;
> import org.nem.deploy.mappers.NisMapperFactory;
> import org.nem.deploy.mappers.NisModelToDbModelMapper;
> import org.nem.deploy.observers.BlockTransactionObserverFactory;
> import org.nem.deploy.observers.ObserverOption;
> import org.nem.deploy.secret.AlwaysVestedBalances;
> import org.nem.deploy.secret.CanHarvestPredicate;
> import org.nem.deploy.secret.DefaultAccountCache;
> import org.nem.deploy.secret.DefaultAccountStateCache;
> import org.nem.deploy.secret.DefaultHashCache;
> import org.nem.deploy.secret.DefaultMosaicIdCache;
> import org.nem.deploy.secret.DefaultNamespaceCache;
> import org.nem.deploy.secret.DefaultNisCache;
> import org.nem.deploy.secret.DefaultPoxFacade;
> import org.nem.deploy.secret.DefaultTransactionFeeCalculator;
> import org.nem.deploy.secret.EigenTrustPlusPlus;
> import org.nem.deploy.secret.LowComTrustProvider;
> import org.nem.deploy.secret.NemGlobals;
> import org.nem.deploy.secret.NemStateGlobals;
> import org.nem.deploy.secret.NisCacheUtils;
> import org.nem.deploy.secret.PoiImportanceCalculator;
> import org.nem.deploy.secret.PoiOptionsBuilder;
> import org.nem.deploy.secret.ReadOnlyNisCache;
> import org.nem.deploy.secret.SynchronizedAccountCache;
> import org.nem.deploy.secret.SynchronizedAccountStateCache;
> import org.nem.deploy.secret.SynchronizedHashCache;
> import org.nem.deploy.secret.SynchronizedMosaicIdCache;
> import org.nem.deploy.secret.SynchronizedNamespaceCache;
> import org.nem.deploy.secret.SynchronizedPoxFacade;
> import org.nem.deploy.secret.TimeBasedVestingWeightedBalances;
> import org.nem.deploy.secret.UnconfirmedStateFactory;
> import org.nem.deploy.secret.ZeroTransactionFeeCalculator;
> import org.nem.deploy.service.BlockChainLastBlockLayer;
> import org.nem.deploy.sync.CountingBlockSynchronizer;
> import org.nem.deploy.sync.DefaultUnconfirmedTransactions;
> import org.nem.deploy.trust.CachedTrustProvider;
> import org.nem.deploy.trust.TrustProvider;
28c83,85
< import org.nem.peer.node.*;
---
> import org.nem.peer.node.DefaultNodeCompatibilityChecker;
> import org.nem.peer.node.NisPeerNetworkHost;
> import org.nem.peer.node.NodeCompatibilityChecker;
30,31c87,93
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
---
> import org.nem.peer.trust.DefaultChainServices;
> import org.nem.specific.deploy.NisConfigurationPolicy;
> import org.nem.specific.deploy.appconfig.CommonStarter;
> import org.nem.specific.deploy.appconfig.NisConfiguration;
> import org.nem.specific.deploy.appconfig.NisMain;
> import org.nem.specific.deploy.dao.AccountDaoLookupAdapter;
> import org.nem.specific.deploy.dao.NamespaceCacheLookupAdapters;
33c95,101
< import org.springframework.context.annotation.*;
---
> import org.springframework.context.annotation.Bean;
> import org.springframework.context.annotation.ComponentScan;
> import org.springframework.context.annotation.ComponentScan.Filter;
> import org.springframework.context.annotation.Configuration;
> import org.springframework.context.annotation.DependsOn;
> import org.springframework.context.annotation.EnableTransactionManagement;
> import org.springframework.context.annotation.FilterType;
40,41c108,113
< import java.util.*;
< import java.util.function.*;
---
> import java.util.EnumSet;
> import java.util.HashMap;
> import java.util.Map;
> import java.util.Properties;
> import java.util.function.Function;
> import java.util.function.Supplier;
108,113c180,192
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final ClassicConfiguration configuration = new ClassicConfiguration();
>                 configuration.setDataSource(this.dataSource());
>                 configuration.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 final String locationsStr = prop.getProperty("flyway.locations");
>                 final String[] locationsArray = locationsStr.split("\\s*,\\s*");
>                 final Location[] locations = new Location[locationsArray.length];
>                 for (int i = 0; i < locationsArray.length; i++) {
>                         locations[i] = new Location(locationsArray[i].trim());
>                 }
>                 configuration.setLocations(locations);
>                 configuration.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 return new Flyway(configuration);
