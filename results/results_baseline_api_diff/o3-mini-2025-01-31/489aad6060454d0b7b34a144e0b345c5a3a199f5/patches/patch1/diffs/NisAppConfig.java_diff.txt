3a4,5
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
> import org.flywaydb.core.api.Location;
108,113c110,122
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 ClassicConfiguration config = new ClassicConfiguration();
>                 config.setDataSource(this.dataSource());
>                 config.setClassLoader(NisAppConfig.class.getClassLoader());
> 
>                 String[] locationsArray = prop.getProperty("flyway.locations").split(",");
>                 Location[] locations = new Location[locationsArray.length];
>                 for (int i = 0; i < locationsArray.length; i++) {
>                         locations[i] = new Location(locationsArray[i].trim());
>                 }
>                 config.setLocations(locations);
> 
>                 config.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
>                 return new Flyway(config);
