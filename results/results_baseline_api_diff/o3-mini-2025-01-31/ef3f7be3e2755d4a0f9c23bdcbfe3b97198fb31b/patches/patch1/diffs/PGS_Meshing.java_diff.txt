30,37d29
< import org.tinfour.common.IConstraint;
< import org.tinfour.common.IIncrementalTin;
< import org.tinfour.common.IQuadEdge;
< import org.tinfour.common.SimpleTriangle;
< import org.tinfour.common.Vertex;
< import org.tinfour.utils.TriangleCollector;
< import org.tinspin.index.PointIndex;
< import org.tinspin.index.kdtree.KDTree;
48a41
> import org.tinspin.index.IndexConfig;
161,167c154
<                 final PointIndex<Vertex> tree = KDTree.create(2, (p1, p2) -> {
<                         final double deltaX = p1[0] - p2[0];
<                         final double deltaY = p1[1] - p2[1];
<                         return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
<                 });
<                 vertices.forEach(v -> tree.insert(new double[] { v.x, v.y }, v));
< 
---
>                 // Replaced KDTree nearest neighbor search with linear search due to dependency update.
171c158
<                         final Vertex near = tree.query1NN(midpoint).value();
---
>                         final Vertex near = findNearest(vertices, midpoint);
851a839,860
>         /**
>          * Performs a linear nearest neighbor search over a collection of vertices.
>          * 
>          * @param vertices a collection of vertices to search
>          * @param point    the query point represented as a double array
>          * @return the vertex nearest to the query point
>          */
>         private static Vertex findNearest(Collection<Vertex> vertices, double[] point) {
>                 Vertex nearest = null;
>                 double bestDist = Double.MAX_VALUE;
>                 for (Vertex v : vertices) {
>                         double dx = v.x - point[0];
>                         double dy = v.y - point[1];
>                         double dist = dx * dx + dy * dy;
>                         if (dist < bestDist) {
>                                 bestDist = dist;
>                                 nearest = v;
>                         }
>                 }
>                 return nearest;
>         }
> 
