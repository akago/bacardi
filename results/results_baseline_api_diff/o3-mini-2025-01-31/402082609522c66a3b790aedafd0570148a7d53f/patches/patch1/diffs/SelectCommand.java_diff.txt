7c7
< 
---
> import org.spongepowered.api.command.Command;
10,12c10,11
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
16,19c15
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements ChangeSkinCommand {
22a19,20
>     private static final String SKIN_NAME_KEY = "skinName";
> 
24c22
<     SelectCommand(ChangeSkinSponge plugin) {
---
>     public SelectCommand(ChangeSkinSponge plugin) {
28d25
<     @Override
32c29,30
<             return CommandResult.empty();
---
>             // CommandResult.empty() has been removed; using success() for no-op.
>             return CommandResult.success();
35c33
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = args.one(SKIN_NAME_KEY).get().toLowerCase().replace("skin-", "");
40c38,39
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             // Removed .async() call since Task.builder().async() is no longer available.
>             Task.builder().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
50,52c49,51
<         return CommandSpec.builder()
<                 .executor(this)
<                 .arguments(string(of("skinName")))
---
>         Command<CommandSource> command = Command.builder()
>                 .addParameter(Parameter.string().key(SKIN_NAME_KEY).build())
>                 .executor(this::execute)
54a54,67
>         return new CommandSpec(command);
>     }
> 
>     // Local shim to replace removed org.spongepowered.api.command.spec.CommandSpec
>     public static class CommandSpec {
>         private final Command<CommandSource> command;
> 
>         public CommandSpec(Command<CommandSource> command) {
>             this.command = command;
>         }
> 
>         public Command<CommandSource> getCommand() {
>             return command;
>         }
