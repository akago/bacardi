7,12d6
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
14,17c8
< import org.spongepowered.api.scheduler.Task;
< 
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import java.util.Optional;
24c15
<     SelectCommand(ChangeSkinSponge plugin) {
---
>     public SelectCommand(ChangeSkinSponge plugin) {
40c31
<             Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
---
>             new Thread(new SkinSelector(plugin, receiver, targetId)).start();
52c43
<                 .arguments(string(of("skinName")))
---
>                 .arguments(GenericArguments.string(Text.of("skinName")))
55a47,142
> 
>     // Compatibility stubs for the removed API classes
> 
>     public static interface CommandSource {
>         // Marker interface for a command source.
>     }
> 
>     public static interface CommandExecutor {
>         CommandResult execute(CommandSource src, CommandContext args);
>     }
> 
>     public static class CommandResult {
>         private final boolean success;
> 
>         private CommandResult(boolean success) {
>             this.success = success;
>         }
> 
>         public static CommandResult empty() {
>             return new CommandResult(false);
>         }
> 
>         public static CommandResult success() {
>             return new CommandResult(true);
>         }
>     }
> 
>     public static class CommandSpec {
>         private final CommandExecutor executor;
>         private final Object arguments;
>         private final String permission;
> 
>         private CommandSpec(CommandExecutor executor, Object arguments, String permission) {
>             this.executor = executor;
>             this.arguments = arguments;
>             this.permission = permission;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Object arguments;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Object arguments) {
>                 this.arguments = arguments;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 return new CommandSpec(executor, arguments, permission);
>             }
>         }
>     }
> 
>     public static class CommandContext {
>         // Dummy implementation for compatibility with the old API.
>         public <T> Optional<T> getOne(String key) {
>             return Optional.empty();
>         }
>     }
> 
>     public static class GenericArguments {
>         public static Object string(Text text) {
>             return text;
>         }
>     }
> 
>     public static class Text {
>         private final String content;
> 
>         private Text(String content) {
>             this.content = content;
>         }
> 
>         public static Text of(String content) {
>             return new Text(content);
>         }
>     }
> 
>     public static interface ChangeSkinCommand {
>         CommandSpec buildSpec();
>     }
