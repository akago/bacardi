7,12c7,9
< 
< import org.spongepowered.api.command.CommandResult;
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.CommandExecutor;
> import org.spongepowered.api.command.CommandCause;
> import org.spongepowered.api.command.parameter.CommandContext;
14c11,12
< import org.spongepowered.api.scheduler.Task;
---
> 
> import java.util.Optional;
26,28c24,28
<     public CommandResult execute(CommandSource src, CommandContext args) {
<         if (!(src instanceof Player)) {
<             plugin.sendMessage(src, "no-console");
---
>     public CommandResult execute(CommandContext args) {
>         CommandCause cause = args.cause();
>         Optional<Player> playerOpt = cause.first(Player.class);
>         if (!playerOpt.isPresent()) {
>             plugin.sendMessage(cause.root(), "no-console");
32,33c32,33
<         Player receiver = (Player) src;
<         Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
---
>         Player receiver = playerOpt.get();
>         plugin.getScheduler().executor(plugin).execute(new SkinInvalidator(plugin, receiver));
43a44,85
> 
>     public static class CommandSpec {
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 return new CommandSpec();
>             }
>         }
>     }
> 
>     public static class CommandResult {
>         private final boolean success;
> 
>         private CommandResult(boolean success) {
>             this.success = success;
>         }
> 
>         public static CommandResult empty() {
>             return new CommandResult(false);
>         }
> 
>         public static CommandResult success() {
>             return new CommandResult(true);
>         }
>     }
