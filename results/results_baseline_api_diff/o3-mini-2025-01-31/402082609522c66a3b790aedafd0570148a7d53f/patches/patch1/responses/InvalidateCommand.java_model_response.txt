```java
package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinInvalidator;
import com.google.inject.Inject;
import org.spongepowered.api.command.CommandExecutor;
import org.spongepowered.api.command.CommandCause;
import org.spongepowered.api.command.parameter.CommandContext;
import org.spongepowered.api.entity.living.player.Player;

import java.util.Optional;

public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    InvalidateCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult execute(CommandContext args) {
        CommandCause cause = args.cause();
        Optional<Player> playerOpt = cause.first(Player.class);
        if (!playerOpt.isPresent()) {
            plugin.sendMessage(cause.root(), "no-console");
            return CommandResult.empty();
        }

        Player receiver = playerOpt.get();
        plugin.getScheduler().executor(plugin).execute(new SkinInvalidator(plugin, receiver));
        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .permission(PomData.ARTIFACT_ID + ".command.skinupdate.base")
                .build();
    }

    public static class CommandSpec {

        public static Builder builder() {
            return new Builder();
        }

        public static class Builder {
            private CommandExecutor executor;
            private String permission;

            public Builder executor(CommandExecutor executor) {
                this.executor = executor;
                return this;
            }

            public Builder permission(String permission) {
                this.permission = permission;
                return this;
            }

            public CommandSpec build() {
                return new CommandSpec();
            }
        }
    }

    public static class CommandResult {
        private final boolean success;

        private CommandResult(boolean success) {
            this.success = success;
        }

        public static CommandResult empty() {
            return new CommandResult(false);
        }

        public static CommandResult success() {
            return new CommandResult(true);
        }
    }
}
```
