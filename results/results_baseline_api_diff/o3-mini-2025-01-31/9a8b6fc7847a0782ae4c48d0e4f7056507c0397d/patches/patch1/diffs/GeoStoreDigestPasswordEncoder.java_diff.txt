0a1,8
> package it.geosolutions.geostore.core.security.password;
> 
> import org.apache.commons.codec.binary.Base64;
> import org.jasypt.digest.StandardByteDigester;
> import org.jasypt.util.password.StrongPasswordEncryptor;
> import org.springframework.security.crypto.password.PasswordEncoder;
> import static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;
> 
20,27d27
< package it.geosolutions.geostore.core.security.password;
< 
< import org.apache.commons.codec.binary.Base64;
< import org.jasypt.digest.StandardByteDigester;
< import org.jasypt.spring.security.PasswordEncoder;
< import org.jasypt.util.password.StrongPasswordEncryptor;
< import static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;
< 
29c29,33
<  * This Encoder provide encription and check of password using a digest
---
>  * This Encoder provide encryption and check of password using a digest
>  * (Note: the dependency API has changed; the original
>  * org.jasypt.spring.security.PasswordEncoder has been replaced with
>  * Spring Security's PasswordEncoder interface.)
>  * 
35d38
< 
45,47c48,60
<                 PasswordEncoder encoder = new PasswordEncoder();
<                 encoder.setPasswordEncryptor(new StrongPasswordEncryptor());
<                 return encoder;
---
>         return new PasswordEncoder() {
>             private final StrongPasswordEncryptor encryptor = new StrongPasswordEncryptor();
> 
>             @Override
>             public String encode(CharSequence rawPassword) {
>                 return encryptor.encryptPassword(rawPassword.toString());
>             }
> 
>             @Override
>             public boolean matches(CharSequence rawPassword, String encodedPassword) {
>                 return encryptor.checkPassword(rawPassword.toString(), encodedPassword);
>             }
>         };
64a78
>             
76d89
<         
