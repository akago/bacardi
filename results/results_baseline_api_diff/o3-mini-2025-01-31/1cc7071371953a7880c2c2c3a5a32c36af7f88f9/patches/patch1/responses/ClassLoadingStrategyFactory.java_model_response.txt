```java
package org.assertj.vavr.api;

import io.vavr.control.Try;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

class ClassLoadingStrategyFactory {

    private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
    private static final Method PRIVATE_LOOKUP_IN = Try.of(
        () -> MethodHandles.class.getMethod("privateLookupIn", Class.class, MethodHandles.Lookup.class)
    ).getOrElse((Method) null);

    static ClassLoadingStrategy<ClassLoader> classLoadingStrategy(Class<?> assertClass) {
        if (PRIVATE_LOOKUP_IN != null) {
            final MethodHandles.Lookup lookup;
            try {
                lookup = (MethodHandles.Lookup) PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP);
            } catch (Exception e) {
                throw new IllegalStateException("Could not access package of " + assertClass, e);
            }
            return new ClassLoadingStrategy<ClassLoader>() {
                @Override
                public <S> Map<String, Class<? extends S>> load(ClassLoader classLoader, Map<String, byte[]> types) {
                    Map<String, Class<? extends S>> defined = new HashMap<>();
                    for (Map.Entry<String, byte[]> entry : types.entrySet()) {
                        try {
                            @SuppressWarnings("unchecked")
                            Class<? extends S> definedClass = (Class<? extends S>) lookup.defineClass(entry.getValue());
                            defined.put(entry.getKey(), definedClass);
                        } catch (Exception ex) {
                            throw new IllegalStateException("Could not define class " + entry.getKey(), ex);
                        }
                    }
                    return defined;
                }
            };
        } else {
            throw new IllegalStateException("No code generation strategy available");
        }
    }

    public interface ClassLoadingStrategy<T> {
        <S> Map<String, Class<? extends S>> load(T target, Map<String, byte[]> types);
    }
}
```
