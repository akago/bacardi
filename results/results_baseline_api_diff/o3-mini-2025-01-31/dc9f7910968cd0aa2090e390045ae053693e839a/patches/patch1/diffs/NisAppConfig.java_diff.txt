3a4,5
> import org.flywaydb.core.api.configuration.ClassicConfiguration;
> import org.flywaydb.core.api.Location;
108,113c110,122
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 final NisConfiguration configuration = this.nisConfiguration();
>                 final String nemFolder = configuration.getNemFolder();
>                 final String jdbcUrl = prop.getProperty("jdbc.url")
>                                 .replace("${nem.folder}", nemFolder)
>                                 .replace("${nem.network}", configuration.getNetworkName());
> 
>                 ClassicConfiguration flywayConfig = new ClassicConfiguration();
>                 flywayConfig.setDataSource(jdbcUrl, prop.getProperty("jdbc.username"), prop.getProperty("jdbc.password"));
>                 flywayConfig.setClassLoader(NisAppConfig.class.getClassLoader());
>                 flywayConfig.setLocations(new Location[]{new Location(prop.getProperty("flyway.locations"))});
>                 flywayConfig.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
> 
>                 return new Flyway(flywayConfig);
